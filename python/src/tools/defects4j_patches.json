{
    "Chart": {
        "20": [
            {
                "modified_file": "source/org/jfree/chart/plot/ValueMarker.java",
                "modified_lines": [
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98
                ],
                "text": "diff --git a/source/org/jfree/chart/plot/ValueMarker.java b/source/org/jfree/chart/plot/ValueMarker.java\nindex 58d5289..075683d 100644\n--- a/source/org/jfree/chart/plot/ValueMarker.java\n+++ b/source/org/jfree/chart/plot/ValueMarker.java\n@@ -92,7 +92,7 @@ public class ValueMarker extends Marker {\n      */\n     public ValueMarker(double value, Paint paint, Stroke stroke, \n                        Paint outlinePaint, Stroke outlineStroke, float alpha) {\n-        super(paint, stroke, outlinePaint, outlineStroke, alpha);\n+        super(paint, stroke, paint, stroke, alpha);\n         this.value = value;\n     }\n     \n"
            }
        ],
        "6": [
            {
                "modified_file": "source/org/jfree/chart/util/ShapeList.java",
                "modified_lines": [
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121
                ],
                "text": "diff --git a/source/org/jfree/chart/util/ShapeList.java b/source/org/jfree/chart/util/ShapeList.java\nindex 73ece1c..85f1c81 100644\n--- a/source/org/jfree/chart/util/ShapeList.java\n+++ b/source/org/jfree/chart/util/ShapeList.java\n@@ -108,14 +108,7 @@ public class ShapeList extends AbstractObjectList {\n         if (!(obj instanceof ShapeList)) {\n             return false;\n         }\n-        ShapeList that = (ShapeList) obj;\n-        int listSize = size();\n-        for (int i = 0; i < listSize; i++) {\n-           if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) {\n-               return false;\n-           }\n-        }\n-        return true;\n+        return super.equals(obj);\n \n     }\n \n"
            }
        ],
        "3": [
            {
                "modified_file": "source/org/jfree/data/time/TimeSeries.java",
                "modified_lines": [
                    1054,
                    1055,
                    1056,
                    1057,
                    1058,
                    1059,
                    1060,
                    1061
                ],
                "text": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 72bb2ea..795d791 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,8 +1054,6 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n-        copy.minY = Double.NaN;\n-        copy.maxY = Double.NaN;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {\n"
            }
        ],
        "7": [
            {
                "modified_file": "source/org/jfree/data/time/TimePeriodValues.java",
                "modified_lines": [
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305
                ],
                "text": "Index: source/org/jfree/data/time/TimePeriodValues.java\n===================================================================\n--- source/org/jfree/data/time/TimePeriodValues.java\t(revision 1087)\n+++ source/org/jfree/data/time/TimePeriodValues.java\t(revision 1086)\n@@ -297,9 +296,9 @@\n         }\n         \n         if (this.maxMiddleIndex >= 0) {\n-            long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()\n+            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                 .getTime();\n-            long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()\n+            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                 .getTime();\n             long maxMiddle = s + (e - s) / 2;\n             if (middle > maxMiddle) {\n"
            }
        ],
        "19": [
            {
                "modified_file": "source/org/jfree/chart/plot/CategoryPlot.java",
                "modified_lines": [
                    695,
                    696,
                    697,
                    698,
                    699,
                    700,
                    701,
                    702,
                    703,
                    973,
                    974,
                    975,
                    976,
                    977,
                    978,
                    979,
                    980,
                    981
                ],
                "text": "diff --git a/source/org/jfree/chart/plot/CategoryPlot.java b/source/org/jfree/chart/plot/CategoryPlot.java\nindex ec31907..cf3f52f 100644\n--- a/source/org/jfree/chart/plot/CategoryPlot.java\n+++ b/source/org/jfree/chart/plot/CategoryPlot.java\n@@ -695,9 +695,6 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.3\n      */\n     public int getDomainAxisIndex(CategoryAxis axis) {\n-        if (axis == null) {\n-            throw new IllegalArgumentException(\"Null 'axis' argument.\");\n-        }\n         return this.domainAxes.indexOf(axis);\n     }\n     \n@@ -973,9 +970,6 @@ public class CategoryPlot extends Plot implements ValueAxisPlot,\n      * @since 1.0.7\n      */\n     public int getRangeAxisIndex(ValueAxis axis) {\n-        if (axis == null) {\n-            throw new IllegalArgumentException(\"Null 'axis' argument.\");\n-        }\n         int result = this.rangeAxes.indexOf(axis);\n         if (result < 0) { // try the parent plot\n             Plot parent = getParent();\n"
            }
        ],
        "15": [
            {
                "modified_file": "source/org/jfree/chart/plot/PiePlot.java",
                "modified_lines": [
                    1375,
                    1376,
                    1377,
                    1378,
                    1379,
                    1380,
                    1381,
                    1382,
                    1383,
                    2051,
                    2052,
                    2053,
                    2054,
                    2055,
                    2056,
                    2057,
                    2058,
                    2059,
                    2060
                ],
                "text": "diff --git a/source/org/jfree/chart/plot/PiePlot.java b/source/org/jfree/chart/plot/PiePlot.java\nindex 7c3cd04..f575e72 100644\n--- a/source/org/jfree/chart/plot/PiePlot.java\n+++ b/source/org/jfree/chart/plot/PiePlot.java\n@@ -1375,9 +1375,6 @@ public class PiePlot extends Plot implements Cloneable, Serializable {\n      * @return The percent.\n      */\n     public double getMaximumExplodePercent() {\n-        if (this.dataset == null) {\n-            return 0.0;\n-        }\n         double result = 0.0;\n         Iterator iterator = this.dataset.getKeys().iterator();\n         while (iterator.hasNext()) {\n@@ -2051,10 +2048,8 @@ public class PiePlot extends Plot implements Cloneable, Serializable {\n      \n         PiePlotState state = new PiePlotState(info);\n         state.setPassesRequired(2);\n-        if (this.dataset != null) {\n             state.setTotal(DatasetUtilities.calculatePieDatasetTotal(\n                     plot.getDataset()));\n-        }\n         state.setLatestAngle(plot.getStartAngle());\n         return state;\n         \n"
            }
        ],
        "24": [
            {
                "modified_file": "source/org/jfree/chart/renderer/GrayPaintScale.java",
                "modified_lines": [
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129
                ],
                "text": "diff --git a/source/org/jfree/chart/renderer/GrayPaintScale.java b/source/org/jfree/chart/renderer/GrayPaintScale.java\nindex e62c43f..1e1e075 100644\n--- a/source/org/jfree/chart/renderer/GrayPaintScale.java\n+++ b/source/org/jfree/chart/renderer/GrayPaintScale.java\n@@ -123,7 +123,7 @@ public class GrayPaintScale\n     public Paint getPaint(double value) {\n         double v = Math.max(value, this.lowerBound);\n         v = Math.min(v, this.upperBound);\n-        int g = (int) ((v - this.lowerBound) / (this.upperBound \n+        int g = (int) ((value - this.lowerBound) / (this.upperBound \n                 - this.lowerBound) * 255.0);\n         return new Color(g, g, g);\n     }\n"
            }
        ],
        "13": [
            {
                "modified_file": "source/org/jfree/chart/block/BorderArrangement.java",
                "modified_lines": [
                    452,
                    453,
                    454,
                    455,
                    456,
                    457,
                    458
                ],
                "text": "diff --git a/source/org/jfree/chart/block/BorderArrangement.java b/source/org/jfree/chart/block/BorderArrangement.java\nindex b3ae54b..730aeb3 100644\n--- a/source/org/jfree/chart/block/BorderArrangement.java\n+++ b/source/org/jfree/chart/block/BorderArrangement.java\n@@ -452,7 +452,7 @@ public class BorderArrangement implements Arrangement, Serializable {\n         h[3] = h[2];\n         if (this.rightBlock != null) {\n             RectangleConstraint c4 = new RectangleConstraint(0.0,\n-                    new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n+                    new Range(0.0, constraint.getWidth() - w[2]),\n                     LengthConstraintType.RANGE, h[2], null,\n                     LengthConstraintType.FIXED);\n             Size2D size = this.rightBlock.arrange(g2, c4);\n"
            }
        ],
        "9": [
            {
                "modified_file": "source/org/jfree/data/time/TimeSeries.java",
                "modified_lines": [
                    941,
                    942,
                    943,
                    944,
                    945,
                    946,
                    947
                ],
                "text": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex d16d447..4067e3e 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -941,7 +941,7 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             endIndex = -(endIndex + 1); // this is first item AFTER end period\n             endIndex = endIndex - 1;    // so this is last item BEFORE end\n         }\n-        if ((endIndex < 0)  || (endIndex < startIndex)) {\n+        if (endIndex < 0) {\n             emptyRange = true;\n         }\n         if (emptyRange) {\n"
            }
        ],
        "5": [
            {
                "modified_file": "source/org/jfree/data/xy/XYSeries.java",
                "modified_lines": [
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555
                ],
                "text": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex b26e11e..0b37e6e 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -541,15 +541,11 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n         if (x == null) {\n             throw new IllegalArgumentException(\"Null 'x' argument.\");\n         }\n-        if (this.allowDuplicateXValues) {\n-            add(x, y);\n-            return null;\n-        }\n \n         // if we get to here, we know that duplicate X values are not permitted\n         XYDataItem overwritten = null;\n         int index = indexOf(x);\n-        if (index >= 0) {\n+        if (index >= 0 && !this.allowDuplicateXValues) {\n             XYDataItem existing = (XYDataItem) this.data.get(index);\n             try {\n                 overwritten = (XYDataItem) existing.clone();\n"
            }
        ],
        "8": [
            {
                "modified_file": "source/org/jfree/data/time/Week.java",
                "modified_lines": [
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178
                ],
                "text": "diff --git a/source/org/jfree/data/time/Week.java b/source/org/jfree/data/time/Week.java\nindex 8228589..3cc4138 100644\n--- a/source/org/jfree/data/time/Week.java\n+++ b/source/org/jfree/data/time/Week.java\n@@ -172,7 +172,7 @@ public class Week extends RegularTimePeriod implements Serializable {\n      */\n     public Week(Date time, TimeZone zone) {\n         // defer argument checking...\n-        this(time, zone, Locale.getDefault());\n+        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n     }\n \n     /**\n"
            }
        ],
        "25": [
            {
                "modified_file": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
                "modified_lines": [
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                    322,
                    323,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    406,
                    407,
                    408,
                    409,
                    410,
                    411,
                    412,
                    413,
                    414,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    472,
                    473,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500,
                    501
                ],
                "text": "diff --git a/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\nindex 6ff5e36..ab65ba3 100644\n--- a/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java\n@@ -256,9 +256,6 @@ public class StatisticalBarRenderer extends BarRenderer\n \n         // BAR X\n         Number meanValue = dataset.getMeanValue(row, column);\n-        if (meanValue == null) {\n-            return;\n-        }\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n@@ -315,9 +312,7 @@ public class StatisticalBarRenderer extends BarRenderer\n         }\n \n         // standard deviation lines\n-        Number n = dataset.getStdDevValue(row, column);\n-        if (n != null) {\n-            double valueDelta = n.doubleValue();\n+            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n@@ -346,7 +341,6 @@ public class StatisticalBarRenderer extends BarRenderer\n             line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25, \n                                      lowVal, rectY + rectHeight * 0.75);\n             g2.draw(line);\n-        }\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n@@ -406,9 +400,6 @@ public class StatisticalBarRenderer extends BarRenderer\n \n         // BAR Y\n         Number meanValue = dataset.getMeanValue(row, column);\n-        if (meanValue == null) {\n-            return;\n-        }\n \n         double value = meanValue.doubleValue();\n         double base = 0.0;\n@@ -465,9 +456,7 @@ public class StatisticalBarRenderer extends BarRenderer\n         }\n \n         // standard deviation lines\n-        Number n = dataset.getStdDevValue(row, column);\n-        if (n != null) {\n-            double valueDelta = n.doubleValue();\n+            double valueDelta = dataset.getStdDevValue(row, column).doubleValue();\n             double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n                     + valueDelta, dataArea, yAxisLocation);\n             double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue() \n@@ -495,7 +484,6 @@ public class StatisticalBarRenderer extends BarRenderer\n             line = new Line2D.Double(rectX + rectWidth / 2.0d - 5.0d, lowVal,\n                                      rectX + rectWidth / 2.0d + 5.0d, lowVal);\n             g2.draw(line);\n-        }\n         \n         CategoryItemLabelGenerator generator = getItemLabelGenerator(row, \n                 column);\n"
            }
        ],
        "4": [
            {
                "modified_file": "source/org/jfree/chart/plot/XYPlot.java",
                "modified_lines": [
                    4490,
                    4491,
                    4492,
                    4493,
                    4494,
                    4495,
                    4496,
                    4499,
                    4500,
                    4501,
                    4502,
                    4503,
                    4504,
                    4505
                ],
                "text": "diff --git a/source/org/jfree/chart/plot/XYPlot.java b/source/org/jfree/chart/plot/XYPlot.java\nindex 6536d1d..ec26162 100644\n--- a/source/org/jfree/chart/plot/XYPlot.java\n+++ b/source/org/jfree/chart/plot/XYPlot.java\n@@ -4490,7 +4490,6 @@ public class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n                     }\n                 }\n                 \n-                if (r != null) {\n                     Collection c = r.getAnnotations();\n                     Iterator i = c.iterator();\n                     while (i.hasNext()) {\n@@ -4499,7 +4498,6 @@ public class XYPlot extends Plot implements ValueAxisPlot, Pannable,\n                             includedAnnotations.add(a);\n                         }\n                     }\n-                }\n             }\n         }\n \n"
            }
        ],
        "11": [
            {
                "modified_file": "source/org/jfree/chart/util/ShapeUtilities.java",
                "modified_lines": [
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278
                ],
                "text": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex f49ecb5..31aa6c6 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,7 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p2.getPathIterator(null);\n+        PathIterator iterator2 = p1.getPathIterator(null);\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();\n"
            }
        ],
        "26": [
            {
                "modified_file": "source/org/jfree/chart/axis/Axis.java",
                "modified_lines": [
                    1189,
                    1190,
                    1191,
                    1192,
                    1193,
                    1194,
                    1195,
                    1196,
                    1197,
                    1198,
                    1199,
                    1200,
                    1201
                ],
                "text": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 3f74811..78a6c66 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1189,13 +1189,11 @@ public abstract class Axis implements Cloneable, Serializable {\n         }\n         if (plotState != null && hotspot != null) {\n             ChartRenderingInfo owner = plotState.getOwner();\n-            if (owner != null) {\n                 EntityCollection entities = owner.getEntityCollection();\n                 if (entities != null) {\n                     entities.add(new AxisLabelEntity(this, hotspot, \n                             this.labelToolTip, this.labelURL));\n                 }\n-            }\n         }\n         return state;\n \n"
            }
        ],
        "12": [
            {
                "modified_file": "source/org/jfree/chart/plot/MultiplePiePlot.java",
                "modified_lines": [
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148
                ],
                "text": "diff --git a/source/org/jfree/chart/plot/MultiplePiePlot.java b/source/org/jfree/chart/plot/MultiplePiePlot.java\nindex 5fe04cb..fedc205 100644\n--- a/source/org/jfree/chart/plot/MultiplePiePlot.java\n+++ b/source/org/jfree/chart/plot/MultiplePiePlot.java\n@@ -142,7 +142,7 @@ public class MultiplePiePlot extends Plot implements Cloneable, Serializable {\n      */\n     public MultiplePiePlot(CategoryDataset dataset) {\n         super();\n-        setDataset(dataset);\n+        this.dataset = dataset;\n         PiePlot piePlot = new PiePlot(null);\n         this.pieChart = new JFreeChart(piePlot);\n         this.pieChart.removeLegend();\n"
            }
        ],
        "1": [
            {
                "modified_file": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
                "modified_lines": [
                    1794,
                    1795,
                    1796,
                    1797,
                    1798,
                    1799,
                    1800
                ],
                "text": "diff --git a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\nindex 4a54655..226b25a 100644\n--- a/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n+++ b/source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java\n@@ -1794,7 +1794,7 @@ public abstract class AbstractCategoryItemRenderer extends AbstractRenderer\n         }\n         int index = this.plot.getIndexOf(this);\n         CategoryDataset dataset = this.plot.getDataset(index);\n-        if (dataset == null) {\n+        if (dataset != null) {\n             return result;\n         }\n         int seriesCount = dataset.getRowCount();\n"
            }
        ]
    },
    "Closure": {
        "20": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
                "modified_lines": [
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 86521bd..bfa1707 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -217,8 +217,7 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null && value.getNext() == null &&\n-          NodeUtil.isImmutableValue(value)) {\n+      if (value != null) {\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());\n"
            }
        ],
        "68": [
            {
                "modified_file": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
                "modified_lines": [
                    865,
                    866,
                    867,
                    868,
                    869,
                    870,
                    871,
                    872,
                    873,
                    1706,
                    1707,
                    1708,
                    1709,
                    1710,
                    1711,
                    1712,
                    1759,
                    1760,
                    1761,
                    1762,
                    1763,
                    1764,
                    1765
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 167e2cb..26a56a7 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -865,9 +865,9 @@ public final class JsDocInfoParser {\n                         }\n                         break;\n                     }\n-                  }\n \n                   token = eatTokensUntilEOL();\n+                  }\n                   continue retry;\n               }\n             }\n@@ -1706,7 +1706,6 @@ public final class JsDocInfoParser {\n       }\n     }\n \n-    restoreLookAhead(token);\n     return reportGenericTypeSyntaxWarning();\n   }\n \n@@ -1759,7 +1758,6 @@ public final class JsDocInfoParser {\n     // NOTE(nicksantos): We're not implementing generics at the moment, so\n     // just throw out TypeParameters.\n     if (token != JsDocToken.LP) {\n-      restoreLookAhead(token);\n       return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n     }\n \n"
            }
        ],
        "59": [
            {
                "modified_file": "src/com/google/javascript/jscomp/Compiler.java",
                "modified_lines": [
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    258,
                    259
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 1d6e494..b3ca246 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,8 +252,7 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn() &&\n-        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n+    if (options.checkGlobalThisLevel.isOn()) {\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);\n"
            }
        ],
        "84": [
            {
                "modified_file": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
                "modified_lines": [
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348,
                    349,
                    350,
                    801,
                    802,
                    803,
                    804,
                    805,
                    806,
                    807,
                    808,
                    809,
                    810,
                    811,
                    812,
                    813,
                    814,
                    815,
                    816,
                    817,
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    831,
                    832,
                    833,
                    834,
                    835
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex d2a4e5d..cca8d9b 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -338,13 +338,6 @@ public class IRFactory {\n     @Override\n     Node processAssignment(Assignment assignmentNode) {\n       Node assign = processInfixExpression(assignmentNode);\n-      Node target = assign.getFirstChild();\n-      if (!validAssignmentTarget(target)) {\n-        errorReporter.error(\n-          \"invalid assignment target\",\n-          sourceName,\n-          target.getLineno(), \"\", 0);\n-      }\n       return assign;\n     }\n \n@@ -801,17 +794,6 @@ public class IRFactory {\n         operand.setDouble(-operand.getDouble());\n         return operand;\n       } else {\n-        if (type == Token.INC || type == Token.DEC) {\n-          if (!validAssignmentTarget(operand)) {\n-            String msg = (type == Token.INC)\n-                ? \"invalid increment target\"\n-                : \"invalid decrement target\";\n-            errorReporter.error(\n-              msg,\n-              sourceName,\n-              operand.getLineno(), \"\", 0);\n-          }\n-        }\n \n         Node node = newNode(type, operand);\n         if (exprNode.isPostfix()) {\n@@ -821,15 +803,6 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean validAssignmentTarget(Node target) {\n-      switch (target.getType()) {\n-        case Token.NAME:\n-        case Token.GETPROP:\n-        case Token.GETELEM:\n-          return true;\n-      }\n-      return false;\n-    }\n \n     @Override\n     Node processVariableDeclaration(VariableDeclaration declarationNode) {\n"
            }
        ],
        "74": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
                "modified_lines": [
                    904,
                    905,
                    906,
                    907,
                    908,
                    909,
                    910,
                    911,
                    1071,
                    1072,
                    1073,
                    1074,
                    1075,
                    1076,
                    1077,
                    1078,
                    1079,
                    1080,
                    1081,
                    1082,
                    1083,
                    1084,
                    1085,
                    1086,
                    1087,
                    1088,
                    1089
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 9d2f97a..a61bb6c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -904,8 +904,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           && right.getString().equals(\"undefined\"))\n           || (Token.VOID == right.getType()\n               && NodeUtil.isLiteralValue(right.getFirstChild(), false)));\n-    int lhType = getNormalizedNodeType(left);\n-    int rhType = getNormalizedNodeType(right);\n+    int lhType = left.getType();\n+    int rhType = right.getType();\n     switch (lhType) {\n       case Token.VOID:\n         if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {\n@@ -1071,19 +1071,6 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n   /**\n    * @return Translate NOT expressions into TRUE or FALSE when possible.\n    */\n-  private int getNormalizedNodeType(Node n) {\n-    int type = n.getType();\n-    if (type == Token.NOT) {\n-      TernaryValue value = NodeUtil.getPureBooleanValue(n);\n-      switch (value) {\n-        case TRUE:\n-          return Token.TRUE;\n-        case FALSE:\n-          return Token.FALSE;\n-      }\n-    }\n-    return type;\n-  }\n \n   /**\n    * The result of the comparison as a Boolean or null if the\n"
            }
        ],
        "111": [
            {
                "modified_file": "src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java",
                "modified_lines": [
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex e3c599d..1706e34 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -51,8 +51,7 @@ public class ClosureReverseAbstractInterpreter\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n-          return topType.isAllType() ?\n-              getNativeType(ARRAY_TYPE) : topType;\n+          return topType;\n         }\n \n         @Override\n"
            }
        ],
        "6": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeValidator.java",
                "modified_lines": [
                    363,
                    364,
                    365,
                    366,
                    367,
                    368,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384,
                    398,
                    399,
                    400,
                    401,
                    402,
                    403,
                    404
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex 12ce5b3..8cdb02a 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -363,6 +363,9 @@ class TypeValidator {\n       JSType leftType, Node owner, String propName) {\n     // The NoType check is a hack to make typedefs work OK.\n     if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {\n+      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {\n+        registerMismatch(rightType, leftType, null);\n+      } else {\n       // Do not type-check interface methods, because we expect that\n       // they will have dummy implementations that do not match the type\n       // annotations.\n@@ -379,6 +382,7 @@ class TypeValidator {\n           \"assignment to property \" + propName + \" of \" +\n           getReadableJSTypeName(owner, true),\n           rightType, leftType);\n+      }\n       return false;\n     }\n     return true;\n@@ -398,7 +402,11 @@ class TypeValidator {\n   boolean expectCanAssignTo(NodeTraversal t, Node n, JSType rightType,\n       JSType leftType, String msg) {\n     if (!rightType.canAssignTo(leftType)) {\n+      if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {\n+        registerMismatch(rightType, leftType, null);\n+      } else {\n       mismatch(t, n, msg, rightType, leftType);\n+      }\n       return false;\n     }\n     return true;\n"
            }
        ],
        "57": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
                "modified_lines": [
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex b5a3c1b..c507c92 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -194,7 +194,7 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n-          if (target != null && target.getType() == Token.STRING) {\n+          if (target != null) {\n             className = target.getString();\n           }\n         }\n"
            }
        ],
        "3": [
            {
                "modified_file": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
                "modified_lines": [
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    378,
                    379,
                    380,
                    381,
                    382,
                    383
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex c46ee7d..a77221a 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -152,7 +152,7 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n     reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);\n     reachingUses.analyze();\n     for (Candidate c : candidates) {\n-      if (c.canInline(t.getScope())) {\n+      if (c.canInline()) {\n         c.inlineVariable();\n \n         // If definition c has dependencies, then inlining it may have\n@@ -277,7 +277,7 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n       return defMetadata.node;\n     }\n \n-    private boolean canInline(final Scope scope) {\n+    private boolean canInline() {\n       // Cannot inline a parameter.\n       if (getDefCfgNode().isFunction()) {\n         return false;\n@@ -372,12 +372,6 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n                   case Token.REGEXP:\n                   case Token.NEW:\n                     return true;\n-                  case Token.NAME:\n-                    Var var = scope.getOwnSlot(input.getString());\n-                    if (var != null\n-                        && var.getParentNode().isCatch()) {\n-                      return true;\n-                    }\n                 }\n                 return false;\n               }\n"
            }
        ],
        "7": [
            {
                "modified_file": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
                "modified_lines": [
                    610,
                    611,
                    612,
                    613,
                    614,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    621,
                    622
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex fa7d47d..0afabc8 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -610,13 +610,9 @@ public abstract class ChainableReverseAbstractInterpreter\n     public JSType caseObjectType(ObjectType type) {\n       if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        if (resultEqualsValue) {\n+        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n           // Objects are restricted to \"Function\", subtypes are left\n-          return ctorType.getGreatestSubtype(type);\n-        } else {\n           // Only filter out subtypes of \"function\"\n-          return type.isSubtype(ctorType) ? null : type;\n-        }\n       }\n       return matchesExpectation(\"object\") ? type : null;\n     }\n"
            }
        ],
        "19": [
            {
                "modified_file": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
                "modified_lines": [
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 752e04f..0345c85 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -169,9 +169,7 @@ public abstract class ChainableReverseAbstractInterpreter\n         scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n         break;\n \n-      case Token.THIS:\n         // \"this\" references aren't currently modeled in the CFG.\n-        break;\n \n       default:\n         throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n"
            }
        ],
        "55": [
            {
                "modified_file": "src/com/google/javascript/jscomp/FunctionRewriter.java",
                "modified_lines": [
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex 9d8ebc3..dbf0006 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,8 +114,7 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n)\n-        && !NodeUtil.isGetOrSetKey(n.getParent());\n+    return NodeUtil.isFunctionExpression(n);\n   }\n \n   /**\n"
            }
        ],
        "43": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
                "modified_lines": [
                    417,
                    418,
                    419,
                    420,
                    421,
                    422,
                    423,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    557,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    591,
                    592,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex f9943a1..92d8715 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -417,7 +417,6 @@ final class TypedScopeCreator implements ScopeCreator {\n      * For more information, see\n      * http://code.google.com/p/closure-compiler/issues/detail?id=314\n      */\n-    private List<Node> lentObjectLiterals = null;\n \n     /**\n      * Type-less stubs.\n@@ -545,13 +544,6 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n \n       // Analyze any @lends object literals in this statement.\n-      if (n.getParent() != null && NodeUtil.isStatement(n) &&\n-          lentObjectLiterals != null) {\n-        for (Node objLit : lentObjectLiterals) {\n-          defineObjectLiteral(objLit);\n-        }\n-        lentObjectLiterals.clear();\n-      }\n     }\n \n     private void attachLiteralTypes(NodeTraversal t, Node n) {\n@@ -585,16 +577,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           break;\n \n         case Token.OBJECTLIT:\n-          JSDocInfo info = n.getJSDocInfo();\n-          if (info != null &&\n-              info.getLendsName() != null) {\n-            if (lentObjectLiterals == null) {\n-              lentObjectLiterals = Lists.newArrayList();\n-            }\n-            lentObjectLiterals.add(n);\n-          } else {\n             defineObjectLiteral(n);\n-          }\n           break;\n \n           // NOTE(nicksantos): If we ever support Array tuples,\n"
            }
        ],
        "16": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ScopedAliases.java",
                "modified_lines": [
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    477
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex e2f0538..26fb230 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -167,23 +167,17 @@ class ScopedAliases implements HotSwapCompilerPass {\n \n   private class AliasedTypeNode implements AliasUsage {\n     private final Node typeReference;\n-    private final Node aliasDefinition;\n     private final String aliasName;\n \n-    AliasedTypeNode(Node typeReference, Node aliasDefinition,\n+    AliasedTypeNode(Node typeReference,\n         String aliasName) {\n       this.typeReference = typeReference;\n-      this.aliasDefinition = aliasDefinition;\n       this.aliasName = aliasName;\n     }\n \n     @Override\n     public void applyAlias() {\n-      String typeName = typeReference.getString();\n-      String aliasExpanded =\n-          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());\n-      Preconditions.checkState(typeName.startsWith(aliasName));\n-      typeReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));\n+      typeReference.setString(aliasName);\n     }\n   }\n \n@@ -471,7 +465,7 @@ class ScopedAliases implements HotSwapCompilerPass {\n         Var aliasVar = aliases.get(baseName);\n         if (aliasVar != null) {\n           Node aliasedNode = aliasVar.getInitialValue();\n-          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode, baseName));\n+          aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex)));\n         }\n       }\n \n"
            }
        ],
        "31": [
            {
                "modified_file": "src/com/google/javascript/jscomp/Compiler.java",
                "modified_lines": [
                    1282,
                    1283,
                    1284,
                    1285,
                    1286,
                    1287
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d98be4a..b76bbb5 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1282,6 +1282,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       if (options.dependencyOptions.needsManagement() &&\n+          !options.skipAllPasses &&\n           options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n"
            }
        ],
        "71": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CheckAccessControls.java",
                "modified_lines": [
                    413,
                    414,
                    415,
                    416,
                    417,
                    418,
                    419
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex 09eaa26..b23fd7a 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = parent.getJSDocInfo() != null &&\n+      boolean isOverride = t.inGlobalScope() &&\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n \n"
            }
        ],
        "79": [
            {
                "modified_file": "src/com/google/javascript/jscomp/Normalize.java",
                "modified_lines": [
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 8bee886..6738b10 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -119,7 +119,7 @@ class Normalize implements CompilerPass {\n   public void process(Node externs, Node root) {\n     new NodeTraversal(\n         compiler, new NormalizeStatements(compiler, assertOnChange))\n-        .traverseRoots(externs, root);\n+        .traverse(root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n"
            },
            {
                "modified_file": "src/com/google/javascript/jscomp/VarCheck.java",
                "modified_lines": [
                    218,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/VarCheck.java b/src/com/google/javascript/jscomp/VarCheck.java\nindex f8ebfa3..c8196b1 100644\n--- a/src/com/google/javascript/jscomp/VarCheck.java\n+++ b/src/com/google/javascript/jscomp/VarCheck.java\n@@ -218,7 +218,6 @@ class VarCheck extends AbstractPostOrderCallback implements CompilerPass {\n     getSynthesizedExternsRoot().addChildToBack(\n         new Node(Token.VAR, nameNode));\n     varsToDeclareInExterns.remove(varName);\n-    compiler.reportCodeChange();\n   }\n \n   /**\n"
            }
        ],
        "131": [
            {
                "modified_file": "src/com/google/javascript/rhino/TokenStream.java",
                "modified_lines": [
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/TokenStream.java b/src/com/google/javascript/rhino/TokenStream.java\nindex cadb536..144a4ad 100644\n--- a/src/com/google/javascript/rhino/TokenStream.java\n+++ b/src/com/google/javascript/rhino/TokenStream.java\n@@ -191,13 +191,12 @@ public class TokenStream {\n       int length = s.length();\n \n       if (length == 0 ||\n-          Character.isIdentifierIgnorable(s.charAt(0)) ||\n           !Character.isJavaIdentifierStart(s.charAt(0))) {\n         return false;\n       }\n \n       for (int i = 1; i < length; i++) {\n-        if (Character.isIdentifierIgnorable(s.charAt(i)) ||\n+        if (\n             !Character.isJavaIdentifierPart(s.charAt(i))) {\n           return false;\n         }\n"
            }
        ],
        "15": [
            {
                "modified_file": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
                "modified_lines": [
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex 20196bf..a8e92fc 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,9 +99,6 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n-        if (n.isDelProp()) {\n-          return true;\n-        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n"
            }
        ],
        "27": [
            {
                "modified_file": "src/com/google/javascript/rhino/IR.java",
                "modified_lines": [
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/IR.java b/src/com/google/javascript/rhino/IR.java\nindex 002acd6..081f01f 100644\n--- a/src/com/google/javascript/rhino/IR.java\n+++ b/src/com/google/javascript/rhino/IR.java\n@@ -108,9 +108,6 @@ public class IR {\n     return block;\n   }\n \n-  private static Node blockUnchecked(Node stmt) {\n-    return new Node(Token.BLOCK, stmt);\n-  }\n \n   public static Node script(Node ... stmts) {\n     // TODO(johnlenz): finish setting up the SCRIPT node\n@@ -224,8 +221,8 @@ public class IR {\n   }\n \n   public static Node tryFinally(Node tryBody, Node finallyBody) {\n-    Preconditions.checkState(tryBody.isBlock());\n-    Preconditions.checkState(finallyBody.isBlock());\n+    Preconditions.checkState(tryBody.isLabelName());\n+    Preconditions.checkState(finallyBody.isLabelName());\n     Node catchBody = block().copyInformationFrom(tryBody);\n     return new Node(Token.TRY, tryBody, catchBody, finallyBody);\n   }\n@@ -233,7 +230,7 @@ public class IR {\n   public static Node tryCatch(Node tryBody, Node catchNode) {\n     Preconditions.checkState(tryBody.isBlock());\n     Preconditions.checkState(catchNode.isCatch());\n-    Node catchBody = blockUnchecked(catchNode).copyInformationFrom(catchNode);\n+    Node catchBody = block(catchNode).copyInformationFrom(catchNode);\n     return new Node(Token.TRY, tryBody, catchBody);\n   }\n \n"
            }
        ],
        "132": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
                "modified_lines": [
                    779,
                    780,
                    781,
                    782,
                    783,
                    784,
                    785,
                    786,
                    787
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 520c592..ae568e8 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,9 +779,7 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs) &&\n-              (!mayHaveSideEffects(cond) ||\n-                  (thenOp.isAssign() && thenOp.getFirstChild().isName()))) {\n+              !mayEffectMutableState(lhs)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();\n"
            }
        ],
        "64": [
            {
                "modified_file": "src/com/google/javascript/jscomp/Compiler.java",
                "modified_lines": [
                    1429,
                    1430,
                    1431,
                    1432,
                    1433,
                    1434,
                    1435,
                    1458,
                    1459,
                    1460,
                    1461,
                    1462,
                    1463,
                    1464,
                    1465,
                    1466,
                    1467,
                    1468,
                    1469,
                    1470,
                    1471,
                    1472,
                    1473,
                    1474,
                    1475,
                    1476
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 45d88ba..71f76d8 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1429,7 +1429,7 @@ public class Compiler extends AbstractCompiler {\n \n         // if LanguageMode is ECMASCRIPT5_STRICT, only print 'use strict'\n         // for the first input file\n-        String code = toSource(root, sourceMap, inputSeqNum == 0);\n+        String code = toSource(root, sourceMap);\n         if (!code.isEmpty()) {\n           cb.append(code);\n \n@@ -1458,19 +1458,19 @@ public class Compiler extends AbstractCompiler {\n   @Override\n   String toSource(Node n) {\n     initCompilerOptionsIfTesting();\n-    return toSource(n, null, true);\n+    return toSource(n, null);\n   }\n \n   /**\n    * Generates JavaScript source code for an AST.\n    */\n-  private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n+  private String toSource(Node n, SourceMap sourceMap) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n-    builder.setTagAsStrict(firstOutput &&\n+    builder.setTagAsStrict(\n         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n     builder.setLineLengthThreshold(options.lineLengthThreshold);\n \n"
            }
        ],
        "45": [
            {
                "modified_file": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "modified_lines": [
                    729,
                    730,
                    731,
                    732,
                    733,
                    734,
                    735,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    905,
                    906,
                    907,
                    908,
                    909,
                    910,
                    911
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex c93a073..be72a58 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -729,7 +729,6 @@ class RemoveUnusedVars\n             assignedToUnknownValue = true;\n           }\n \n-          boolean maybeEscaped = false;\n           for (Assign assign : assignsByVar.get(var)) {\n             if (assign.isPropertyAssign) {\n               hasPropertyAssign = true;\n@@ -737,12 +736,9 @@ class RemoveUnusedVars\n                 assign.assignNode.getLastChild(), true)) {\n               assignedToUnknownValue = true;\n             }\n-            if (assign.maybeAliased) {\n-              maybeEscaped = true;\n-            }\n           }\n \n-          if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {\n+          if (assignedToUnknownValue && hasPropertyAssign) {\n             changes = markReferencedVar(var) || changes;\n             maybeUnreferenced.remove(current);\n             current--;\n@@ -905,7 +901,7 @@ class RemoveUnusedVars\n       this.nameNode = nameNode;\n       this.isPropertyAssign = isPropertyAssign;\n \n-      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);\n+      this.maybeAliased = !assignNode.getParent().isExprResult();\n       this.mayHaveSecondarySideEffects =\n           maybeAliased ||\n           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n"
            }
        ],
        "77": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "modified_lines": [
                    963,
                    964,
                    965,
                    966,
                    967,
                    968,
                    969
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 22df685..8cd3ab9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -963,7 +963,6 @@ class CodeGenerator {\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n-        case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n"
            }
        ],
        "24": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ScopedAliases.java",
                "modified_lines": [
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex c248002..30d29d0 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -275,8 +275,8 @@ class ScopedAliases implements HotSwapCompilerPass {\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar() &&\n-            n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+        if (parent.isVar()) {\n+          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n           String name = n.getString();\n           Var aliasVar = scope.getVar(name);\n           aliases.put(name, aliasVar);\n@@ -284,16 +284,15 @@ class ScopedAliases implements HotSwapCompilerPass {\n           String qualifiedName =\n               aliasVar.getInitialValue().getQualifiedName();\n           transformation.addAlias(name, qualifiedName);\n-        } else if (v.isBleedingFunction()) {\n           // Bleeding functions already get a BAD_PARAMETERS error, so just\n           // do nothing.\n-        } else if (parent.getType() == Token.LP) {\n           // Parameters of the scope function also get a BAD_PARAMETERS\n           // error.\n         } else {\n           // TODO(robbyw): Support using locals for private variables.\n           report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n+        }\n       }\n     }\n \n"
            }
        ],
        "90": [
            {
                "modified_file": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
                "modified_lines": [
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\nindex 3394fa6..99c9fce 100644\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n@@ -181,7 +181,7 @@ final class FunctionTypeBuilder {\n       // create interfaces JSType, ObjectType, FunctionType etc and have\n       // separate implementation instead of the class hierarchy, so that\n       // union types can also be object types, etc.\n-      if (!type.restrictByNotNullOrUndefined().isSubtype(\n+      if (!type.isSubtype(\n               typeRegistry.getNativeType(OBJECT_TYPE))) {\n         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n         return false;\n"
            },
            {
                "modified_file": "src/com/google/javascript/rhino/jstype/FunctionType.java",
                "modified_lines": [
                    877,
                    878,
                    879,
                    880,
                    881,
                    882,
                    883,
                    884,
                    885
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex de1d1c2..3f0d245 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -877,9 +877,6 @@ public class FunctionType extends PrototypeObjectType {\n     // mean \"nullable Foo\". For certain tags (like @extends) we de-nullify\n     // the name for them.\n     JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n-    if (maybeTypeOfThis != null) {\n-      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();\n-    }\n     if (maybeTypeOfThis instanceof ObjectType) {\n       typeOfThis = (ObjectType) maybeTypeOfThis;\n     }\n"
            }
        ],
        "13": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
                "modified_lines": [
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex eeeb6a9..b51c088 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -123,8 +123,8 @@ class PeepholeOptimizationsPass\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n-        Node next = c.getNext();\n         traverse(c);\n+        Node next = c.getNext();\n         c = next;\n       }\n \n"
            }
        ],
        "72": [
            {
                "modified_file": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
                "modified_lines": [
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/FunctionToBlockMutator.java b/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\nindex 3fee1a9..64764c0 100644\n--- a/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\n+++ b/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\n@@ -149,8 +149,6 @@ class FunctionToBlockMutator {\n                 \"inline_\",\n                 isCallInLoop)));\n     // Make label names unique to this instance.\n-    new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false)\n-        .process(null, fnNode);\n   }\n \n   static class LabelNameSupplier implements Supplier<String> {\n"
            },
            {
                "modified_file": "src/com/google/javascript/jscomp/RenameLabels.java",
                "modified_lines": [
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/RenameLabels.java b/src/com/google/javascript/jscomp/RenameLabels.java\nindex 28e52ee..a2f53cf 100644\n--- a/src/com/google/javascript/jscomp/RenameLabels.java\n+++ b/src/com/google/javascript/jscomp/RenameLabels.java\n@@ -212,7 +212,7 @@ final class RenameLabels implements CompilerPass {\n       String name = nameNode.getString();\n       LabelInfo li = getLabelInfo(name);\n       // This is a label...\n-      if (li.referenced || !removeUnused) {\n+      if (li.referenced) {\n         String newName = getNameForId(li.id);\n         if (!name.equals(newName)) {\n           // ... and it is used, give it the short name.\n"
            }
        ],
        "86": [
            {
                "modified_file": "src/com/google/javascript/jscomp/NodeUtil.java",
                "modified_lines": [
                    2462,
                    2463,
                    2464,
                    2465,
                    2466,
                    2467,
                    2468
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 9049aae..dd78f90 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,7 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return false;\n+        return true;\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n"
            }
        ],
        "63": [
            {
                "modified_file": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
                "modified_lines": [
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 420dbc0..5a4f884 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno <= sourceExcerpt.length()) {\n+          && 0 <= charno && charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n"
            }
        ],
        "93": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
                "modified_lines": [
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 1d738b5..c929a36 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.lastIndexOf('.');\n+          int indexOfDot = namespace.indexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)\n"
            }
        ],
        "91": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
                "modified_lines": [
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 91008e4..fa598d2 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,15 +112,6 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n-      Node gramps = parent.getParent();\n-      if (NodeUtil.isObjectLitKey(parent, gramps)) {\n-        JSDocInfo maybeLends = gramps.getJSDocInfo();\n-        if (maybeLends != null &&\n-            maybeLends.getLendsName() != null &&\n-            maybeLends.getLendsName().endsWith(\".prototype\")) {\n-          return false;\n-        }\n-      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n"
            }
        ],
        "66": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeCheck.java",
                "modified_lines": [
                    513,
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex d3def01..edb7805 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -513,9 +513,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n         // Object literal keys are handled with OBJECTLIT\n         if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n           ensureTyped(t, n, STRING_TYPE);\n-        } else {\n           // Object literal keys are not typeable\n-          typeable = false;\n         }\n         break;\n \n"
            }
        ],
        "62": [
            {
                "modified_file": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
                "modified_lines": [
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 420dbc0..5a4f884 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,7 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno <= sourceExcerpt.length()) {\n+          && 0 <= charno && charno < sourceExcerpt.length()) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n"
            }
        ],
        "126": [
            {
                "modified_file": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
                "modified_lines": [
                    138,
                    139,
                    140,
                    141,
                    142,
                    143
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex bc9befe..4146f17 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,6 +138,10 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n+      if (NodeUtil.hasFinally(n)) {\n+        Node finallyBlock = n.getLastChild();\n+        tryMinimizeExits(finallyBlock, exitType, labelName);\n+      }\n     }\n \n     // Just a 'label'.\n"
            }
        ],
        "17": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
                "modified_lines": [
                    1288,
                    1289,
                    1290,
                    1291,
                    1292,
                    1293,
                    1294,
                    1295,
                    1296,
                    1297,
                    1298,
                    1299
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 8bc7bda..efaba2c 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1288,12 +1288,8 @@ final class TypedScopeCreator implements ScopeCreator {\n           if (info.isConstant()) {\n             JSType knownType = null;\n             if (rValue != null) {\n-              JSDocInfo rValueInfo = rValue.getJSDocInfo();\n-              if (rValueInfo != null && rValueInfo.hasType()) {\n+              if (rValue.getJSType() != null && !rValue.getJSType().isUnknownType()) {\n                 // If rValue has a type-cast, we use the type in the type-cast.\n-                return rValueInfo.getType().evaluate(scope, typeRegistry);\n-              } else if (rValue.getJSType() != null\n-                  && !rValue.getJSType().isUnknownType()) {\n                 // If rValue's type was already computed during scope creation,\n                 // then we can safely use that.\n                 return rValue.getJSType();\n"
            }
        ],
        "85": [
            {
                "modified_file": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
                "modified_lines": [
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\nindex e6d4320..c2150b1 100644\n--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n@@ -150,7 +150,20 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback\n       return n;\n     }\n \n+    if (n.getParent() == null) {\n+      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n+      if (outEdges.size() == 1) {\n+        return tryRemoveUnconditionalBranching(outEdges.get(0).getDestination().getValue());\n+      }\n+    }\n     switch (n.getType()) {\n+      case Token.BLOCK:\n+        if (n.hasChildren()) {\n+          Node first = n.getFirstChild();\n+          return tryRemoveUnconditionalBranching(first);\n+        } else {\n+          return tryRemoveUnconditionalBranching(ControlFlowAnalysis.computeFollowNode(n));\n+        }\n       case Token.RETURN:\n         if (n.hasChildren()) {\n           break;\n@@ -167,7 +180,7 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback\n             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n \n           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n-          Node fallThrough = computeFollowing(n);\n+          Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));\n           Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n           if (nextCfgNode == fallThrough) {\n             removeDeadExprStatementSafely(n);\n@@ -180,13 +193,6 @@ class UnreachableCodeElimination extends AbstractPostOrderCallback\n \n   private Node computeFollowing(Node n) {\n     Node next = ControlFlowAnalysis.computeFollowNode(n);\n-    while (next != null && next.getType() == Token.BLOCK) {\n-      if (next.hasChildren()) {\n-        next = next.getFirstChild();\n-      } else {\n-        next = computeFollowing(next);\n-      }\n-    }\n     return next;\n   }\n \n"
            }
        ],
        "51": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeConsumer.java",
                "modified_lines": [
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 3a66750..d9ff87a 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -238,7 +238,7 @@ abstract class CodeConsumer {\n       add(\" \");\n     }\n \n-    if ((long) x == x && !isNegativeZero(x)) {\n+    if ((long) x == x) {\n       long value = (long) x;\n       long mantissa = value;\n       int exp = 0;\n@@ -256,10 +256,7 @@ abstract class CodeConsumer {\n     } else {\n       add(String.valueOf(x));\n     }\n-  }\n \n-  static boolean isNegativeZero(double x) {\n-    return x == 0.0 && Math.copySign(1, x) == -1.0;\n   }\n \n   static boolean isWordChar(char ch) {\n"
            }
        ],
        "2": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeCheck.java",
                "modified_lines": [
                    1569,
                    1570,
                    1571,
                    1572,
                    1573,
                    1574,
                    1575,
                    1576,
                    1577,
                    1578,
                    1579,
                    1580,
                    1581
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 96f256d..a0f95db 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1569,13 +1569,9 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       ObjectType interfaceType) {\n     ObjectType implicitProto = interfaceType.getImplicitPrototype();\n     Set<String> currentPropertyNames;\n-    if (implicitProto == null) {\n       // This can be the case if interfaceType is proxy to a non-existent\n       // object (which is a bad type annotation, but shouldn't crash).\n-      currentPropertyNames = ImmutableSet.of();\n-    } else {\n       currentPropertyNames = implicitProto.getOwnPropertyNames();\n-    }\n     for (String name : currentPropertyNames) {\n       ObjectType oType = properties.get(name);\n       if (oType != null) {\n"
            }
        ],
        "44": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeConsumer.java",
                "modified_lines": [
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 8023324..4755665 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -191,13 +191,11 @@ abstract class CodeConsumer {\n       // need space to separate. This is not pretty printing.\n       // For example: \"return foo;\"\n       append(\" \");\n-    } else if (c == '/' && getLastChar() == '/') {\n       // Do not allow a forward slash to appear after a DIV.\n       // For example,\n       // REGEXP DIV REGEXP\n       // is valid and should print like\n       // / // / /\n-      append(\" \");\n     }\n \n     append(newcode);\n"
            }
        ],
        "83": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CommandLineRunner.java",
                "modified_lines": [
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 4c3b258..f146b0e 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -331,10 +331,7 @@ public class CommandLineRunner extends\n \n       @Override\n       public int parseArguments(Parameters params) throws CmdLineException {\n-        String param = null;\n-        try {\n-          param = params.getParameter(0);\n-        } catch (CmdLineException e) {}\n+        String param = params.getParameter(0);\n \n         if (param == null) {\n           setter.addValue(true);\n"
            }
        ],
        "92": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
                "modified_lines": [
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 1d738b5..c929a36 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.lastIndexOf('.');\n+          int indexOfDot = namespace.indexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)\n"
            }
        ],
        "80": [
            {
                "modified_file": "src/com/google/javascript/jscomp/NodeUtil.java",
                "modified_lines": [
                    1259,
                    1260,
                    1261,
                    1262,
                    1263,
                    1264,
                    1265,
                    2908,
                    2909,
                    2910,
                    2911,
                    2912,
                    2913,
                    2914
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dfcd3eb..08fb954 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1259,7 +1259,6 @@ public final class NodeUtil {\n       // Inversion\n       case Token.NOT:\n       // delete operator returns a boolean.\n-      case Token.DELPROP:\n         return true;\n       default:\n         return false;\n@@ -2908,7 +2907,6 @@ public final class NodeUtil {\n       case Token.OBJECTLIT:\n         // Literals objects with non-literal children are allowed.\n         return true;\n-      case Token.DELPROP:\n       case Token.IN:\n         // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n         return true;\n"
            }
        ],
        "89": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CollapseProperties.java",
                "modified_lines": [
                    481,
                    482,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ddccf0d..16d533d 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -481,9 +481,6 @@ class CollapseProperties implements CompilerPass {\n     Node greatGramps = gramps.getParent();\n     Node greatGreatGramps = greatGramps.getParent();\n \n-    if (rvalue != null && rvalue.getType() == Token.FUNCTION) {\n-      checkForHosedThisReferences(rvalue, refName.docInfo, refName);\n-    }\n \n     // Create the new alias node.\n     Node nameNode = NodeUtil.newName(\n"
            },
            {
                "modified_file": "src/com/google/javascript/jscomp/GlobalNamespace.java",
                "modified_lines": [
                    917,
                    918,
                    919,
                    920,
                    921,
                    922,
                    923
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 8268339..311e343 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -917,7 +917,7 @@ class GlobalNamespace {\n       }\n \n       // If this is aliased, then its properties can't be collapsed either.\n-      if (aliasingGets > 0) {\n+      if (type != Type.FUNCTION && aliasingGets > 0) {\n         return false;\n       }\n \n"
            }
        ],
        "38": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeConsumer.java",
                "modified_lines": [
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 3522e89..4381487 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -242,7 +242,7 @@ abstract class CodeConsumer {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if ((x < 0 || negativeZero) && prev == '-') {\n+    if (x < 0 && prev == '-') {\n       add(\" \");\n     }\n \n"
            }
        ],
        "41": [
            {
                "modified_file": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
                "modified_lines": [
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    483,
                    484,
                    485,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493,
                    494
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\nindex e20d788..14694ce 100644\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n@@ -289,9 +289,6 @@ final class FunctionTypeBuilder {\n       }\n \n       // Clone any remaining params that aren't in the function literal.\n-      while (oldParams.hasNext()) {\n-        paramBuilder.newParameterFromNode(oldParams.next());\n-      }\n \n       parametersNode = paramBuilder.build();\n     }\n@@ -483,12 +480,6 @@ final class FunctionTypeBuilder {\n     }\n \n     // Copy over any old parameters that aren't in the param list.\n-    if (!isVarArgs) {\n-      while (oldParameterType != null && !isVarArgs) {\n-        builder.newParameterFromNode(oldParameterType);\n-        oldParameterType = oldParameterType.getNext();\n-      }\n-    }\n \n     if (templateTypeName != null && !foundTemplateType) {\n       reportError(TEMPLATE_TYPE_EXPECTED, fnName);\n"
            }
        ],
        "9": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
                "modified_lines": [
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\nindex 6777957..2987bda 100644\n--- a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\n+++ b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\n@@ -116,7 +116,6 @@ public class ProcessCommonJSModules implements CompilerPass {\n   private String normalizeSourceName(String filename) {\n     // The DOS command shell will normalize \"/\" to \"\\\", so we have to\n     // wrestle it back.\n-    filename = filename.replace(\"\\\\\", \"/\");\n \n     if (filename.indexOf(filenamePrefix) == 0) {\n       filename = filename.substring(filenamePrefix.length());\n@@ -181,7 +180,7 @@ public class ProcessCommonJSModules implements CompilerPass {\n       Preconditions.checkArgument(scriptNodeCount == 1,\n           \"ProcessCommonJSModules supports only one invocation per \" +\n           \"CompilerInput / script node\");\n-      String moduleName = guessCJSModuleName(script.getSourceFileName());\n+      String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));\n       script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n           .copyInformationFromForTree(script));\n       if (reportDependencies) {\n"
            }
        ],
        "130": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CollapseProperties.java",
                "modified_lines": [
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex f86625f..ab2d2c7 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,7 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&\n+      if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.\n"
            }
        ],
        "5": [
            {
                "modified_file": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
                "modified_lines": [
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex d03988c..2b85d84 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,9 +173,6 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n-          if (gramps.isDelProp()) {\n-            return false;\n-          }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an\n"
            }
        ],
        "101": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CommandLineRunner.java",
                "modified_lines": [
                    430,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex c18639a..bdf5592 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -430,8 +430,10 @@ public class CommandLineRunner extends\n     for (FormattingOption formattingOption : flags.formatting) {\n       formattingOption.applyToOptions(options);\n     }\n+    if (flags.process_closure_primitives) {\n+      options.closurePass = true;\n+    }\n \n-    options.closurePass = flags.process_closure_primitives;\n     initOptionsFromFlags(options);\n     return options;\n   }\n"
            }
        ],
        "95": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
                "modified_lines": [
                    896,
                    897,
                    898,
                    899,
                    900,
                    901,
                    902,
                    903,
                    904,
                    905,
                    906,
                    907,
                    908,
                    909,
                    910,
                    911
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex c7005b2..4bd6bfb 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -896,16 +896,9 @@ final class TypedScopeCreator implements ScopeCreator {\n       // scope where the root object appears. This helps out people\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n-      if (n.getType() == Token.GETPROP && !scope.isGlobal() &&\n-          isQnameRootedInGlobalScope(n)) {\n-        Scope globalScope = scope.getGlobalScope();\n \n         // don't try to declare in the global scope if there's\n         // already a symbol there with this name.\n-        if (!globalScope.isDeclared(variableName, false)) {\n-          scopeToDeclareIn = scope.getGlobalScope();\n-        }\n-      }\n \n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n"
            }
        ],
        "28": [
            {
                "modified_file": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
                "modified_lines": [
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/InlineCostEstimator.java b/src/com/google/javascript/jscomp/InlineCostEstimator.java\nindex 65694ab..76a5d0a 100644\n--- a/src/com/google/javascript/jscomp/InlineCostEstimator.java\n+++ b/src/com/google/javascript/jscomp/InlineCostEstimator.java\n@@ -99,9 +99,5 @@ class InlineCostEstimator {\n      * Constants (true, false, null) are considered basically free,\n      * because it's likely that they will get folded when we're done.\n      */\n-    @Override\n-    void addConstant(String newcode) {\n-      add(\"0\");\n-    }\n   }\n }\n"
            }
        ],
        "76": [
            {
                "modified_file": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
                "modified_lines": [
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                    322,
                    323,
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    351,
                    352,
                    353,
                    354,
                    355,
                    356,
                    357,
                    358,
                    359,
                    376,
                    377,
                    378,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384,
                    385,
                    386,
                    387,
                    388,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    398,
                    399,
                    400,
                    402,
                    403,
                    404,
                    405,
                    406,
                    407,
                    408,
                    409,
                    410,
                    411,
                    412
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex aaab0d6..63a7f29 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -297,40 +297,26 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n           // If the currently node is the first child of\n           // AND/OR, be conservative only consider the READs\n           // of the second operand.\n-          if (n.getNext() != null) {\n-            state = isVariableReadBeforeKill(\n-                n.getNext(), variable);\n-            if (state == VariableLiveness.KILL) {\n-              state = VariableLiveness.MAYBE_LIVE;\n-            }\n-          }\n-          break;\n \n         case Token.HOOK:\n           // If current node is the condition, check each following\n           // branch, otherwise it is a conditional branch and the\n           // other branch can be ignored.\n-          if (n.getNext() != null && n.getNext().getNext() != null) {\n-            state = checkHookBranchReadBeforeKill(\n-                n.getNext(), n.getNext().getNext(), variable);\n-          }\n-          break;\n \n         default:\n           for(Node sibling = n.getNext(); sibling != null;\n               sibling = sibling.getNext()) {\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n             state = isVariableReadBeforeKill(sibling, variable);\n-            if (state != VariableLiveness.MAYBE_LIVE) {\n-              break;\n-            }\n-          }\n-      }\n \n       // If we see a READ or KILL there is no need to continue.\n       if (state == VariableLiveness.READ) {\n         return true;\n       } else if (state == VariableLiveness.KILL) {\n         return false;\n+            }\n+          }\n+      }\n       }\n       n = n.getParent();\n     }\n@@ -351,9 +337,6 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n-    if (ControlFlowGraph.isEnteringNewCfgNode(n)) { // Not a FUNCTION\n-      return VariableLiveness.MAYBE_LIVE;\n-    }\n \n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n@@ -376,25 +359,9 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n       // Conditionals\n       case Token.OR:\n       case Token.AND:\n-        VariableLiveness v1 = isVariableReadBeforeKill(\n-          n.getFirstChild(), variable);\n-        VariableLiveness v2 = isVariableReadBeforeKill(\n-          n.getLastChild(), variable);\n         // With a AND/OR the first branch always runs, but the second is\n         // may not.\n-        if (v1 != VariableLiveness.MAYBE_LIVE) {\n-          return v1;\n-        } else if (v2 == VariableLiveness.READ) {\n-          return VariableLiveness.READ;\n-        } else {\n-          return VariableLiveness.MAYBE_LIVE;\n-        }\n       case Token.HOOK:\n-        VariableLiveness first = isVariableReadBeforeKill(\n-            n.getFirstChild(), variable);\n-        if (first != VariableLiveness.MAYBE_LIVE) {\n-          return first;\n-        }\n         return checkHookBranchReadBeforeKill(\n             n.getFirstChild().getNext(), n.getLastChild(), variable);\n \n@@ -402,11 +369,13 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n         // Expressions are evaluated left-right, depth first.\n         for (Node child = n.getFirstChild();\n             child != null; child = child.getNext()) {\n+          if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n           VariableLiveness state = isVariableReadBeforeKill(child, variable);\n           if (state != VariableLiveness.MAYBE_LIVE) {\n             return state;\n           }\n         }\n+      }\n     }\n \n     return VariableLiveness.MAYBE_LIVE;\n"
            }
        ],
        "82": [
            {
                "modified_file": "src/com/google/javascript/rhino/jstype/JSType.java",
                "modified_lines": [
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 51f2ce2..32a0b25 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -160,9 +160,7 @@ public abstract class JSType implements Serializable {\n   }\n \n   public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n-        (registry.getNativeFunctionType(\n-             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n+    return isNoType() || isNoObjectType() || isNoResolvedType();\n   }\n \n   public boolean isNumberObjectType() {\n"
            }
        ],
        "103": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
                "modified_lines": [
                    891,
                    892,
                    893,
                    894,
                    895,
                    896,
                    897
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 6ef2548..3b67af3 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -891,7 +891,6 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n       case Token.ASSIGN:\n       case Token.INC:\n       case Token.DEC:\n-      case Token.INSTANCEOF:\n         return true;\n       case Token.FUNCTION:\n         return false;\n"
            },
            {
                "modified_file": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
                "modified_lines": [
                    760,
                    761,
                    762,
                    763,
                    764,
                    765,
                    766,
                    767,
                    768,
                    769,
                    770,
                    771,
                    772,
                    773,
                    774,
                    775
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex ca5edbd..4937879 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -760,16 +760,9 @@ class DisambiguateProperties<T> implements CompilerPass {\n       }\n       // If the property does not exist on the referenced type but the original\n       // type is an object type, see if any subtype has the property.\n-      if (foundType == null) {\n-        ObjectType maybeType = ObjectType.cast(\n-            registry.getGreatestSubtypeWithProperty(type, field));\n         // getGreatestSubtypeWithProperty does not guarantee that the property\n         // is defined on the returned type, it just indicates that it might be,\n         // so we have to double check.\n-        if (maybeType != null && maybeType.hasOwnProperty(field)) {\n-          foundType = maybeType;\n-        }\n-      }\n       return foundType;\n     }\n \n"
            }
        ],
        "37": [
            {
                "modified_file": "src/com/google/javascript/jscomp/NodeTraversal.java",
                "modified_lines": [
                    538,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/NodeTraversal.java b/src/com/google/javascript/jscomp/NodeTraversal.java\nindex 435b4a8..8201b41 100644\n--- a/src/com/google/javascript/jscomp/NodeTraversal.java\n+++ b/src/com/google/javascript/jscomp/NodeTraversal.java\n@@ -538,7 +538,7 @@ public class NodeTraversal {\n \n     // Body\n     Preconditions.checkState(body.getNext() == null &&\n-            body.isBlock(), body);\n+            body.isBlock());\n     traverseBranch(body, n);\n \n     popScope();\n"
            },
            {
                "modified_file": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
                "modified_lines": [
                    664,
                    665,
                    666,
                    667,
                    668,
                    669,
                    670,
                    671,
                    672,
                    673,
                    674,
                    675,
                    676
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 26cbc19..4da4085 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -664,13 +664,9 @@ class IRFactory {\n       node.addChildToBack(lp);\n \n       Node bodyNode = transform(functionNode.getBody());\n-      if (!bodyNode.isBlock()) {\n         // When in ideMode Rhino tries to parse some constructs the compiler\n         // doesn't support, repair it here. see Rhino's\n         // Parser#parseFunctionBodyExpr.\n-        Preconditions.checkState(config.isIdeMode);\n-        bodyNode = IR.block();\n-      }\n       parseDirectives(bodyNode);\n       node.addChildToBack(bodyNode);\n      return node;\n"
            }
        ],
        "123": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "modified_lines": [
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 8d268b6..54eb5cf 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -282,7 +282,7 @@ class CodeGenerator {\n       case Token.HOOK: {\n         Preconditions.checkState(childCount == 3);\n         int p = NodeUtil.precedence(type);\n-        Context rhsContext = getContextForNoInOperator(context);\n+        Context rhsContext = Context.OTHER;\n         addExpr(first, p + 1, context);\n         cc.addOp(\"?\", true);\n         addExpr(first.getNext(), 1, rhsContext);\n"
            }
        ],
        "120": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
                "modified_lines": [
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex 0af61d0..cdacc5f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,9 +428,6 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n-          if (ref.getSymbol().getScope() != ref.scope) {\n-            return false;\n-          }\n           break;\n         } else if (block.isLoop) {\n           return false;\n"
            }
        ],
        "56": [
            {
                "modified_file": "src/com/google/javascript/jscomp/SourceFile.java",
                "modified_lines": [
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java\nindex 22414f6..fc0cf3f 100644\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n@@ -239,11 +239,7 @@ public class SourceFile implements StaticSourceFile, Serializable {\n       // If next new line cannot be found, there are two cases\n       // 1. pos already reaches the end of file, then null should be returned\n       // 2. otherwise, return the contents between pos and the end of file.\n-      if (pos >= js.length()) {\n         return null;\n-      } else {\n-        return js.substring(pos, js.length());\n-      }\n     } else {\n       return js.substring(pos, js.indexOf('\\n', pos));\n     }\n"
            }
        ],
        "61": [
            {
                "modified_file": "src/com/google/javascript/jscomp/NodeUtil.java",
                "modified_lines": [
                    955,
                    956,
                    957,
                    958,
                    959,
                    960,
                    961,
                    962,
                    963,
                    964,
                    965,
                    966
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex f9ce42e..1844b18 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,12 +955,6 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n-      if (nameNode.getFirstChild().getType() == Token.NAME) {\n-        String namespaceName = nameNode.getFirstChild().getString();\n-        if (namespaceName.equals(\"Math\")) {\n-          return false;\n-        }\n-      }\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP\n"
            }
        ],
        "33": [
            {
                "modified_file": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
                "modified_lines": [
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    562
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex 81a7d89..b6e3fc7 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,9 +554,6 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n-    if (hasReferenceName()) {\n-      return;\n-    }\n \n     // Handle the case where the constraint object is a record type.\n     //\n"
            }
        ],
        "122": [
            {
                "modified_file": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
                "modified_lines": [
                    249,
                    250,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 936af02..709534b 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -249,8 +249,7 @@ class IRFactory {\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n   private void handleBlockComment(Comment comment) {\n-    Pattern p = Pattern.compile(\"(/|(\\n[ \\t]*))\\\\*[ \\t]*@[a-zA-Z]\");\n-    if (p.matcher(comment.getValue()).find()) {\n+    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n       errorReporter.warning(\n           SUSPICIOUS_COMMENT_WARNING,\n           sourceName,\n"
            }
        ],
        "21": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CheckSideEffects.java",
                "modified_lines": [
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..0d1e95a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,7 +98,7 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (n.isExprResult()) {\n       return;\n     }\n \n@@ -110,7 +110,24 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n+    if (parent.getType() == Token.COMMA) {\n+      if (isResultUsed) {\n+        return;\n+      }\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          else break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        return;\n+      }\n+    }\n+    if (\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n"
            }
        ],
        "48": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
                "modified_lines": [
                    1518,
                    1519,
                    1520,
                    1521,
                    1522,
                    1523,
                    1524,
                    1525,
                    1526,
                    1527,
                    1528,
                    1529,
                    1530,
                    1531
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 09aba12..3fb4813 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1518,14 +1518,11 @@ final class TypedScopeCreator implements ScopeCreator {\n             || FunctionTypeBuilder.isFunctionTypeDeclaration(info));\n       }\n \n-      if (inferred && rhsValue != null && rhsValue.isFunction()) {\n+      if (inferred) {\n         // Determining declaration for #2\n-        if (info != null) {\n-          inferred = false;\n-        } else if (!scope.isDeclared(qName, false) &&\n-                   n.isUnscopedQualifiedName()) {\n-          inferred = false;\n-        }\n+        inferred = !(rhsValue != null &&\n+            rhsValue.isFunction() &&\n+            (info != null || !scope.isDeclared(qName, false)));\n       }\n \n       if (!inferred) {\n"
            }
        ],
        "87": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
                "modified_lines": [
                    520,
                    521,
                    522,
                    523,
                    524,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    531,
                    532,
                    533,
                    534,
                    535,
                    536,
                    537,
                    538,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 6c4ee4a..9498fa6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,29 +520,17 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n           // IE has a bug where event handlers behave differently when\n           // their return value is used vs. when their return value is in\n           // an EXPR_RESULT. It's pretty freaking weird. See:\n           // http://code.google.com/p/closure-compiler/issues/detail?id=291\n           // We try to detect this case, and not fold EXPR_RESULTs\n           // into other expressions.\n-          if (maybeExpr.getFirstChild().getType() == Token.CALL) {\n-            Node calledFn = maybeExpr.getFirstChild().getFirstChild();\n \n             // We only have to worry about methods with an implicit 'this'\n             // param, or this doesn't happen.\n-            if (calledFn.getType() == Token.GETELEM) {\n-              return false;\n-            } else if (calledFn.getType() == Token.GETPROP &&\n-                       calledFn.getLastChild().getString().startsWith(\"on\")) {\n-              return false;\n-            }\n-          }\n \n-          return true;\n-        }\n-        return false;\n+          return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n \n"
            }
        ],
        "49": [
            {
                "modified_file": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
                "modified_lines": [
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\nindex 0fcb778..627271f 100644\n--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n@@ -88,6 +88,14 @@ class MakeDeclaredNamesUnique\n       renamer = nameStack.peek().forChildScope();\n     }\n \n+    if (declarationRoot.getType() == Token.FUNCTION) {\n+      for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {\n+        String name = c.getString();\n+        renamer.addDeclaredName(name);\n+      }\n+      Node functionBody = declarationRoot.getLastChild();\n+      findDeclaredNames(functionBody, null, renamer);\n+    }  else \n     if (declarationRoot.getType() != Token.FUNCTION) {\n       // Add the block declarations\n       findDeclaredNames(declarationRoot, null, renamer);\n@@ -119,22 +127,11 @@ class MakeDeclaredNamesUnique\n             renamer.addDeclaredName(name);\n           }\n \n-          nameStack.push(renamer);\n-        }\n-        break;\n \n-      case Token.LP: {\n-          Renamer renamer = nameStack.peek().forChildScope();\n \n           // Add the function parameters\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            String name = c.getString();\n-            renamer.addDeclaredName(name);\n-          }\n \n           // Add the function body declarations\n-          Node functionBody = n.getNext();\n-          findDeclaredNames(functionBody, null, renamer);\n \n           nameStack.push(renamer);\n         }\n@@ -173,16 +170,13 @@ class MakeDeclaredNamesUnique\n \n       case Token.FUNCTION:\n         // Remove the function body scope\n-        nameStack.pop();\n         // Remove function recursive name (if any).\n         nameStack.pop();\n         break;\n \n-      case Token.LP:\n         // Note: The parameters and function body variables live in the\n         // same scope, we introduce the scope when in the \"shouldTraverse\"\n         // visit of LP, but remove it when when we exit the function above.\n-        break;\n \n       case Token.CATCH:\n         // Remove catch except name from the stack of names.\n"
            }
        ],
        "97": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
                "modified_lines": [
                    695,
                    696,
                    697,
                    698,
                    699,
                    700,
                    701,
                    702
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex c998d1e..d6c194a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,8 +695,7 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          long lvalLong = lvalInt & 0xffffffffL;\n-          result = lvalLong >>> rvalInt;\n+          result = lvalInt >>> rvalInt;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +\n"
            }
        ],
        "100": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
                "modified_lines": [
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 1b6c93f..6390687 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -96,13 +96,6 @@ final class CheckGlobalThis implements Callback {\n       // var a = function() { }; // or\n       // function a() {} // or\n       // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -150,7 +143,7 @@ final class CheckGlobalThis implements Callback {\n     }\n \n     // Also report a THIS with a property access.\n-    return parent != null && NodeUtil.isGet(parent);\n+    return false;\n   }\n \n   /**\n"
            }
        ],
        "47": [
            {
                "modified_file": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
                "modified_lines": [
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493
                ],
                "text": "diff --git a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\nindex 5ee9108..d67dc10 100644\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n@@ -486,8 +486,8 @@ public class SourceMapConsumerV3 implements SourceMapConsumer,\n       // Adjust the line/column here to be start at 1.\n       Builder x = OriginalMapping.newBuilder()\n         .setOriginalFile(sources[entry.getSourceFileId()])\n-        .setLineNumber(entry.getSourceLine() + 1)\n-        .setColumnPosition(entry.getSourceColumn() + 1);\n+        .setLineNumber(entry.getSourceLine())\n+        .setColumnPosition(entry.getSourceColumn());\n       if (entry.getNameId() != UNMAPPED) {\n         x.setIdentifier(names[entry.getNameId()]);\n       }\n"
            },
            {
                "modified_file": "src/com/google/javascript/jscomp/SourceMap.java",
                "modified_lines": [
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/SourceMap.java b/src/com/google/javascript/jscomp/SourceMap.java\nindex 7192408..835dfa4 100644\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n@@ -135,15 +135,10 @@ public class SourceMap {\n     // zero based.\n     // We don't change this for the v1 or v2 source maps but for\n     // v3 we make them both 0 based.\n-    int lineBaseOffset = 1;\n-    if (generator instanceof SourceMapGeneratorV1\n-        || generator instanceof SourceMapGeneratorV2) {\n-      lineBaseOffset = 0;\n-    }\n \n     generator.addMapping(\n         sourceFile, originalName,\n-        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),\n+        new FilePosition(node.getLineno(), node.getCharno()),\n         outputStartPosition, outputEndPosition);\n   }\n \n"
            }
        ],
        "70": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
                "modified_lines": [
                    1742,
                    1743,
                    1744,
                    1745,
                    1746,
                    1747,
                    1748
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex aa7e245..210bb66 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1742,7 +1742,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), false);\n+                  jsDocParameter.getJSType(), true);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);\n"
            }
        ],
        "110": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ScopedAliases.java",
                "modified_lines": [
                    355,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    364,
                    365,
                    366,
                    367,
                    368,
                    369,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    382,
                    383,
                    384,
                    385,
                    386,
                    387,
                    388,
                    389,
                    390,
                    393,
                    394,
                    395,
                    396,
                    397,
                    398,
                    399,
                    400,
                    401,
                    402,
                    403,
                    404,
                    405,
                    406,
                    407,
                    408,
                    409,
                    410,
                    411,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    425,
                    426,
                    427,
                    428,
                    429
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex fbd46d3..7e9c8b8 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -355,7 +355,6 @@ class ScopedAliases implements HotSwapCompilerPass {\n         Node n = v.getNode();\n         Node parent = n.getParent();\n         boolean isVar = parent.isVar();\n-        boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);\n         if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n           recordAlias(v);\n         } else if (v.isBleedingFunction()) {\n@@ -364,13 +363,12 @@ class ScopedAliases implements HotSwapCompilerPass {\n         } else if (parent.getType() == Token.LP) {\n           // Parameters of the scope function also get a BAD_PARAMETERS\n           // error.\n-        } else if (isVar || isFunctionDecl) {\n-          boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);\n+        } else if (isVar) {\n           Node grandparent = parent.getParent();\n-          Node value = v.getInitialValue() != null ?\n-              v.getInitialValue() :\n+          Node value = n.hasChildren() ?\n+              v.getInitialValue().detachFromParent() :\n               null;\n-          Node varNode = null;\n+          Node varNode = parent;\n \n           String name = n.getString();\n           int nameCount = scopedAliasNames.count(name);\n@@ -382,9 +380,7 @@ class ScopedAliases implements HotSwapCompilerPass {\n \n           // First, we need to free up the function expression (EXPR)\n           // to be used in another expression.\n-          if (isFunctionDecl) {\n             // Replace \"function NAME() { ... }\" with \"var NAME;\".\n-            Node existingName = v.getNameNode();\n \n             // We can't keep the local name on the function expression,\n             // because IE is buggy and will leak the name into the global\n@@ -393,19 +389,9 @@ class ScopedAliases implements HotSwapCompilerPass {\n             //\n             // This will only cause problems if this is a hoisted, recursive\n             // function, and the programmer is using the hoisting.\n-            Node newName = IR.name(\"\").useSourceInfoFrom(existingName);\n-            value.replaceChild(existingName, newName);\n \n-            varNode = IR.var(existingName).useSourceInfoFrom(existingName);\n-            grandparent.replaceChild(parent, varNode);\n-          } else {\n-            if (value != null) {\n               // If this is a VAR, we can just detach the expression and\n               // the tree will still be valid.\n-              value.detachFromParent();\n-            }\n-            varNode = parent;\n-          }\n \n           // Add $jscomp.scope.name = EXPR;\n           // Make sure we copy over all the jsdoc and debug info.\n@@ -419,11 +405,7 @@ class ScopedAliases implements HotSwapCompilerPass {\n             NodeUtil.setDebugInformation(\n                 newDecl.getFirstChild().getFirstChild(), n, name);\n \n-            if (isHoisted) {\n-              grandparent.addChildToFront(newDecl);\n-            } else {\n               grandparent.addChildBefore(newDecl, varNode);\n-            }\n           }\n \n           // Rewrite \"var name = EXPR;\" to \"var name = $jscomp.scope.name;\"\n"
            },
            {
                "modified_file": "src/com/google/javascript/rhino/Node.java",
                "modified_lines": [
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/Node.java b/src/com/google/javascript/rhino/Node.java\nindex 6a3e9e0..b645632 100644\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n@@ -551,9 +551,6 @@ public class Node implements Cloneable, Serializable {\n       return null;\n     }\n     Node n = first;\n-    if (n == null) {\n-      throw new RuntimeException(\"node is not a child\");\n-    }\n \n     while (n.next != child) {\n       n = n.next;\n"
            }
        ],
        "58": [
            {
                "modified_file": "src/com/google/javascript/jscomp/LiveVariablesAnalysis.java",
                "modified_lines": [
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex e107faa..7999db4 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -203,12 +203,8 @@ class LiveVariablesAnalysis extends\n             // for(var x in y) {...}\n             lhs = lhs.getLastChild();\n           }\n-          if (NodeUtil.isName(lhs)) {\n             addToSetIfLocal(lhs, kill);\n             addToSetIfLocal(lhs, gen);\n-          } else {\n-            computeGenKill(lhs, gen, kill, conditional);\n-          }\n           computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n"
            }
        ],
        "30": [
            {
                "modified_file": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
                "modified_lines": [
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex 3f39c07..d53a8f8 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -154,7 +154,7 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n \n   @Override\n   public void process(Node externs, Node root) {\n-    (new NodeTraversal(compiler, this)).traverseRoots(externs, root);\n+    (new NodeTraversal(compiler, this)).traverse(root);\n   }\n \n   @Override\n"
            },
            {
                "modified_file": "src/com/google/javascript/jscomp/MustBeReachingVariableDef.java",
                "modified_lines": [
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    394,
                    395,
                    396,
                    397,
                    398,
                    399,
                    400,
                    401,
                    402,
                    403,
                    404,
                    405,
                    406,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    439,
                    440
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\nindex 589f673..1487af3 100644\n--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n@@ -68,7 +68,6 @@ final class MustBeReachingVariableDef extends\n   private static class Definition {\n     final Node node;\n     final Set<Var> depends = Sets.newHashSet();\n-    private boolean unknownDependencies = false;\n \n     Definition(Node node) {\n       this.node = node;\n@@ -394,13 +393,9 @@ final class MustBeReachingVariableDef extends\n         new AbstractCfgNodeTraversalCallback() {\n       @Override\n       public void visit(NodeTraversal t, Node n, Node parent) {\n-        if (n.isName()) {\n+        if (n.isName() && jsScope.isDeclared(n.getString(), true)) {\n           Var dep = jsScope.getVar(n.getString());\n-          if (dep == null) {\n-            def.unknownDependencies = true;\n-          } else {\n             def.depends.add(dep);\n-          }\n         }\n       }\n     });\n@@ -432,9 +427,6 @@ final class MustBeReachingVariableDef extends\n     GraphNode<Node, Branch> n = getCfg().getNode(useNode);\n     FlowState<MustDef> state = n.getAnnotation();\n     Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));\n-    if (def.unknownDependencies) {\n-      return true;\n-    }\n \n     for (Var s : def.depends) {\n       if (s.scope != jsScope) {\n"
            }
        ],
        "94": [
            {
                "modified_file": "src/com/google/javascript/jscomp/NodeUtil.java",
                "modified_lines": [
                    326,
                    327,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    355,
                    356,
                    357,
                    358
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 8c5d125..a31b17a 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -326,33 +326,14 @@ public final class NodeUtil {\n         return true;\n \n       // Binary operators are only valid if both children are valid.\n-      case Token.ADD:\n       case Token.BITAND:\n       case Token.BITNOT:\n       case Token.BITOR:\n       case Token.BITXOR:\n-      case Token.DIV:\n-      case Token.EQ:\n-      case Token.GE:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.LSH:\n-      case Token.LT:\n-      case Token.MOD:\n-      case Token.MUL:\n-      case Token.NE:\n-      case Token.RSH:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.SUB:\n-      case Token.URSH:\n-        return isValidDefineValue(val.getFirstChild(), defines)\n-            && isValidDefineValue(val.getLastChild(), defines);\n \n       // Uniary operators are valid if the child is valid.\n       case Token.NOT:\n       case Token.NEG:\n-      case Token.POS:\n         return isValidDefineValue(val.getFirstChild(), defines);\n \n       // Names are valid if and only if they are defines themselves.\n"
            }
        ],
        "99": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
                "modified_lines": [
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 5108686..25327af 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -89,7 +89,6 @@ final class CheckGlobalThis implements Callback {\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n@@ -123,17 +122,13 @@ final class CheckGlobalThis implements Callback {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n           if (lhs.getType() == Token.GETPROP &&\n               lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n             return false;\n           }\n-        }\n       }\n     }\n \n"
            }
        ],
        "88": [
            {
                "modified_file": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
                "modified_lines": [
                    324,
                    325,
                    326,
                    327,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    338
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex 879056f..ef33e4c 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -324,15 +324,9 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n         // The expression to which the assignment is made is evaluated before\n         // the RHS is evaluated (normal left to right evaluation) but the KILL\n         // occurs after the RHS is evaluated.\n-        Node rhs = n.getNext();\n-        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n-        if (state == VariableLiveness.READ) {\n-          return state;\n-        }\n         return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n"
            }
        ],
        "34": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "modified_lines": [
                    119,
                    120,
                    121,
                    122,
                    123,
                    124,
                    125,
                    749,
                    750,
                    751,
                    752,
                    753,
                    754,
                    755
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex d50320a..f28378c 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -119,7 +119,9 @@ class CodeGenerator {\n         cc.addOp(opstr, true);\n         addExpr(last, p, rhsContext);\n       } else {\n-        unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);\n+        addExpr(first, p, context);\n+        cc.addOp(opstr, true);\n+        addExpr(last, p + 1, rhsContext);\n       }\n       return;\n     }\n@@ -749,7 +751,7 @@ class CodeGenerator {\n     Node current = firstNonOperator;\n     do {\n       current = current.getParent();\n-      cc.addOp(opStr, true);\n+      cc.listSeparator();\n       addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);\n     } while (current != n);\n   }\n"
            },
            {
                "modified_file": "src/com/google/javascript/jscomp/CodePrinter.java",
                "modified_lines": [
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodePrinter.java b/src/com/google/javascript/jscomp/CodePrinter.java\nindex 31c62d9..52dfa9b 100644\n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n@@ -331,7 +331,7 @@ class CodePrinter {\n     @Override\n     void appendOp(String op, boolean binOp) {\n       if (binOp) {\n-        if (getLastChar() != ' ' && op.charAt(0) != ',') {\n+        if (getLastChar() != ' ') {\n           append(\" \");\n         }\n         append(op);\n"
            }
        ],
        "106": [
            {
                "modified_file": "src/com/google/javascript/jscomp/GlobalNamespace.java",
                "modified_lines": [
                    904,
                    905,
                    906,
                    907,
                    908,
                    909,
                    910,
                    911,
                    912,
                    913
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 47ea27a..d7e85df 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -904,10 +904,6 @@ class GlobalNamespace {\n       // Don't try to collapse if the one global set is a twin reference.\n       // We could theoretically handle this case in CollapseProperties, but\n       // it's probably not worth the effort.\n-      Preconditions.checkNotNull(declaration);\n-      if (declaration.getTwin() != null) {\n-        return false;\n-      }\n \n       if (isClassOrEnum) {\n         return true;\n"
            },
            {
                "modified_file": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
                "modified_lines": [
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/JSDocInfoBuilder.java b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\nindex bdfc2e8..1311638 100644\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n@@ -186,7 +186,9 @@ final public class JSDocInfoBuilder {\n    * @return {@code true} if the description was recorded.\n    */\n   public boolean recordBlockDescription(String description) {\n+    if (parseDocumentation) {\n     populated = true;\n+    }\n     return currentInfo.documentBlock(description);\n   }\n \n"
            }
        ],
        "73": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "modified_lines": [
                    1042,
                    1043,
                    1044,
                    1045,
                    1046,
                    1047,
                    1048
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 823d897..558e74f 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,7 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c < 0x7f) {\n+            if (c > 0x1f && c <= 0x7f) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,\n"
            }
        ],
        "102": [
            {
                "modified_file": "src/com/google/javascript/jscomp/Normalize.java",
                "modified_lines": [
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 1db94e2..4aa4555 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -86,12 +86,12 @@ class Normalize implements CompilerPass, Callback {\n   @Override\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n-    removeDuplicateDeclarations(root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n       t.traverseRoots(externs, root);\n     }\n+    removeDuplicateDeclarations(root);\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n   }\n"
            }
        ],
        "42": [
            {
                "modified_file": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
                "modified_lines": [
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    574,
                    575,
                    576,
                    577,
                    578,
                    579
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex c6b70c5..1a95aa2 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -565,15 +565,8 @@ class IRFactory {\n \n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n-      if (loopNode.isForEach()) {\n-        errorReporter.error(\n-            \"unsupported language extension: for each\",\n-            sourceName,\n-            loopNode.getLineno(), \"\", 0);\n \n         // Return the bare minimum to put the AST in a valid state.\n-        return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n-      }\n       return newNode(\n           Token.FOR,\n           transform(loopNode.getIterator()),\n"
            }
        ],
        "39": [
            {
                "modified_file": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
                "modified_lines": [
                    377,
                    378,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384,
                    385,
                    386,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex f4b537d..dffe3a5 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -377,10 +377,10 @@ class PrototypeObjectType extends ObjectType {\n \n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toStringHelper(forAnnotations));\n+        sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n           break;\n         }\n@@ -391,7 +391,7 @@ class PrototypeObjectType extends ObjectType {\n       prettyPrint = true;\n       return sb.toString();\n     } else {\n-      return forAnnotations ? \"?\" : \"{...}\";\n+      return \"{...}\";\n     }\n   }\n \n"
            }
        ],
        "98": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
                "modified_lines": [
                    358,
                    359,
                    360,
                    361,
                    362,
                    363,
                    364,
                    365,
                    366,
                    367,
                    368,
                    369,
                    370,
                    371,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555,
                    556,
                    557,
                    558,
                    559,
                    560,
                    561,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    574,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    581,
                    582,
                    583
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex da4ed3e..f053321 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -358,14 +358,6 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {\n       }\n \n       // Make sure this assignment is not in a loop.\n-      for (BasicBlock block = ref.getBasicBlock();\n-           block != null; block = block.getParent()) {\n-        if (block.isFunction) {\n-          break;\n-        } else if (block.isLoop) {\n-          return false;\n-        }\n-      }\n \n       return true;\n     }\n@@ -550,12 +542,10 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {\n     /**\n      * Whether this block denotes a function scope.\n      */\n-    private final boolean isFunction;\n \n     /**\n      * Whether this block denotes a loop.\n      */\n-    private final boolean isLoop;\n \n     /**\n      * Creates a new block.\n@@ -568,16 +558,7 @@ class ReferenceCollectingCallback implements ScopedCallback, CompilerPass {\n       // only named functions may be hoisted.\n       this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);\n \n-      this.isFunction = root.getType() == Token.FUNCTION;\n \n-      if (root.getParent() != null) {\n-        int pType = root.getParent().getType();\n-        this.isLoop = pType == Token.DO ||\n-            pType == Token.WHILE ||\n-            pType == Token.FOR;\n-      } else {\n-        this.isLoop = false;\n-      }\n     }\n \n     BasicBlock getParent() {\n"
            }
        ],
        "22": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CheckSideEffects.java",
                "modified_lines": [
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 722d225..b9aa412 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -98,20 +98,44 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n     // Do not try to remove a block or an expr result. We already handle\n     // these cases when we visit the child, and the peephole passes will\n     // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult() || n.isBlock()) {\n+    if (parent.getType() == Token.COMMA) {\n+      Node gramps = parent.getParent();\n+      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n+        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n       return;\n+        }\n     }\n \n     // This no-op statement was there so that JSDoc information could\n     // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+      if (n == parent.getLastChild()) {\n+        for (Node an : parent.getAncestors()) {\n+          int ancestorType = an.getType();\n+          if (ancestorType == Token.COMMA)\n+            continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n+            return;\n+          else\n+            break;\n+        }\n+      }\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n+           n == parent.getFirstChild().getNext().getNext())) {\n+      } else {\n       return;\n+      }\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n     if (!isResultUsed &&\n         (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+        return;\n+      } else if (n.isExprResult()) {\n+        return;\n+      }\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n"
            }
        ],
        "69": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeCheck.java",
                "modified_lines": [
                    1577,
                    1578,
                    1579,
                    1580,
                    1581,
                    1582,
                    1583,
                    1584,
                    1585,
                    1586,
                    1587,
                    1588,
                    1589
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 5edb4f0..f58418c 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,13 +1577,6 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n-      if (functionType.isOrdinaryFunction() &&\n-          !functionType.getTypeOfThis().isUnknownType() &&\n-          !functionType.getTypeOfThis().isNativeObjectType() &&\n-          !(child.getType() == Token.GETELEM ||\n-            child.getType() == Token.GETPROP)) {\n-        report(t, n, EXPECTED_THIS_TYPE, functionType.toString());\n-      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n"
            }
        ],
        "54": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
                "modified_lines": [
                    1410,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1416,
                    1417,
                    1418,
                    1419,
                    1420,
                    1421,
                    1422
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 5bccc06..8654ae6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1410,13 +1410,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           // then they are responsible for making sure that the object literal's\n           // implicit prototype is set up appropriately. We just obey\n           // the @extends tag.\n-          ObjectType qVarType = ObjectType.cast(qVar.getType());\n-          if (qVarType != null &&\n-              rhsValue != null &&\n-              rhsValue.getType() == Token.OBJECTLIT) {\n-            typeRegistry.resetImplicitPrototype(\n-                rhsValue.getJSType(), qVarType.getImplicitPrototype());\n-          } else if (!qVar.isTypeInferred()) {\n+          if (!qVar.isTypeInferred()) {\n             // If the programmer has declared that F inherits from Super,\n             // and they assign F.prototype to some arbitrary expression,\n             // there's not much we can do. We just ignore the expression,\n"
            },
            {
                "modified_file": "src/com/google/javascript/rhino/jstype/FunctionType.java",
                "modified_lines": [
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    362,
                    363,
                    364,
                    365,
                    366,
                    367,
                    368,
                    369,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    378,
                    379
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex a87be07..b65d8b1 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -338,6 +338,7 @@ public class FunctionType extends PrototypeObjectType {\n     //\n     // In the second case, we just use the anonymous object as the prototype.\n     if (baseType.hasReferenceName() ||\n+        baseType.isUnknownType() ||\n         isNativeObjectType() ||\n         baseType.isFunctionPrototypeType() ||\n         !(baseType instanceof PrototypeObjectType)) {\n@@ -362,18 +363,14 @@ public class FunctionType extends PrototypeObjectType {\n       return false;\n     }\n \n-    PrototypeObjectType oldPrototype = this.prototype;\n-    boolean replacedPrototype = oldPrototype != null;\n+    boolean replacedPrototype = prototype != null;\n \n     this.prototype = prototype;\n     this.prototypeSlot = new SimpleSlot(\"prototype\", prototype, true);\n     this.prototype.setOwnerFunction(this);\n \n-    if (oldPrototype != null) {\n       // Disassociating the old prototype makes this easier to debug--\n       // we don't have to worry about two prototypes running around.\n-      oldPrototype.setOwnerFunction(null);\n-    }\n \n     if (isConstructor() || isInterface()) {\n       FunctionType superClass = getSuperClassConstructor();\n"
            }
        ],
        "23": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
                "modified_lines": [
                    1448,
                    1449,
                    1450,
                    1451,
                    1452,
                    1453,
                    1454,
                    1455,
                    1456,
                    1457,
                    1458,
                    1459,
                    1460,
                    1461
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 7a0313c..f777b1c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1448,14 +1448,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null; i++) {\n-      if (i != intIndex) {\n-        if (mayHaveSideEffects(current)) {\n-          return n;\n-        }\n-      } else {\n+    for (int i = 0; current != null && i < intIndex; i++) {\n         elem = current;\n-      }\n \n       current = current.getNext();\n     }\n"
            }
        ],
        "81": [
            {
                "modified_file": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
                "modified_lines": [
                    514,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    523,
                    524,
                    525,
                    526
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 07761aa..4a733cd 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,13 +514,6 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n-        int functionType = functionNode.getFunctionType();\n-        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n-          errorReporter.error(\n-            \"unnamed function statement\",\n-            sourceName,\n-            functionNode.getLineno(), \"\", 0);\n-        }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;\n"
            }
        ],
        "35": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeInference.java",
                "modified_lines": [
                    1118,
                    1119,
                    1120,
                    1121,
                    1122,
                    1123,
                    1124,
                    1125
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex fb6be1e..13e1092 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,8 +1118,21 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null) {\n-      type.matchConstraint(constraintObj);\n+    if (constraintObj != null && constraintObj.isRecordType()) {\n+      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      if (objType != null) {\n+        for (String prop : constraintObj.getOwnPropertyNames()) {\n+          JSType propType = constraintObj.getPropertyType(prop);\n+          if (!objType.isPropertyTypeDeclared(prop)) {\n+            JSType typeToInfer = propType;\n+            if (!objType.hasProperty(prop)) {\n+              typeToInfer =\n+                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+            }\n+            objType.defineInferredProperty(prop, typeToInfer, null);\n+          }\n+        }\n+      }\n     }\n   }\n \n"
            }
        ],
        "8": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
                "modified_lines": [
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java b/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\nindex e0466ea..f2d36f5 100644\n--- a/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\n+++ b/src/com/google/javascript/jscomp/CollapseVariableDeclarations.java\n@@ -201,14 +201,10 @@ class CollapseVariableDeclarations implements CompilerPass {\n       Var var = s.getVar(lhs.getString());\n       return var != null\n           && var.getScope() == s\n-          && !isNamedParameter(var)\n           && !blacklistedVars.contains(var);\n     }\n   }\n \n-  private boolean isNamedParameter(Var v) {\n-    return v.getParentNode().isParamList();\n-  }\n \n   private void applyCollapses() {\n     for (Collapse collapse : collapses) {\n"
            }
        ],
        "18": [
            {
                "modified_file": "src/com/google/javascript/jscomp/Compiler.java",
                "modified_lines": [
                    1285,
                    1286,
                    1287,
                    1288,
                    1289,
                    1290,
                    1291
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 3756b99..8898f77 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,7 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement()) {\n+      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.\n"
            }
        ],
        "96": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeCheck.java",
                "modified_lines": [
                    1406,
                    1407,
                    1408,
                    1409,
                    1410,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1416,
                    1417,
                    1418
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex b05fbc4..8077e0d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1406,13 +1406,10 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Node parameter = null;\n     Node argument = null;\n     while (arguments.hasNext() &&\n-           (parameters.hasNext() ||\n-            parameter != null && parameter.isVarArgs())) {\n+           parameters.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n-      if (parameters.hasNext()) {\n         parameter = parameters.next();\n-      }\n       argument = arguments.next();\n       ordinal++;\n \n"
            }
        ],
        "50": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
                "modified_lines": [
                    373,
                    374,
                    375,
                    376,
                    377,
                    378,
                    379,
                    386,
                    387,
                    388,
                    389,
                    390,
                    391,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex afaf85a..ffe47d3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -373,7 +373,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n \n     Node right = callTarget.getNext();\n     if (right != null) {\n-      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {\n+      if (!NodeUtil.isImmutableValue(right)) {\n         return n;\n       }\n     }\n@@ -386,12 +386,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-    if (right != null && right.getType() == Token.STRING\n-        && \",\".equals(right.getString())) {\n       // \",\" is the default, it doesn't need to be explicit\n-      n.removeChild(right);\n-      reportCodeChange();\n-    }\n \n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n"
            }
        ],
        "25": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeInference.java",
                "modified_lines": [
                    1033,
                    1034,
                    1035,
                    1036,
                    1037,
                    1038,
                    1039,
                    1040,
                    1041,
                    1052,
                    1053,
                    1054,
                    1055,
                    1056,
                    1057,
                    1058,
                    1059,
                    1060,
                    1061,
                    1062
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 74728ee..7e218d8 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,9 +1033,9 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-    scope = traverseChildren(n, scope);\n \n     Node constructor = n.getFirstChild();\n+    scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n@@ -1052,11 +1052,13 @@ class TypeInference\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n-          backwardsInferenceFromCallSite(n, ct);\n         }\n       }\n     }\n     n.setJSType(type);\n+    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+      scope = traverse(arg, scope);\n+    }\n     return scope;\n   }\n \n"
            }
        ],
        "4": [
            {
                "modified_file": "src/com/google/javascript/rhino/jstype/NamedType.java",
                "modified_lines": [
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 06988ab..70142c4 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -187,7 +187,7 @@ class NamedType extends ProxyObjectType {\n     // makes more sense. Now, resolution via registry is first in order to\n     // avoid triggering the warnings built into the resolution via properties.\n     boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectInheritanceCycle()) {\n+    if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n@@ -199,7 +199,7 @@ class NamedType extends ProxyObjectType {\n     }\n \n     resolveViaProperties(t, enclosing);\n-    if (detectInheritanceCycle()) {\n+    if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n \n"
            }
        ],
        "52": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "modified_lines": [
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 535148c..ac6299d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -742,7 +742,7 @@ class CodeGenerator {\n         return false;\n       }\n     }\n-    return len > 0 && s.charAt(0) != '0';\n+    return len > 0;\n   }\n \n   static double getSimpleNumber(String s) {\n"
            }
        ],
        "11": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeCheck.java",
                "modified_lines": [
                    1311,
                    1312,
                    1313,
                    1314,
                    1315,
                    1316
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex e428dfa..ae8a320 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1311,6 +1311,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n+    } else if (n.getJSType() != null && parent.isAssign()) {\n+      return;\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n       checkPropertyAccess(childType, property.getString(), t, n);\n"
            }
        ],
        "26": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
                "modified_lines": [
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234,
                    235
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\nindex fa01cd9..1744a58 100644\n--- a/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\n+++ b/src/com/google/javascript/jscomp/ProcessCommonJSModules.java\n@@ -125,7 +125,6 @@ public class ProcessCommonJSModules implements CompilerPass {\n       AbstractPostOrderCallback {\n \n     private int scriptNodeCount = 0;\n-    private Set<String> modulesWithExports = Sets.newHashSet();\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n@@ -205,9 +204,6 @@ public class ProcessCommonJSModules implements CompilerPass {\n      */\n     private void emitOptionalModuleExportsOverride(Node script,\n         String moduleName) {\n-      if (!modulesWithExports.contains(moduleName)) {\n-        return;\n-      }\n \n       Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n           IR.string(\"module$exports\"));\n@@ -229,7 +225,6 @@ public class ProcessCommonJSModules implements CompilerPass {\n       Node exports = prop.getChildAtIndex(1);\n       exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");\n       exports.setString(\"module$exports\");\n-      modulesWithExports.add(moduleName);\n     }\n \n     /**\n"
            }
        ],
        "53": [
            {
                "modified_file": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
                "modified_lines": [
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    350,
                    351,
                    352,
                    353,
                    354,
                    355,
                    356
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex d92b16c..9061925 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -328,9 +328,6 @@ class InlineObjectLiterals implements CompilerPass {\n       }\n \n       Node replacement;\n-      if (nodes.isEmpty()) {\n-        replacement = new Node(Token.TRUE);\n-      } else {\n         // All assignments evaluate to true, so make sure that the\n         // expr statement evaluates to true in case it matters.\n         nodes.add(new Node(Token.TRUE));\n@@ -350,7 +347,6 @@ class InlineObjectLiterals implements CompilerPass {\n         }\n         cur.addChildToFront(nodes.get(i));\n         cur.addChildToFront(nodes.get(i + 1));\n-      }\n \n       Node replace = ref.getParent();\n       replacement.copyInformationFromForTree(replace);\n"
            }
        ],
        "29": [
            {
                "modified_file": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
                "modified_lines": [
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    222,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 8c3159d..9f5c607 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -154,7 +154,6 @@ class InlineObjectLiterals implements CompilerPass {\n      */\n     private boolean isInlinableObject(List<Reference> refs) {\n       boolean ret = false;\n-      Set<String> validProperties = Sets.newHashSet();\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n@@ -179,14 +178,6 @@ class InlineObjectLiterals implements CompilerPass {\n           // We short-circuit this problem by bailing out if we see a reference\n           // to a property that isn't defined on the object literal. This\n           // isn't a perfect algorithm, but it should catch most cases.\n-          String propName = parent.getLastChild().getString();\n-          if (!validProperties.contains(propName)) {\n-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n-              validProperties.add(propName);\n-            } else {\n-              return false;\n-            }\n-          }\n           continue;\n         }\n \n@@ -222,7 +213,6 @@ class InlineObjectLiterals implements CompilerPass {\n             return false;\n           }\n \n-          validProperties.add(child.getString());\n \n           Node childVal = child.getFirstChild();\n           // Check if childVal is the parent of any of the passed in\n"
            }
        ],
        "125": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeCheck.java",
                "modified_lines": [
                    1658,
                    1659,
                    1660,
                    1661,
                    1662,
                    1663,
                    1664
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex de14c04..4e05325 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null && fnType.hasInstanceType()) {\n+      if (fnType != null) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {\n"
            }
        ],
        "36": [
            {
                "modified_file": "src/com/google/javascript/jscomp/InlineVariables.java",
                "modified_lines": [
                    572,
                    573,
                    574,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 47b8e8a..0b4b3de 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,9 +572,6 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n-          if (convention.getSingletonGetterClassName(callNode) != null) {\n-            return false;\n-          }\n         }\n       }\n \n"
            }
        ],
        "119": [
            {
                "modified_file": "src/com/google/javascript/jscomp/GlobalNamespace.java",
                "modified_lines": [
                    363,
                    364,
                    365,
                    366,
                    367,
                    368,
                    369
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 0e9c4d3..639318d 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,7 +363,6 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n-              case Token.CATCH:\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n"
            }
        ],
        "118": [
            {
                "modified_file": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
                "modified_lines": [
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex 01293c9..b34921e 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,9 +492,6 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n-        if (child.isQuotedString()) {\n-          continue;\n-        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n"
            }
        ],
        "128": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "modified_lines": [
                    782,
                    783,
                    784,
                    785,
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794,
                    795,
                    796,
                    797
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 1dc33b7..2270c17 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -782,16 +782,13 @@ class CodeGenerator {\n \n   static boolean isSimpleNumber(String s) {\n     int len = s.length();\n-    if (len == 0) {\n-      return false;\n-    }\n     for (int index = 0; index < len; index++) {\n       char c = s.charAt(index);\n       if (c < '0' || c > '9') {\n         return false;\n       }\n     }\n-    return len == 1 || s.charAt(0) != '0';\n+    return len > 0 && s.charAt(0) != '0';\n   }\n \n   static double getSimpleNumber(String s) {\n"
            }
        ],
        "112": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeInference.java",
                "modified_lines": [
                    1189,
                    1190,
                    1191,
                    1192,
                    1193,
                    1194,
                    1195,
                    1196,
                    1197,
                    1198,
                    1199,
                    1200,
                    1201,
                    1202,
                    1203
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 4b30d57..4c24e2f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1189,15 +1189,9 @@ class TypeInference\n     }\n \n     // Try to infer the template types\n-    Map<TemplateType, JSType> inferred = Maps.filterKeys(\n-        inferTemplateTypesFromParameters(fnType, n),\n-        new Predicate<TemplateType>() {\n-\n-          @Override\n-          public boolean apply(TemplateType key) {\n-            return keys.contains(key);\n-          }}\n-        );\n+    Map<TemplateType, JSType> inferred = \n+        inferTemplateTypesFromParameters(fnType, n);\n+\n \n     // Replace all template types. If we couldn't find a replacement, we\n     // replace it with UNKNOWN.\n"
            }
        ],
        "67": [
            {
                "modified_file": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
                "modified_lines": [
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 4472638..30b19e0 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,7 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          && assign.getParent().getType() == Token.EXPR_RESULT) {\n+          ) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n"
            }
        ],
        "12": [
            {
                "modified_file": "src/com/google/javascript/jscomp/MaybeReachingVariableUse.java",
                "modified_lines": [
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex 8361ac9..add5c66 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,12 +157,6 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n-    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n-    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n-      if (edge.getValue() == Branch.ON_EX) {\n-        return true;\n-      }\n-    }\n     return false;\n   }\n \n"
            }
        ],
        "117": [
            {
                "modified_file": "src/com/google/javascript/jscomp/TypeValidator.java",
                "modified_lines": [
                    722,
                    723,
                    724,
                    725,
                    726,
                    727,
                    728,
                    729,
                    730,
                    731,
                    732,
                    733,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    765,
                    766,
                    767,
                    768,
                    769,
                    770
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex f57ae14..bcd024a 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -722,20 +722,8 @@ class TypeValidator {\n    *     to an Object type, if possible.\n    */\n   String getReadableJSTypeName(Node n, boolean dereference) {\n-    JSType type = getJSType(n);\n-    if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n-    }\n \n     // The best type name is the actual type name.\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n-    }\n \n     // If we're analyzing a GETPROP, the property may be inherited by the\n     // prototype chain. So climb the prototype chain and find out where\n@@ -765,6 +753,18 @@ class TypeValidator {\n       }\n     }\n \n+    JSType type = getJSType(n);\n+    if (dereference) {\n+      ObjectType dereferenced = type.dereference();\n+      if (dereferenced != null) {\n+        type = dereferenced;\n+      }\n+    }\n+    if (type.isFunctionPrototypeType() ||\n+        (type.toObjectType() != null &&\n+         type.toObjectType().getConstructor() != null)) {\n+      return type.toString();\n+    }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;\n"
            }
        ],
        "129": [
            {
                "modified_file": "src/com/google/javascript/jscomp/PrepareAst.java",
                "modified_lines": [
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex 42982af..d993bee 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,9 +163,6 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n-      while (first.isCast()) {\n-        first = first.getFirstChild();\n-      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n"
            }
        ],
        "65": [
            {
                "modified_file": "src/com/google/javascript/jscomp/CodeGenerator.java",
                "modified_lines": [
                    1012,
                    1013,
                    1014,
                    1015,
                    1016,
                    1017,
                    1018
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex cb9229a..6117a89 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1012,7 +1012,7 @@ class CodeGenerator {\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n-        case '\\0': sb.append(\"\\\\000\"); break;\n+        case '\\0': sb.append(\"\\\\0\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n"
            }
        ],
        "105": [
            {
                "modified_file": "src/com/google/javascript/jscomp/FoldConstants.java",
                "modified_lines": [
                    1474,
                    1475,
                    1476,
                    1477,
                    1478,
                    1479,
                    1480,
                    1481,
                    1482,
                    1483,
                    1484,
                    1485,
                    1486,
                    1487,
                    1488,
                    1489,
                    1490,
                    1491,
                    1492,
                    1493,
                    1494,
                    1495,
                    1496,
                    1497,
                    1499,
                    1500,
                    1501,
                    1502,
                    1503,
                    1504,
                    1505
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex 657ee0a..f6d6a27 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1474,24 +1474,22 @@ class FoldConstants extends AbstractPostOrderCallback\n \n     String joinString = NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n+    StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n+        if (sb.length() > 0) {\n           sb.append(joinString);\n         }\n         sb.append(NodeUtil.getStringValue(elem));\n       } else {\n-        if (sb != null) {\n+        if (sb.length() > 0) {\n           // + 2 for the quotes.\n           foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = null;\n+          sb = new StringBuilder();\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n@@ -1499,7 +1497,7 @@ class FoldConstants extends AbstractPostOrderCallback\n       elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n+    if (sb.length() > 0) {\n       // + 2 for the quotes.\n       foldedSize += sb.length() + 2;\n       arrayFoldedChildren.add(Node.newString(sb.toString()));\n"
            }
        ],
        "109": [
            {
                "modified_file": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
                "modified_lines": [
                    1905,
                    1906,
                    1907,
                    1908,
                    1909,
                    1910,
                    1911,
                    1912,
                    1913,
                    1914,
                    1915
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex c115e10..e30c350 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,11 +1905,7 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-    if (token == JsDocToken.QMARK) {\n-      return newNode(Token.QMARK);\n-    } else {\n-      return parseBasicTypeExpression(token);\n-    }\n+          return parseTypeName(token);\n   }\n \n   /**\n"
            }
        ],
        "10": [
            {
                "modified_file": "src/com/google/javascript/jscomp/NodeUtil.java",
                "modified_lines": [
                    1414,
                    1415,
                    1416,
                    1417,
                    1418,
                    1419,
                    1420
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eeb12d4..eef2792 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1414,7 +1414,7 @@ public final class NodeUtil {\n \n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n"
            }
        ],
        "124": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ExploitAssigns.java",
                "modified_lines": [
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 1639f2c..0f03e35 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -210,9 +210,7 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n     }\n     Preconditions.checkArgument(node.isGetProp());\n \n-    while (node.isGetProp()) {\n       node = node.getFirstChild();\n-    }\n     if (node.isName()\n         && isNameAssignedTo(node.getString(), replacement)) {\n       return false;\n"
            }
        ],
        "40": [
            {
                "modified_file": "src/com/google/javascript/jscomp/NameAnalyzer.java",
                "modified_lines": [
                    632,
                    633,
                    634,
                    635,
                    636,
                    637,
                    638,
                    639,
                    640
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 6e9e470..088a993 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -632,9 +632,11 @@ final class NameAnalyzer implements CompilerPass {\n         Node nameNode = n.getFirstChild();\n         NameInformation ns = createNameInformation(t, nameNode, n);\n         if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, true);\n+          JsName name = getName(ns.name, false);\n+          if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n+          }\n         }\n       }\n     }\n"
            }
        ],
        "32": [
            {
                "modified_file": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
                "modified_lines": [
                    1355,
                    1356,
                    1357,
                    1358,
                    1359,
                    1360,
                    1361,
                    1362,
                    1363,
                    1364,
                    1365,
                    1366,
                    1367,
                    1368,
                    1381,
                    1382,
                    1383,
                    1384,
                    1385,
                    1386,
                    1387,
                    1389,
                    1390,
                    1391,
                    1392,
                    1393,
                    1394,
                    1395,
                    1396,
                    1397,
                    1398,
                    1399,
                    1400,
                    1401,
                    1402,
                    1403,
                    1404,
                    1405,
                    1406,
                    1407,
                    1426,
                    1427,
                    1428,
                    1429,
                    1430,
                    1431
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex cfdccbe..f6a6400 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1355,14 +1355,12 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n-    int lineStartChar = -1;\n \n     do {\n       switch (token) {\n         case STAR:\n           if (ignoreStar) {\n             // Mark the position after the star as the new start of the line.\n-            lineStartChar = stream.getCharno() + 1;\n           } else {\n             // The star is part of the comment.\n             if (builder.length() > 0) {\n@@ -1381,7 +1379,6 @@ public final class JsDocInfoParser {\n           }\n \n           ignoreStar = true;\n-          lineStartChar = 0;\n           token = next();\n           continue;\n \n@@ -1389,19 +1386,7 @@ public final class JsDocInfoParser {\n           ignoreStar = false;\n           state = State.SEARCHING_ANNOTATION;\n \n-          boolean isEOC = token == JsDocToken.EOC;\n-          if (!isEOC) {\n-            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n-              int numSpaces = stream.getCharno() - lineStartChar;\n-              for (int i = 0; i < numSpaces; i++) {\n-                builder.append(' ');\n-              }\n-              lineStartChar = -1;\n-            } else if (builder.length() > 0) {\n               // All tokens must be separated by a space.\n-              builder.append(' ');\n-            }\n-          }\n \n           if (token == JsDocToken.EOC ||\n               token == JsDocToken.EOF ||\n@@ -1426,6 +1411,9 @@ public final class JsDocInfoParser {\n             return new ExtractionInfo(multilineText, token);\n           }\n \n+          if (builder.length() > 0) {\n+            builder.append(' ');\n+          }\n           builder.append(toString(token));\n \n           line = stream.getRemainingJSDocLine();\n"
            }
        ],
        "14": [
            {
                "modified_file": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
                "modified_lines": [
                    764,
                    765,
                    766,
                    767,
                    768,
                    769,
                    770
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 980deff..5c6927f 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,7 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n+              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n"
            }
        ],
        "60": [
            {
                "modified_file": "src/com/google/javascript/jscomp/NodeUtil.java",
                "modified_lines": [
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 43a296f..7f20c2e 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -105,8 +105,6 @@ public final class NodeUtil {\n         // ignoring side-effects\n         return TernaryValue.TRUE;\n \n-      case Token.VOID:\n-        return TernaryValue.FALSE;\n \n       default:\n         return getPureBooleanValue(n);\n@@ -135,10 +133,7 @@ public final class NodeUtil {\n         return TernaryValue.FALSE;\n \n       case Token.VOID:\n-        if (!mayHaveSideEffects(n.getFirstChild())) {\n           return TernaryValue.FALSE;\n-        }\n-        break;\n \n       case Token.NAME:\n         String name = n.getString();\n"
            }
        ],
        "121": [
            {
                "modified_file": "src/com/google/javascript/jscomp/InlineVariables.java",
                "modified_lines": [
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 5c9df61..376abd4 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -301,12 +301,10 @@ class InlineVariables implements CompilerPass {\n       if (!maybeModifiedArguments &&\n           !staleVars.contains(v) &&\n           referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime() &&\n+          referenceInfo.isAssignedOnceInLifetime()) {\n           // Inlining the variable based solely on well-defined and assigned\n           // once is *NOT* correct. We relax the correctness requirement if\n           // the variable is declared constant.\n-          (isInlineableDeclaredConstant(v, referenceInfo) ||\n-           referenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {\n         List<Reference> refs = referenceInfo.references;\n         for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n           Node nameNode = refs.get(i).getNode();\n"
            }
        ],
        "127": [
            {
                "modified_file": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
                "modified_lines": [
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\nindex e6d88a8..d819874 100644\n--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n@@ -167,22 +167,13 @@ class UnreachableCodeElimination implements CompilerPass {\n                 outEdges.get(0).getValue() == Branch.UNCOND);\n             Node fallThrough = computeFollowing(n);\n             Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n-            if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {\n+            if (nextCfgNode == fallThrough) {\n               removeNode(n);\n             }\n           }\n       }\n     }\n \n-    private boolean inFinally(Node parent, Node child) {\n-      if (parent == null || parent.isFunction()) {\n-        return false;\n-      } else if (NodeUtil.isTryFinallyNode(parent, child)) {\n-        return true;\n-      } else {\n-        return inFinally(parent.getParent(), parent);\n-      }\n-    }\n \n     private Node computeFollowing(Node n) {\n       Node next = ControlFlowAnalysis.computeFollowNode(n);\n"
            }
        ],
        "104": [
            {
                "modified_file": "src/com/google/javascript/rhino/jstype/UnionType.java",
                "modified_lines": [
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex 6f0d798..a9c9a0a 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,7 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (!result.isNoType()) {\n+    if (result != null) {\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n"
            }
        ],
        "1": [
            {
                "modified_file": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
                "modified_lines": [
                    376,
                    377,
                    378,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384
                ],
                "text": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex 4c84735..dfad51b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,9 +376,6 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-    if (!removeGlobals) {\n-      return;\n-    }\n \n     Node function = fnScope.getRootNode();\n \n"
            }
        ],
        "46": [
            {
                "modified_file": "src/com/google/javascript/rhino/jstype/RecordType.java",
                "modified_lines": [
                    137,
                    138,
                    139,
                    140,
                    141,
                    142
                ],
                "text": "diff --git a/src/com/google/javascript/rhino/jstype/RecordType.java b/src/com/google/javascript/rhino/jstype/RecordType.java\nindex b418dbd..7289803 100755\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n@@ -137,6 +137,22 @@ class RecordType extends PrototypeObjectType {\n         propertyNode);\n   }\n \n+  @Override\n+  public JSType getLeastSupertype(JSType that) {\n+    if (!that.isRecordType()) {\n+      return super.getLeastSupertype(that);\n+    }\n+    RecordTypeBuilder builder = new RecordTypeBuilder(registry);\n+    for (String property : properties.keySet()) {\n+      if (that.toMaybeRecordType().hasProperty(property) &&\n+          that.toMaybeRecordType().getPropertyType(property).isEquivalentTo(\n+              getPropertyType(property))) {\n+        builder.addProperty(property, getPropertyType(property),\n+            getPropertyNode(property));\n+      }\n+    }\n+    return builder.build();\n+  }\n   JSType getGreatestSubtypeHelper(JSType that) {\n     if (that.isRecordType()) {\n       RecordType thatRecord = that.toMaybeRecordType();\n"
            }
        ]
    },
    "Lang": {
        "20": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "modified_lines": [
                    3295,
                    3296,
                    3297,
                    3298,
                    3299,
                    3300,
                    3301,
                    3380,
                    3381,
                    3382,
                    3383,
                    3384,
                    3385,
                    3386
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 711852e..3c2cf3f 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -3295,7 +3295,7 @@ public class StringUtils {\n             return EMPTY;\n         }\n         \n-        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n@@ -3380,7 +3380,7 @@ public class StringUtils {\n             return EMPTY;\n         }\n \n-        StringBuilder buf = new StringBuilder(noOfItems * 16);\n+        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n"
            }
        ],
        "59": [
            {
                "modified_file": "src/java/org/apache/commons/lang/text/StrBuilder.java",
                "modified_lines": [
                    881,
                    882,
                    883,
                    884,
                    885,
                    886,
                    887
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 4c14509..886d424 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -881,7 +881,7 @@ public class StrBuilder implements Cloneable {\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, width, buffer, size);\n+                str.getChars(0, strLen, buffer, size);\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);\n"
            }
        ],
        "6": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
                "modified_lines": [
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 0500460..4d010ea 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,7 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pt));\n+                pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }\n"
            }
        ],
        "57": [
            {
                "modified_file": "src/java/org/apache/commons/lang/LocaleUtils.java",
                "modified_lines": [
                    220,
                    221,
                    222,
                    223,
                    224,
                    225,
                    226
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7..ceb886e 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -220,7 +220,7 @@ public class LocaleUtils {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return availableLocaleList().contains(locale);\n+        return cAvailableLocaleSet.contains(locale);\n     }\n \n     //-----------------------------------------------------------------------\n"
            }
        ],
        "3": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
                "modified_lines": [
                    590,
                    591,
                    592,
                    593,
                    594,
                    595,
                    596,
                    597,
                    598,
                    599,
                    600,
                    601,
                    602,
                    603,
                    604,
                    605,
                    606,
                    607,
                    608,
                    609,
                    610,
                    611
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc..c584021 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -590,22 +590,18 @@ public class NumberUtils {\n         //Must be a Float, Double, BigDecimal\n         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n         try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n                 final Float f = createFloat(str);\n                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                     return f;\n                 }\n-            }\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n         try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n                 final Double d = createDouble(str);\n                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                     return d;\n                 }\n-            }\n         } catch (final NumberFormatException nfe) { // NOPMD\n             // ignore the bad number\n         }\n"
            }
        ],
        "7": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
                "modified_lines": [
                    449,
                    450,
                    451,
                    452,
                    453,
                    454,
                    715,
                    716,
                    717,
                    718,
                    719,
                    720,
                    721,
                    722,
                    723,
                    724,
                    725,
                    726,
                    727
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 064f547..d49da7f 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,6 +449,9 @@ public class NumberUtils {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }  \n+        if (str.startsWith(\"--\")) {\n+            return null;\n+        }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n             int hexDigits = str.length() - 2; // drop 0x\n             if (str.startsWith(\"-\")) { // drop -\n@@ -715,13 +718,10 @@ public class NumberUtils {\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n         }\n-        if (str.trim().startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n             // a wrong value.\n-            throw new NumberFormatException(str + \" is not a valid number.\");\n-        }\n         return new BigDecimal(str);\n     }\n \n"
            }
        ],
        "19": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
                "modified_lines": [
                    37,
                    38,
                    39,
                    40,
                    41,
                    42,
                    43,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 3d4c238..68891ac 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,16 +47,11 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n-                if(start == seqEnd) {\n-                    return 0;\n-                }\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n-                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n-                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            while(input.charAt(end) != ';') \n             {\n                 end++;\n             }\n@@ -81,9 +76,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n \n-            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n     }\n"
            }
        ],
        "55": [
            {
                "modified_file": "src/java/org/apache/commons/lang/time/StopWatch.java",
                "modified_lines": [
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/time/StopWatch.java b/src/java/org/apache/commons/lang/time/StopWatch.java\nindex 0f0786a..8f39421 100644\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n@@ -115,9 +115,7 @@ public class StopWatch {\n         if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n-        if(this.runningState == STATE_RUNNING) {\n             stopTime = System.currentTimeMillis();\n-        }\n         this.runningState = STATE_STOPPED;\n     }\n \n"
            }
        ],
        "43": [
            {
                "modified_file": "src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java",
                "modified_lines": [
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    425
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 4af3955..404be49 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,7 +419,6 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n-            next(pos);\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n"
            }
        ],
        "16": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
                "modified_lines": [
                    455,
                    456,
                    457,
                    458,
                    459,
                    460,
                    461
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 5b7891a..882358f 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -455,7 +455,7 @@ public class NumberUtils {\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);\n"
            }
        ],
        "31": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "modified_lines": [
                    1443,
                    1444,
                    1445,
                    1446,
                    1447,
                    1448,
                    1449,
                    1450,
                    1451,
                    1452,
                    1453,
                    1454,
                    1455,
                    1456,
                    1457,
                    1458,
                    1459,
                    1460,
                    1461,
                    1462,
                    1463
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 4aac02d..a90b067 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1443,21 +1443,13 @@ public class StringUtils {\n \t\t}\n \t\tint csLength = cs.length();\n \t\tint searchLength = searchChars.length;\n-\t\tint csLastIndex = csLength - 1;\n-\t\tint searchLastIndex = searchLength - 1;\n \t\tfor (int i = 0; i < csLength; i++) {\n \t\t\tchar ch = cs.charAt(i);\n \t\t\tfor (int j = 0; j < searchLength; j++) {\n \t\t\t\tif (searchChars[j] == ch) {\n-\t\t\t\t\tif (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n \t\t\t\t\t\t// ch is a supplementary character\n-\t\t\t\t\t\tif (searchChars[j + 1] == cs.charAt(i + 1)) {\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n \t\t\t\t\t\t// ch is in the Basic Multilingual Plane\n \t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}\n"
            }
        ],
        "15": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
                "modified_lines": [
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224,
                    672,
                    673,
                    674,
                    675,
                    676,
                    677,
                    678
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\nindex 8db8abf..415cefa 100644\n--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n@@ -216,9 +216,9 @@ public class TypeUtils {\n                 toClass, typeVarAssigns);\n \n         // now to check each type argument\n-        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {\n-            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);\n-            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);\n+        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n+            Type toTypeArg = entry.getValue();\n+            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n \n             // parameters must either be absent from the subject type, within\n             // the bounds of the wildcard type, or be an exact match to the\n@@ -672,7 +672,7 @@ public class TypeUtils {\n                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n \n         // has target class been reached?\n-        if (toClass.equals(cls)) {\n+        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n             return typeVarAssigns;\n         }\n \n"
            }
        ],
        "27": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
                "modified_lines": [
                    476,
                    477,
                    478,
                    479,
                    480,
                    481,
                    482,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    492,
                    493,
                    494
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex f1f36a8..fd03ab8 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -476,7 +476,7 @@ public class NumberUtils {\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n-                if (expPos < decPos || expPos > str.length()) {\n+                if (expPos < decPos) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n@@ -486,9 +486,6 @@ public class NumberUtils {\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                if (expPos > str.length()) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n"
            }
        ],
        "64": [
            {
                "modified_file": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
                "modified_lines": [
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/enums/ValuedEnum.java b/src/java/org/apache/commons/lang/enums/ValuedEnum.java\nindex 419a0ea..6aca541 100644\n--- a/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enums/ValuedEnum.java\n@@ -180,16 +180,6 @@ public abstract class ValuedEnum extends Enum {\n      * @throws NullPointerException if other is <code>null</code>\n      */\n     public int compareTo(Object other) {\n-        if (other == this) {\n-            return 0;\n-        }\n-        if (other.getClass() != this.getClass()) {\n-            if (other.getClass().getName().equals(this.getClass().getName())) {\n-                return iValue - getValueInOtherClassLoader(other);\n-            }\n-            throw new ClassCastException(\n-                    \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\");\n-        }\n         return iValue - ((ValuedEnum) other).iValue;\n     }\n \n@@ -199,20 +189,9 @@ public abstract class ValuedEnum extends Enum {\n      * @param other  the object to determine the value for\n      * @return the value\n      */\n-    private int getValueInOtherClassLoader(Object other) {\n-        try {\n-            Method mth = other.getClass().getMethod(\"getValue\", null);\n-            Integer value = (Integer) mth.invoke(other, null);\n-            return value.intValue();\n-        } catch (NoSuchMethodException e) {\n             // ignore - should never happen\n-        } catch (IllegalAccessException e) {\n             // ignore - should never happen\n-        } catch (InvocationTargetException e) {\n             // ignore - should never happen\n-        }\n-        throw new IllegalStateException(\"This should not happen\");\n-    }\n \n     /**\n      * <p>Human readable description of this <code>Enum</code> item.</p>\n"
            }
        ],
        "45": [
            {
                "modified_file": "src/java/org/apache/commons/lang/WordUtils.java",
                "modified_lines": [
                    613,
                    614,
                    615,
                    616,
                    617,
                    618,
                    619,
                    620,
                    621
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 91c6615..42bd883 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -613,9 +613,6 @@ public class WordUtils {\n \n         // if the lower value is greater than the length of the string,\n         // set to the length of the string\n-        if (lower > str.length()) {\n-            lower = str.length();    \n-        }\n         // if the upper value is -1 (i.e. no limit) or is greater\n         // than the length of the string, set to the length of the string\n         if (upper == -1 || upper > str.length()) {\n"
            }
        ],
        "24": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
                "modified_lines": [
                    1410,
                    1411,
                    1412,
                    1413,
                    1414,
                    1415,
                    1416
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex d9b3c6d..4a1d845 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -1410,7 +1410,7 @@ public class NumberUtils {\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n                 // not allowing L with an exponent or decimal point\n-                return foundDigit && !hasExp && !hasDecPoint;\n+                return foundDigit && !hasExp;\n             }\n             // last character is illegal\n             return false;\n"
            }
        ],
        "13": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
                "modified_lines": [
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/SerializationUtils.java b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\nindex 7c89b61..1ee636c 100644\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n@@ -236,8 +236,6 @@ public class SerializationUtils {\n      * class here is a workaround, see the JIRA issue LANG-626. </p>\n      */\n      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n-        private static final Map<String, Class<?>> primitiveTypes = \n-                new HashMap<String, Class<?>>();\n         private ClassLoader classLoader;\n         \n         /**\n@@ -251,15 +249,6 @@ public class SerializationUtils {\n             super(in);\n             this.classLoader = classLoader;\n \n-            primitiveTypes.put(\"byte\", byte.class);\n-            primitiveTypes.put(\"short\", short.class);\n-            primitiveTypes.put(\"int\", int.class);\n-            primitiveTypes.put(\"long\", long.class);\n-            primitiveTypes.put(\"float\", float.class);\n-            primitiveTypes.put(\"double\", double.class);\n-            primitiveTypes.put(\"boolean\", boolean.class);\n-            primitiveTypes.put(\"char\", char.class);\n-            primitiveTypes.put(\"void\", void.class);\n         }\n \n         /**\n@@ -276,15 +265,7 @@ public class SerializationUtils {\n             try {\n                 return Class.forName(name, false, classLoader);\n             } catch (ClassNotFoundException ex) {\n-                try {\n                     return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n-                } catch (ClassNotFoundException cnfe) {\n-                    Class<?> cls = primitiveTypes.get(name);\n-                    if (cls != null)\n-                        return cls;\n-                    else\n-                        throw cnfe;\n-                }\n             }\n         }\n \n"
            }
        ],
        "63": [
            {
                "modified_file": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
                "modified_lines": [
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    317,
                    318,
                    319,
                    320,
                    321,
                    322,
                    424,
                    425,
                    426,
                    427,
                    428,
                    429
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\nindex 3a9d9f6..127b927 100644\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n@@ -303,20 +303,25 @@ public class DurationFormatUtils {\n             days -= 1;\n         }\n         while (days < 0) {\n-            end.add(Calendar.MONTH, -1);\n-            days += end.getActualMaximum(Calendar.DAY_OF_MONTH);\n+            days += 31;\n //days += 31; // TODO: Need tests to show this is bad and the new code is good.\n // HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n // 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.\n // Also it's contextual - if asked for no M in the format then I should probably \n // be doing no calculating here.\n             months -= 1;\n-            end.add(Calendar.MONTH, 1);\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n         }\n+        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);\n+        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n+        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n+        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n+        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n+        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n+        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n \n         // This next block of code adds in values that \n         // aren't requested. This allows the user to ask for the \n@@ -424,6 +429,18 @@ public class DurationFormatUtils {\n         }\n         return buffer.toString();\n     }\n+    static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {\n+        end.add( field, -1 * difference );\n+        int endValue = end.get(field);\n+        int startValue = start.get(field);\n+        if (endValue < startValue) {\n+            int newdiff = startValue - endValue;\n+            end.add( field, newdiff );\n+            return newdiff;\n+        } else {\n+            return 0;\n+        }\n+    }\n \n     static final Object y = \"y\";\n     static final Object M = \"M\";\n"
            }
        ],
        "62": [
            {
                "modified_file": "src/java/org/apache/commons/lang/Entities.java",
                "modified_lines": [
                    847,
                    848,
                    849,
                    850,
                    851,
                    852,
                    853,
                    854,
                    855,
                    920,
                    921,
                    922,
                    923,
                    924,
                    925,
                    926,
                    927,
                    928,
                    929,
                    930,
                    931,
                    932,
                    933,
                    934,
                    935,
                    936
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/Entities.java b/src/java/org/apache/commons/lang/Entities.java\nindex a45e004..9570068 100644\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n@@ -847,9 +847,6 @@ class Entities {\n                             } else {\n                                 entityValue = Integer.parseInt(entityName.substring(1));\n                             }\n-                            if (entityValue > 0xFFFF) {\n-                                entityValue = -1;\n-                            }\n                         } catch (NumberFormatException ex) {\n                             entityValue = -1;\n                         }\n@@ -920,17 +917,12 @@ class Entities {\n                                     case 'X' :\n                                     case 'x' : {\n                                         entityValue = Integer.parseInt(entityContent.substring(2), 16);\n-                                        break;\n                                     }\n                                     default : {\n                                         entityValue = Integer.parseInt(entityContent.substring(1), 10);\n                                     }\n                                 }\n-                                if (entityValue > 0xFFFF) {\n-                                    entityValue = -1;\n-                                }\n                             } catch (NumberFormatException e) {\n-                                entityValue = -1;\n                             }\n                         }\n                     } else { //escaped value content is an entity name\n"
            }
        ],
        "17": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
                "modified_lines": [
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010ea..4cb581d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -80,20 +80,26 @@ public abstract class CharSequenceTranslator {\n             return;\n         }\n         int pos = 0;\n-        int len = input.length();\n+        int len = Character.codePointCount(input, 0, input.length());\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n                 char[] c = Character.toChars(Character.codePointAt(input, pos));\n                 out.write(c);\n-                pos+= c.length;\n-                continue;\n             }\n+            else {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n+                    if (pos < len - 2) {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n+                    } else {\n+                        pos++;\n+                    }\n+                }\n+                pos--;\n             }\n+            pos++;\n         }\n     }\n \n"
            }
        ],
        "51": [
            {
                "modified_file": "src/java/org/apache/commons/lang/BooleanUtils.java",
                "modified_lines": [
                    679,
                    680,
                    681,
                    682,
                    683,
                    684,
                    685
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/BooleanUtils.java b/src/java/org/apache/commons/lang/BooleanUtils.java\nindex 8b5028c..3fda4ec 100644\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n@@ -679,7 +679,6 @@ public class BooleanUtils {\n                         (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n                         (str.charAt(2) == 'S' || str.charAt(2) == 's');\n                 }\n-                return false;\n             }\n             case 4: {\n                 char ch = str.charAt(0);\n"
            }
        ],
        "2": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/LocaleUtils.java",
                "modified_lines": [
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex fab00c5..8a1203a 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -89,9 +89,6 @@ public class LocaleUtils {\n         if (str == null) {\n             return null;\n         }\n-        if (str.contains(\"#\")) { // LANG-879 - Cannot handle Java 7 script & extensions\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n         final int len = str.length();\n         if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n"
            }
        ],
        "44": [
            {
                "modified_file": "src/java/org/apache/commons/lang/NumberUtils.java",
                "modified_lines": [
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex c5ca8cd..18a05ef 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,9 +142,6 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n-        if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {\n-            throw new NumberFormatException(val + \" is not a valid number.\");\n-        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n"
            }
        ],
        "38": [
            {
                "modified_file": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
                "modified_lines": [
                    869,
                    870,
                    871,
                    872,
                    873,
                    874,
                    875
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex d60af96..6b10a94 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -869,7 +869,6 @@ public class FastDateFormat extends Format {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n-            calendar.getTime(); /// LANG-538\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n"
            }
        ],
        "9": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "modified_lines": [
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 38857c7..8df302f 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,9 +141,6 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n-        if (patternMatcher.regionStart() != patternMatcher.regionEnd()) {\n-            throw new IllegalArgumentException(\"Failed to parse \\\"\"+pattern+\"\\\" ; gave up at index \"+patternMatcher.regionStart());\n-        }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n"
            }
        ],
        "5": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/LocaleUtils.java",
                "modified_lines": [
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex a7a6051..bc779d0 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -94,26 +94,6 @@ public class LocaleUtils {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n-        if (ch0 == '_') {\n-            if (len < 3) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch1 = str.charAt(1);\n-            final char ch2 = str.charAt(2);\n-            if (!Character.isUpperCase(ch1) || !Character.isUpperCase(ch2)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 3) {\n-                return new Locale(\"\", str.substring(1, 3));\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(3) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(\"\", str.substring(1, 3), str.substring(4));\n-        } else {\n             final char ch1 = str.charAt(1);\n             if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n@@ -145,7 +125,6 @@ public class LocaleUtils {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n             return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n"
            }
        ],
        "28": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
                "modified_lines": [
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex a21671a..c3cb869 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -60,13 +60,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 return 0;\n             }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n-            } else {\n                 out.write(entityValue);\n-            }\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;\n"
            }
        ],
        "37": [
            {
                "modified_file": "src/java/org/apache/commons/lang3/ArrayUtils.java",
                "modified_lines": [
                    2959,
                    2960,
                    2961,
                    2962,
                    2963,
                    2964,
                    2965,
                    2966,
                    2967,
                    2968,
                    2969,
                    2970,
                    2971,
                    2972,
                    2973,
                    2974
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex b9413e8..889497e 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2959,16 +2959,8 @@ public class ArrayUtils {\n         final Class<?> type1 = array1.getClass().getComponentType();\n         T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-        try {\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-        } catch (ArrayStoreException ase) {\n             // Check if problem is incompatible types\n-            final Class<?> type2 = array2.getClass().getComponentType();\n-            if (!type1.isAssignableFrom(type2)){\n-                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName());\n-            }\n-            throw ase; // No, so rethrow original\n-        }\n         return joinedArray;\n     }\n \n"
            }
        ],
        "56": [
            {
                "modified_file": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
                "modified_lines": [
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    1019,
                    1020,
                    1021,
                    1022,
                    1023,
                    1024,
                    1025,
                    1026,
                    1027,
                    1028
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/time/FastDateFormat.java b/src/java/org/apache/commons/lang/time/FastDateFormat.java\nindex 756290f..89d8073 100644\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n@@ -137,11 +137,11 @@ public class FastDateFormat extends Format {\n     /**\n      * The parsed rules.\n      */\n-    private transient Rule[] mRules;\n+    private Rule[] mRules;\n     /**\n      * The estimated maximum length.\n      */\n-    private transient int mMaxLengthEstimate;\n+    private int mMaxLengthEstimate;\n \n     //-----------------------------------------------------------------------\n     /**\n@@ -1019,10 +1019,6 @@ public class FastDateFormat extends Format {\n \n     // Serializing\n     //-----------------------------------------------------------------------\n-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-        in.defaultReadObject();\n-        init();\n-    }\n     \n     // Rules\n     //-----------------------------------------------------------------------\n"
            }
        ],
        "61": [
            {
                "modified_file": "src/java/org/apache/commons/lang/text/StrBuilder.java",
                "modified_lines": [
                    1773,
                    1774,
                    1775,
                    1776,
                    1777,
                    1778,
                    1779
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex c7cbfb3..0e88989 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -1773,7 +1773,7 @@ public class StrBuilder implements Cloneable {\n             return -1;\n         }\n         char[] thisBuf = buffer;\n-        int len = size - strLen + 1;\n+        int len = thisBuf.length - strLen;\n         outer:\n         for (int i = startIndex; i < len; i++) {\n             for (int j = 0; j < strLen; j++) {\n"
            }
        ],
        "33": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/ClassUtils.java",
                "modified_lines": [
                    907,
                    908,
                    909,
                    910,
                    911,
                    912,
                    913
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/ClassUtils.java b/src/main/java/org/apache/commons/lang3/ClassUtils.java\nindex 3998966..615e4a9 100644\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n@@ -907,7 +907,7 @@ public class ClassUtils {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            classes[i] = array[i] == null ? null : array[i].getClass();\n+            classes[i] = array[i].getClass();\n         }\n         return classes;\n     }\n"
            }
        ],
        "49": [
            {
                "modified_file": "src/java/org/apache/commons/lang/math/Fraction.java",
                "modified_lines": [
                    463,
                    464,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 3347689..5f8e565 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,9 +463,6 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        if (numerator == 0) {\n-            return equals(ZERO) ? this : ZERO;\n-        }\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n         if (gcd == 1) {\n             return this;\n"
            }
        ],
        "58": [
            {
                "modified_file": "src/java/org/apache/commons/lang/math/NumberUtils.java",
                "modified_lines": [
                    451,
                    452,
                    453,
                    454,
                    455,
                    456,
                    457
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex eb74e72..c0f06a4 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,7 +451,8 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+                        && isDigits(numeric.substring(1))\n+                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {\n"
            }
        ],
        "30": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "modified_lines": [
                    1373,
                    1374,
                    1375,
                    1376,
                    1377,
                    1378,
                    1379,
                    1380,
                    1381,
                    1382,
                    1383,
                    1384,
                    1385,
                    1386,
                    1387,
                    1388,
                    1389,
                    1390,
                    1391,
                    1392,
                    1393,
                    1448,
                    1449,
                    1450,
                    1451,
                    1452,
                    1453,
                    1454,
                    1460,
                    1461,
                    1462,
                    1463,
                    1464,
                    1465,
                    1466,
                    1467,
                    1468,
                    1469,
                    1470,
                    1471,
                    1505,
                    1506,
                    1507,
                    1508,
                    1509,
                    1510,
                    1511,
                    1541,
                    1542,
                    1543,
                    1544,
                    1545,
                    1546,
                    1547,
                    1548,
                    1549,
                    1550,
                    1551,
                    1552,
                    1553,
                    1554,
                    1555,
                    1556,
                    1557,
                    1558,
                    1559,
                    1560,
                    1561,
                    1592,
                    1593,
                    1594,
                    1595,
                    1596,
                    1597,
                    1598,
                    1599,
                    1600,
                    1601,
                    1602,
                    1603,
                    1604,
                    1605,
                    1606,
                    1607,
                    1702,
                    1703,
                    1704,
                    1705,
                    1706,
                    1707,
                    1708,
                    1709,
                    1710,
                    1711,
                    1712,
                    1713,
                    1714,
                    1715,
                    1716,
                    1717,
                    1718,
                    1719,
                    1720,
                    1721,
                    1722,
                    1723,
                    1724,
                    1725,
                    1726
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex da86fdb..dd2f5cf 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1373,21 +1373,13 @@ public class StringUtils {\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n-        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n-        int searchLast = searchLen - 1;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n-                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                         // ch is a supplementary character\n-                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n-                            return i;\n-                        }\n-                    } else {\n                         return i;\n-                    }\n                 }\n             }\n         }\n@@ -1448,7 +1440,7 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(String cs, char[] searchChars) {\n+    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n             return false;\n         }\n@@ -1460,12 +1452,9 @@ public class StringUtils {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLength; j++) {\n                 if (searchChars[j] == ch) {\n-                    if (Character.isHighSurrogate(ch)) {\n-                        if (j == searchLast) {\n+                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n-                            return true;\n-                        }\n-                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n+                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                             return true;\n                         }\n                     } else {\n@@ -1505,7 +1494,7 @@ public class StringUtils {\n      * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-    public static boolean containsAny(String cs, String searchChars) {\n+    public static boolean containsAny(CharSequence cs, String searchChars) {\n         if (searchChars == null) {\n             return false;\n         }\n@@ -1541,21 +1530,13 @@ public class StringUtils {\n             return INDEX_NOT_FOUND;\n         }\n         int csLen = cs.length();\n-        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n-        int searchLast = searchLen - 1;\n         outer:\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n-                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n-                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n-                            continue outer;\n-                        }\n-                    } else {\n                         continue outer;\n-                    }\n                 }\n             }\n             return i;\n@@ -1592,16 +1573,8 @@ public class StringUtils {\n         int strLen = str.length();\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n-            boolean chFound = searchChars.indexOf(ch) >= 0;\n-            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n-                char ch2 = str.charAt(i + 1);\n-                if (chFound && searchChars.indexOf(ch2) < 0) {\n+            if (searchChars.indexOf(ch) < 0) {\n                     return i;\n-                }\n-            } else {\n-                if (!chFound) {\n-                    return i;\n-                }\n             }\n         }\n         return INDEX_NOT_FOUND;\n@@ -1702,25 +1675,14 @@ public class StringUtils {\n             return true;\n         }\n         int csLen = cs.length();\n-        int csLast = csLen - 1;\n         int searchLen = searchChars.length;\n-        int searchLast = searchLen - 1;\n         for (int i = 0; i < csLen; i++) {\n             char ch = cs.charAt(i);\n             for (int j = 0; j < searchLen; j++) {\n                 if (searchChars[j] == ch) {\n-                    if (Character.isHighSurrogate(ch)) {\n-                        if (j == searchLast) {\n                             // missing low surrogate, fine, like String.indexOf(String)\n-                            return false;\n-                        }\n-                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n-                            return false;\n-                        }\n-                    } else {\n                         // ch is in the Basic Multilingual Plane\n                         return false;\n-                    }\n                 }\n             }\n         }\n"
            }
        ],
        "34": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
                "modified_lines": [
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    161,
                    162,
                    163,
                    164,
                    165,
                    166,
                    167
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java b/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\nindex 26214ed..aa1f448 100644\n--- a/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\n@@ -145,7 +145,7 @@ public abstract class ToStringStyle implements Serializable {\n      * @return Set the registry of objects being traversed\n      */\n     static Map<Object, Object> getRegistry() {\n-        return REGISTRY.get();\n+        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n     }\n \n     /**\n@@ -161,7 +161,7 @@ public abstract class ToStringStyle implements Serializable {\n      */\n     static boolean isRegistered(Object value) {\n         Map<Object, Object> m = getRegistry();\n-        return m != null && m.containsKey(value);\n+        return m.containsKey(value);\n     }\n \n     /**\n"
            }
        ],
        "42": [
            {
                "modified_file": "src/java/org/apache/commons/lang/Entities.java",
                "modified_lines": [
                    825,
                    826,
                    827,
                    828,
                    829,
                    830,
                    831,
                    832,
                    833,
                    834,
                    835,
                    836,
                    837,
                    838,
                    839
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/Entities.java b/src/java/org/apache/commons/lang/Entities.java\nindex 0d8f7f4..900e1a8 100644\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n@@ -825,15 +825,10 @@ class Entities {\n     public void escape(Writer writer, String str) throws IOException {\n         int len = str.length();\n         for (int i = 0; i < len; i++) {\n-            int c = Character.codePointAt(str, i); \n+            char c = str.charAt(i);\n             String entityName = this.entityName(c);\n             if (entityName == null) {\n-                if (c >= 0x010000 && i < len - 1) {\n-                    writer.write(\"&#\");\n-                    writer.write(Integer.toString(c, 10));\n-                    writer.write(';');\n-                    i++;\n-                } else if (c > 0x7F) { \n+                if (c > 0x7F) {\n                     writer.write(\"&#\");\n                     writer.write(Integer.toString(c, 10));\n                     writer.write(';');\n"
            }
        ],
        "22": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/math/Fraction.java",
                "modified_lines": [
                    580,
                    581,
                    582,
                    583,
                    584,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    591,
                    592,
                    593
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/math/Fraction.java b/src/main/java/org/apache/commons/lang3/math/Fraction.java\nindex bf15a49..b36a156 100644\n--- a/src/main/java/org/apache/commons/lang3/math/Fraction.java\n+++ b/src/main/java/org/apache/commons/lang3/math/Fraction.java\n@@ -580,14 +580,8 @@ public final class Fraction extends Number implements Comparable<Fraction> {\n      */\n     private static int greatestCommonDivisor(int u, int v) {\n         // From Commons Math:\n-        if ((u == 0) || (v == 0)) {\n-            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n-                throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-            }\n-            return Math.abs(u) + Math.abs(v);\n-        }\n         //if either operand is abs 1, return 1:\n-        if (Math.abs(u) == 1 || Math.abs(v) == 1) {\n+        if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {\n             return 1;\n         }\n         // keep u and v negative, as negative integers range down to\n"
            }
        ],
        "23": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java",
                "modified_lines": [
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    296,
                    297,
                    298,
                    299,
                    300,
                    301,
                    302
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\nindex 55ee7d1..a2cc169 100644\n--- a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n@@ -70,7 +70,6 @@ import org.apache.commons.lang3.Validate;\n  */\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n-    private static final int HASH_SEED = 31;\n \n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";\n@@ -261,42 +260,12 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param obj the object to compare to\n      * @return true if this object equals the other, otherwise false\n      */\n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj == this) {\n-            return true;\n-        }\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (!super.equals(obj)) {\n-            return false;\n-        }\n-        if (ObjectUtils.notEqual(getClass(), obj.getClass())) {\n-          return false;\n-        }\n-        ExtendedMessageFormat rhs = (ExtendedMessageFormat)obj;\n-        if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {\n-            return false;\n-        }\n-        if (ObjectUtils.notEqual(registry, rhs.registry)) {\n-            return false;\n-        }\n-        return true;\n-    }\n \n     /**\n      * Return the hashcode.\n      *\n      * @return the hashcode\n      */\n-    @Override\n-    public int hashCode() {\n-        int result = super.hashCode();\n-        result = HASH_SEED * result + ObjectUtils.hashCode(registry);\n-        result = HASH_SEED * result + ObjectUtils.hashCode(toPattern);\n-        return result;\n-    }\n \n     /**\n      * Get a custom format from a format description.\n"
            }
        ],
        "35": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
                "modified_lines": [
                    3292,
                    3293,
                    3294,
                    3295,
                    3296,
                    3297,
                    3298,
                    3571,
                    3572,
                    3573,
                    3574,
                    3575,
                    3576,
                    3577
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/ArrayUtils.java b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\nindex 3a543ce..ac22f8f 100644\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -3292,7 +3292,7 @@ public class ArrayUtils {\n         } else if (element != null) {\n             type = element.getClass();\n         } else {\n-            throw new IllegalArgumentException(\"Arguments cannot both be null\");            \n+            type = Object.class;\n         }\n         @SuppressWarnings(\"unchecked\") // type must be T\n         T[] newArray = (T[]) copyArrayGrow1(array, type);\n@@ -3571,7 +3571,7 @@ public class ArrayUtils {\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n-            throw new IllegalArgumentException(\"Array and element cannot both be null\");            \n+            return (T[]) new Object[] { null };\n         }\n         @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n         final T[] newArray = (T[]) add(array, index, element, clss);\n"
            }
        ],
        "8": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
                "modified_lines": [
                    1095,
                    1096,
                    1097,
                    1098,
                    1099,
                    1100,
                    1108,
                    1109,
                    1110,
                    1111,
                    1112,
                    1113,
                    1129,
                    1130,
                    1131,
                    1132,
                    1133,
                    1134,
                    1135
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\nindex c952309..5c0edda 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n@@ -1095,6 +1095,7 @@ public class FastDatePrinter implements DatePrinter, Serializable {\n     private static class TimeZoneNameRule implements Rule {\n         private final Locale mLocale;\n         private final int mStyle;\n+        private final TimeZone zone;\n         private final String mStandard;\n         private final String mDaylight;\n \n@@ -1108,6 +1109,7 @@ public class FastDatePrinter implements DatePrinter, Serializable {\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n             mLocale = locale;\n             mStyle = style;\n+            zone = timeZone;\n             \n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n@@ -1129,7 +1131,6 @@ public class FastDatePrinter implements DatePrinter, Serializable {\n          */\n         @Override\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n-            TimeZone zone = calendar.getTimeZone();\n             if (zone.useDaylightTime()\n                     && calendar.get(Calendar.DST_OFFSET) != 0) {\n                 buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n"
            }
        ],
        "18": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
                "modified_lines": [
                    492,
                    493,
                    494,
                    495,
                    496,
                    497,
                    498,
                    499,
                    500,
                    501
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 51da48e..e043323 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -492,10 +492,10 @@ public class FastDateFormat extends Format {\n                 rule = new TextField(Calendar.ERA, ERAs);\n                 break;\n             case 'y': // year (number)\n-                if (tokenLen == 2) {\n-                    rule = TwoDigitYearField.INSTANCE;\n+                if (tokenLen >= 4) {\n+                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n-                    rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);\n+                    rule = TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case 'M': // month in year (text and number)\n"
            }
        ],
        "25": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
                "modified_lines": [
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\nindex ef839c6..8caca58 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java\n@@ -71,33 +71,33 @@ public class EntityArrays {\n         {\"\\u00C7\", \"&Ccedil;\"}, //  - uppercase C, cedilla\n         {\"\\u00C8\", \"&Egrave;\"}, //  - uppercase E, grave accent\n         {\"\\u00C9\", \"&Eacute;\"}, //  - uppercase E, acute accent\n-        {\"\\u00CA\", \"&Ecirc;\"}, //  - uppercase E, circumflex accent\n-        {\"\\u00CB\", \"&Euml;\"}, //  - uppercase E, umlaut\n-        {\"\\u00CC\", \"&Igrave;\"}, //  - uppercase I, grave accent\n-        {\"\\u00CD\", \"&Iacute;\"}, //  - uppercase I, acute accent\n-        {\"\\u00CE\", \"&Icirc;\"}, //  - uppercase I, circumflex accent\n-        {\"\\u00CF\", \"&Iuml;\"}, //  - uppercase I, umlaut\n-        {\"\\u00D0\", \"&ETH;\"}, //  - uppercase Eth, Icelandic\n-        {\"\\u00D1\", \"&Ntilde;\"}, //  - uppercase N, tilde\n-        {\"\\u00D2\", \"&Ograve;\"}, //  - uppercase O, grave accent\n-        {\"\\u00D3\", \"&Oacute;\"}, //  - uppercase O, acute accent\n-        {\"\\u00D4\", \"&Ocirc;\"}, //  - uppercase O, circumflex accent\n-        {\"\\u00D5\", \"&Otilde;\"}, //  - uppercase O, tilde\n-        {\"\\u00D6\", \"&Ouml;\"}, //  - uppercase O, umlaut\n-        {\"\\u00D7\", \"&times;\"}, // multiplication sign\n-        {\"\\u00D8\", \"&Oslash;\"}, //  - uppercase O, slash\n-        {\"\\u00D9\", \"&Ugrave;\"}, //  - uppercase U, grave accent\n-        {\"\\u00DA\", \"&Uacute;\"}, //  - uppercase U, acute accent\n-        {\"\\u00DB\", \"&Ucirc;\"}, //  - uppercase U, circumflex accent\n-        {\"\\u00DC\", \"&Uuml;\"}, //  - uppercase U, umlaut\n-        {\"\\u00DD\", \"&Yacute;\"}, //  - uppercase Y, acute accent\n-        {\"\\u00DE\", \"&THORN;\"}, //  - uppercase THORN, Icelandic\n-        {\"\\u00DF\", \"&szlig;\"}, //  - lowercase sharps, German\n-        {\"\\u00E0\", \"&agrave;\"}, //  - lowercase a, grave accent\n-        {\"\\u00E1\", \"&aacute;\"}, //  - lowercase a, acute accent\n-        {\"\\u00E2\", \"&acirc;\"}, //  - lowercase a, circumflex accent\n-        {\"\\u00E3\", \"&atilde;\"}, //  - lowercase a, tilde\n-        {\"\\u00E4\", \"&auml;\"}, //  - lowercase a, umlaut\n+        {\"\\u00CB\", \"&Ecirc;\"}, //  - uppercase E, circumflex accent\n+        {\"\\u00CC\", \"&Euml;\"}, //  - uppercase E, umlaut\n+        {\"\\u00CD\", \"&Igrave;\"}, //  - uppercase I, grave accent\n+        {\"\\u00CE\", \"&Iacute;\"}, //  - uppercase I, acute accent\n+        {\"\\u00CF\", \"&Icirc;\"}, //  - uppercase I, circumflex accent\n+        {\"\\u00D0\", \"&Iuml;\"}, //  - uppercase I, umlaut\n+        {\"\\u00D1\", \"&ETH;\"}, //  - uppercase Eth, Icelandic\n+        {\"\\u00D2\", \"&Ntilde;\"}, //  - uppercase N, tilde\n+        {\"\\u00D3\", \"&Ograve;\"}, //  - uppercase O, grave accent\n+        {\"\\u00D4\", \"&Oacute;\"}, //  - uppercase O, acute accent\n+        {\"\\u00D5\", \"&Ocirc;\"}, //  - uppercase O, circumflex accent\n+        {\"\\u00D6\", \"&Otilde;\"}, //  - uppercase O, tilde\n+        {\"\\u00D7\", \"&Ouml;\"}, //  - uppercase O, umlaut\n+        {\"\\u00D8\", \"&times;\"}, // multiplication sign\n+        {\"\\u00D9\", \"&Oslash;\"}, //  - uppercase O, slash\n+        {\"\\u00DA\", \"&Ugrave;\"}, //  - uppercase U, grave accent\n+        {\"\\u00DB\", \"&Uacute;\"}, //  - uppercase U, acute accent\n+        {\"\\u00DC\", \"&Ucirc;\"}, //  - uppercase U, circumflex accent\n+        {\"\\u00DD\", \"&Uuml;\"}, //  - uppercase U, umlaut\n+        {\"\\u00DE\", \"&Yacute;\"}, //  - uppercase Y, acute accent\n+        {\"\\u00DF\", \"&THORN;\"}, //  - uppercase THORN, Icelandic\n+        {\"\\u00E0\", \"&szlig;\"}, //  - lowercase sharps, German\n+        {\"\\u00E1\", \"&agrave;\"}, //  - lowercase a, grave accent\n+        {\"\\u00E2\", \"&aacute;\"}, //  - lowercase a, acute accent\n+        {\"\\u00E3\", \"&acirc;\"}, //  - lowercase a, circumflex accent\n+        {\"\\u00E4\", \"&atilde;\"}, //  - lowercase a, tilde\n+        {\"\\u00E5\", \"&auml;\"}, //  - lowercase a, umlaut\n         {\"\\u00E5\", \"&aring;\"}, //  - lowercase a, ring\n         {\"\\u00E6\", \"&aelig;\"}, //  - lowercase ae\n         {\"\\u00E7\", \"&ccedil;\"}, //  - lowercase c, cedilla\n"
            }
        ],
        "4": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
                "modified_lines": [
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java\nindex 9cf45f8..8ed51bc 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java\n@@ -28,7 +28,7 @@ import java.util.HashMap;\n  */\n public class LookupTranslator extends CharSequenceTranslator {\n \n-    private final HashMap<String, CharSequence> lookupMap;\n+    private final HashMap<CharSequence, CharSequence> lookupMap;\n     private final int shortest;\n     private final int longest;\n \n@@ -43,12 +43,12 @@ public class LookupTranslator extends CharSequenceTranslator {\n      * @param lookup CharSequence[][] table of size [*][2]\n      */\n     public LookupTranslator(final CharSequence[]... lookup) {\n-        lookupMap = new HashMap<String, CharSequence>();\n+        lookupMap = new HashMap<CharSequence, CharSequence>();\n         int _shortest = Integer.MAX_VALUE;\n         int _longest = 0;\n         if (lookup != null) {\n             for (final CharSequence[] seq : lookup) {\n-                this.lookupMap.put(seq[0].toString(), seq[1]);\n+                this.lookupMap.put(seq[0], seq[1]);\n                 final int sz = seq[0].length();\n                 if (sz < _shortest) {\n                     _shortest = sz;\n@@ -74,7 +74,7 @@ public class LookupTranslator extends CharSequenceTranslator {\n         // descend so as to get a greedy algorithm\n         for (int i = max; i >= shortest; i--) {\n             final CharSequence subSeq = input.subSequence(index, index + i);\n-            final CharSequence result = lookupMap.get(subSeq.toString());\n+            final CharSequence result = lookupMap.get(subSeq);\n             if (result != null) {\n                 out.write(result.toString());\n                 return i;\n"
            }
        ],
        "11": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
                "modified_lines": [
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250,
                    251
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex 9dfee22..a799057 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -242,10 +242,6 @@ public class RandomStringUtils {\n                     start = ' ';                \n                 }\n             }\n-        } else {\n-            if (end <= start) {\n-                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n-            }\n         }\n \n         char[] buffer = new char[count];\n"
            }
        ],
        "26": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
                "modified_lines": [
                    817,
                    818,
                    819,
                    820,
                    821,
                    822,
                    823
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 95925fc..e30da2a 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -817,7 +817,7 @@ public class FastDateFormat extends Format {\n      * @return the formatted string\n      */\n     public String format(Date date) {\n-        Calendar c = new GregorianCalendar(mTimeZone, mLocale);\n+        Calendar c = new GregorianCalendar(mTimeZone);\n         c.setTime(date);\n         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n     }\n"
            }
        ],
        "53": [
            {
                "modified_file": "src/java/org/apache/commons/lang/time/DateUtils.java",
                "modified_lines": [
                    640,
                    641,
                    642,
                    643,
                    644,
                    645,
                    646,
                    647,
                    648,
                    649,
                    650,
                    651,
                    652,
                    653,
                    654,
                    655,
                    656,
                    657
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex e5138b5..0dd0ded 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -640,18 +640,18 @@ public class DateUtils {\n         int millisecs = val.get(Calendar.MILLISECOND);\n         if (!round || millisecs < 500) {\n             time = time - millisecs;\n-        }\n         if (field == Calendar.SECOND) {\n             done = true;\n+            }\n         }\n \n         // truncate seconds\n         int seconds = val.get(Calendar.SECOND);\n         if (!done && (!round || seconds < 30)) {\n             time = time - (seconds * 1000L);\n-        }\n         if (field == Calendar.MINUTE) {\n             done = true;\n+            }\n         }\n \n         // truncate minutes\n"
            }
        ],
        "29": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
                "modified_lines": [
                    1669,
                    1670,
                    1671,
                    1672,
                    1673,
                    1674,
                    1675
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/SystemUtils.java b/src/main/java/org/apache/commons/lang3/SystemUtils.java\nindex 2116f7c..0c73f42 100644\n--- a/src/main/java/org/apache/commons/lang3/SystemUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SystemUtils.java\n@@ -1669,7 +1669,7 @@ public class SystemUtils {\n      * \n      * @return the version, for example 131 for Java 1.3.1\n      */\n-    static int toJavaVersionInt(String version) {\n+    static float toJavaVersionInt(String version) {\n         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n     }\n \n"
            }
        ],
        "12": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
                "modified_lines": [
                    227,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex a799057..b200223 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -227,21 +227,14 @@ public class RandomStringUtils {\n         } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n-        if (chars != null && chars.length == 0) {\n-            throw new IllegalArgumentException(\"The chars array must not be empty\");\n-        }\n \n         if (start == 0 && end == 0) {\n-            if (chars != null) {\n-                end = chars.length;\n-            } else {\n                 if (!letters && !numbers) {\n                     end = Integer.MAX_VALUE;\n                 } else {\n                     end = 'z' + 1;\n                     start = ' ';                \n                 }\n-            }\n         }\n \n         char[] buffer = new char[count];\n"
            }
        ],
        "65": [
            {
                "modified_file": "src/java/org/apache/commons/lang/time/DateUtils.java",
                "modified_lines": [
                    621,
                    622,
                    623,
                    624,
                    625,
                    626,
                    627,
                    628,
                    629,
                    631,
                    632,
                    633,
                    634,
                    635,
                    636,
                    637,
                    638,
                    639,
                    640,
                    641,
                    642,
                    643,
                    644,
                    645,
                    646,
                    647,
                    648,
                    649,
                    650,
                    651,
                    652,
                    653,
                    654,
                    655,
                    656,
                    657,
                    658,
                    659,
                    660,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    667,
                    668,
                    669,
                    734,
                    735,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 79c13f0..531e73f 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -621,9 +621,6 @@ public class DateUtils {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n         \n-        if (field == Calendar.MILLISECOND) {\n-            return;\n-        }\n \n         // ----------------- Fix for LANG-59 ---------------------- START ---------------\n         // see http://issues.apache.org/jira/browse/LANG-59\n@@ -631,39 +628,14 @@ public class DateUtils {\n         // Manually truncate milliseconds, seconds and minutes, rather than using\n         // Calendar methods.\n \n-        Date date = val.getTime();\n-        long time = date.getTime();\n-        boolean done = false;\n \n         // truncate milliseconds\n-        int millisecs = val.get(Calendar.MILLISECOND);\n-        if (!round || millisecs < 500) {\n-            time = time - millisecs;\n-            if (field == Calendar.SECOND) {\n-                done = true;\n-            }\n-        }\n \n         // truncate seconds\n-        int seconds = val.get(Calendar.SECOND);\n-        if (!done && (!round || seconds < 30)) {\n-            time = time - (seconds * 1000L);\n-            if (field == Calendar.MINUTE) {\n-                done = true;\n-            }\n-        }\n \n         // truncate minutes\n-        int minutes = val.get(Calendar.MINUTE);\n-        if (!done && (!round || minutes < 30)) {\n-            time = time - (minutes * 60000L);\n-        }\n \n         // reset time\n-        if (date.getTime() != time) {\n-            date.setTime(time);\n-            val.setTime(date);\n-        }\n         // ----------------- Fix for LANG-59 ----------------------- END ----------------\n \n         boolean roundUp = false;\n@@ -734,9 +706,7 @@ public class DateUtils {\n                 roundUp = offset > ((max - min) / 2);\n             }\n             //We need to remove this field\n-            if (offset != 0) {\n                 val.set(fields[i][0], val.get(fields[i][0]) - offset);\n-            }\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n"
            }
        ],
        "10": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "modified_lines": [
                    301,
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f..a01159b 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -301,8 +301,17 @@ public class FastDateParser implements DateParser, Serializable {\n      * @return The <code>StringBuilder</code>\n      */\n     private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n+        boolean wasWhite= false;\n         for(int i= 0; i<value.length(); ++i) {\n             char c= value.charAt(i);\n+            if(Character.isWhitespace(c)) {\n+                if(!wasWhite) {\n+                    wasWhite= true;\n+                    regex.append(\"\\\\s*+\");\n+                }\n+                continue;\n+            }\n+            wasWhite= false;\n             switch(c) {\n             case '\\'':\n                 if(unquote) {\n"
            }
        ],
        "40": [
            {
                "modified_file": "src/java/org/apache/commons/lang/StringUtils.java",
                "modified_lines": [
                    1045,
                    1046,
                    1047,
                    1048,
                    1049,
                    1050,
                    1051,
                    1052,
                    1053,
                    1054,
                    1055,
                    1056,
                    1057,
                    1058
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/StringUtils.java b/src/java/org/apache/commons/lang/StringUtils.java\nindex 8351b3e..72b4a49 100644\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n@@ -1045,14 +1045,7 @@ public class StringUtils {\n         if (str == null || searchStr == null) {\n             return false;\n         }\n-        int len = searchStr.length();\n-        int max = str.length() - len;\n-        for (int i = 0; i <= max; i++) {\n-            if (str.regionMatches(true, i, searchStr, 0, len)) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return contains(str.toUpperCase(), searchStr.toUpperCase());\n     }\n \n     // IndexOfAny chars\n"
            }
        ],
        "32": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
                "modified_lines": [
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    515,
                    516,
                    517,
                    518,
                    519,
                    520,
                    521,
                    522,
                    523,
                    524,
                    525,
                    536,
                    537,
                    538,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\nindex 9f7e890..4ae351d 100644\n--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n@@ -101,7 +101,12 @@ public class HashCodeBuilder {\n      * \n      * @since 2.3\n      */\n-    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();\n+    private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {\n+        @Override\n+        protected Set<IDKey> initialValue() {\n+            return new HashSet<IDKey>();\n+        }\n+    };\n \n     /*\n      * N.B. we cannot store the actual objects in a HashSet, as that would use the very hashCode()\n@@ -144,8 +149,7 @@ public class HashCodeBuilder {\n      * @since 2.3\n      */\n     static boolean isRegistered(Object value) {\n-        Set<IDKey> registry = getRegistry();\n-        return registry != null && registry.contains(new IDKey(value));\n+        return getRegistry().contains(new IDKey(value));\n     }\n \n     /**\n@@ -515,11 +519,6 @@ public class HashCodeBuilder {\n      *            The object to register.\n      */\n     static void register(Object value) {\n-        synchronized (HashCodeBuilder.class) {\n-            if (getRegistry() == null) {\n-                REGISTRY.set(new HashSet<IDKey>());\n-            }\n-        }\n         getRegistry().add(new IDKey(value));\n     }\n \n@@ -536,15 +535,7 @@ public class HashCodeBuilder {\n      * @since 2.3\n      */\n     static void unregister(Object value) {\n-        Set<IDKey> s = getRegistry();\n-        if (s != null) {\n-            s.remove(new IDKey(value));\n-            synchronized (HashCodeBuilder.class) {\n-                if (s.isEmpty()) {\n-                    REGISTRY.remove();\n-                }\n-            }\n-        }\n+        getRegistry().remove(new IDKey(value));\n     }\n \n     /**\n"
            }
        ],
        "14": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "modified_lines": [
                    785,
                    786,
                    787,
                    788,
                    789,
                    790,
                    791,
                    792,
                    793,
                    794
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex 4733b7e..535a3f2 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -785,10 +785,7 @@ public class StringUtils {\n         if (cs1 == null || cs2 == null) {\n             return false;\n         }\n-        if (cs1 instanceof String && cs2 instanceof String) {\n             return cs1.equals(cs2);\n-        }\n-        return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));\n     }\n \n     /**\n"
            }
        ],
        "1": [
            {
                "modified_file": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
                "modified_lines": [
                    464,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    477,
                    478,
                    479,
                    480,
                    481,
                    482,
                    483
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 70b8d64..1e6ccdc 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -464,20 +464,11 @@ public class NumberUtils {\n             }\n         }\n         if (pfxLen > 0) { // we have a hex number\n-            char firstSigDigit = 0; // strip leading zeroes\n-            for(int i = pfxLen; i < str.length(); i++) {\n-                firstSigDigit = str.charAt(i);\n-                if (firstSigDigit == '0') { // count leading zeroes\n-                    pfxLen++;\n-                } else {\n-                    break;\n-                }\n-            }\n             final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many for Long\n+            if (hexDigits > 16) { // too many for Long\n                 return createBigInteger(str);\n             }\n-            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many for an int\n+            if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n"
            }
        ],
        "46": [
            {
                "modified_file": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
                "modified_lines": [
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    175,
                    176,
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250
                ],
                "text": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex d4f98ec..7b22e21 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -83,7 +83,7 @@ public class StringEscapeUtils {\n      * @return String with escaped values, <code>null</code> if null string input\n      */\n     public static String escapeJava(String str) {\n-        return escapeJavaStyleString(str, false, false);\n+        return escapeJavaStyleString(str, false);\n     }\n \n     /**\n@@ -99,7 +99,7 @@ public class StringEscapeUtils {\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, false, false);\n+        escapeJavaStyleString(out, str, false);\n     }\n \n     /**\n@@ -124,7 +124,7 @@ public class StringEscapeUtils {\n      * @return String with escaped values, <code>null</code> if null string input\n      */\n     public static String escapeJavaScript(String str) {\n-        return escapeJavaStyleString(str, true, true);\n+        return escapeJavaStyleString(str, true);\n     }\n \n     /**\n@@ -140,7 +140,7 @@ public class StringEscapeUtils {\n      * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, true, true);\n+        escapeJavaStyleString(out, str, true);\n     }\n \n     /**\n@@ -151,13 +151,13 @@ public class StringEscapeUtils {\n      * @param escapeForwardSlash TODO\n      * @return the escaped string\n      */\n-    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n+    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n         if (str == null) {\n             return null;\n         }\n         try {\n             StringWriter writer = new StringWriter(str.length() * 2);\n-            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n+            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n             return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n@@ -175,8 +175,7 @@ public class StringEscapeUtils {\n      * @param escapeForwardSlash TODO\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n-            boolean escapeForwardSlash) throws IOException {\n+    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n@@ -242,9 +241,7 @@ public class StringEscapeUtils {\n                         out.write('\\\\');\n                         break;\n                     case '/' :\n-                        if (escapeForwardSlash) {\n                             out.write('\\\\');\n-                        }\n                         out.write('/');\n                         break;\n                     default :\n"
            }
        ]
    },
    "Math": {
        "20": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
                "modified_lines": [
                    918,
                    919,
                    920,
                    921,
                    922,
                    923,
                    924,
                    925
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex b54cb37..4b7dbf6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -918,8 +918,7 @@ public class CMAESOptimizer\n          * @return the original objective variables, possibly repaired.\n          */\n         public double[] repairAndDecode(final double[] x) {\n-            return boundaries != null && isRepairMode ?\n-                decode(repair(x)) :\n+            return\n                 decode(x);\n         }\n \n"
            }
        ],
        "68": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
                "modified_lines": [
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    345,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    414,
                    415,
                    416,
                    417,
                    418,
                    419,
                    420,
                    421,
                    422,
                    423,
                    424,
                    425,
                    426,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    433
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex 28aee43..d1b36ea 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -163,7 +163,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n         setMaxIterations(1000);\n \n         // default values for the tuning parameters\n-        setConvergenceChecker(null);\n         setInitialStepBoundFactor(100.0);\n         setCostRelativeTolerance(1.0e-10);\n         setParRelativeTolerance(1.0e-10);\n@@ -245,13 +244,11 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n         // outer loop\n         lmPar = 0;\n         boolean firstIteration = true;\n-        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n \n             incrementIterationsCounter();\n \n             // compute the Q.R. decomposition of the jacobian matrix\n-            VectorialPointValuePair previous = current;\n             updateJacobian();\n             qrDecomposition();\n \n@@ -303,7 +300,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n             }\n             if (maxCosine <= orthoTolerance) {\n                 // convergence has been reached\n-                return current;\n+                return new VectorialPointValuePair(point, objective);\n             }\n \n             // rescale if necessary\n@@ -345,7 +342,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n                 // evaluate the function at x + p and calculate its norm\n                 updateResidualsAndCost();\n-                current = new VectorialPointValuePair(point, objective);\n \n                 // compute the scaled actual reduction\n                 double actRed = -1.0;\n@@ -414,20 +410,14 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                 }\n \n                 // tests for convergence.\n-                if (checker != null) {\n                     // we use the vectorial convergence checker\n-                    if (checker.converged(getIterations(), previous, current)) {\n-                        return current;                        \n-                    }\n-                } else {\n                     // we use the Levenberg-Marquardt specific convergence parameters\n                     if (((Math.abs(actRed) <= costRelativeTolerance) &&\n                          (preRed <= costRelativeTolerance) &&\n                          (ratio <= 2.0)) ||\n                         (delta <= parRelativeTolerance * xNorm)) {\n-                        return current;\n+                        return new VectorialPointValuePair(point, objective);\n                     }\n-                }\n \n                 // tests for termination and stringent tolerances\n                 // (2.2204e-16 is the machine epsilon for IEEE754)\n"
            }
        ],
        "59": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/util/FastMath.java",
                "modified_lines": [
                    3479,
                    3480,
                    3481,
                    3482,
                    3483,
                    3484,
                    3485
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java\nindex 4f7d447..8cba4d4 100644\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n@@ -3479,7 +3479,7 @@ public class FastMath {\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n     public static float max(final float a, final float b) {\n-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);\n+        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n     }\n \n     /** Compute the maximum of two values\n"
            }
        ],
        "84": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
                "modified_lines": [
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 929560c..42a4d9d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -61,7 +61,6 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        final RealConvergenceChecker checker = getConvergenceChecker();\n         while (true) {\n \n             incrementIterationsCounter();\n@@ -90,16 +89,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-                return;\n-            }\n \n             // check convergence\n-            final int iter = getIterations();\n-            boolean converged = true;\n-            for (int i = 0; i < simplex.length; ++i) {\n-                converged &= checker.converged(iter, original[i], simplex[i]);\n-            }\n-            if (converged) {\n                 return;\n             }\n \n"
            }
        ],
        "74": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
                "modified_lines": [
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 1bbad3e..6f3e883 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -242,15 +242,12 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         if (firstTime) {\n-          final double[] scale = new double[y0.length];\n+          final double[] scale;\n           if (vecAbsoluteTolerance == null) {\n-              for (int i = 0; i < scale.length; ++i) {\n-                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]);\n-              }\n+              scale = new double[y0.length];\n+              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n             } else {\n-              for (int i = 0; i < scale.length; ++i) {\n-                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]);\n-              }\n+              scale = vecAbsoluteTolerance;\n             }\n           hNew = initializeStep(equations, forward, getOrder(), scale,\n                                 stepStart, y, yDotK[0], yTmp, yDotK[1]);\n"
            }
        ],
        "6": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java",
                "modified_lines": [
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java b/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java\nindex 927e17f..75c9757 100644\n--- a/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java\n@@ -48,7 +48,7 @@ public abstract class BaseOptimizer<PAIR> {\n         this.checker = checker;\n \n         evaluations = new Incrementor(0, new MaxEvalCallback());\n-        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());\n+        iterations = new Incrementor(0, new MaxIterCallback());\n     }\n \n     /**\n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java",
                "modified_lines": [
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224,
                    225,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java\nindex bd12b54..e010781 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java\n@@ -211,15 +211,16 @@ public class NonLinearConjugateGradientOptimizer\n         }\n \n         PointValuePair current = null;\n+        int iter = 0;\n         int maxEval = getMaxEvaluations();\n         while (true) {\n-            incrementIterationCount();\n+            ++iter;\n \n             final double objective = computeObjectiveValue(point);\n             PointValuePair previous = current;\n             current = new PointValuePair(point, objective);\n             if (previous != null) {\n-                if (checker.converged(getIterations(), previous, current)) {\n+                if (checker.converged(iter, previous, current)) {\n                     // We have found an optimum.\n                     return current;\n                 }\n@@ -273,7 +274,7 @@ public class NonLinearConjugateGradientOptimizer\n             steepestDescent = newSteepestDescent;\n \n             // Compute conjugate search direction.\n-            if (getIterations() % n == 0 ||\n+            if (iter % n == 0 ||\n                 beta < 0) {\n                 // Break conjugation: reset search direction.\n                 searchDirection = steepestDescent.clone();\n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java",
                "modified_lines": [
                    385,
                    386,
                    387,
                    388,
                    389,
                    390,
                    391
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java\nindex fed67b1..0303041 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java\n@@ -385,7 +385,6 @@ public class CMAESOptimizer\n \n         generationLoop:\n         for (iterations = 1; iterations <= maxIterations; iterations++) {\n-            incrementIterationCount();\n \n             // Generate and evaluate lambda offspring\n             final RealMatrix arz = randn1(dimension, lambda);\n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java",
                "modified_lines": [
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java\nindex afe8d2f..9572820 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java\n@@ -188,8 +188,9 @@ public class PowellOptimizer\n         double[] x = guess;\n         double fVal = computeObjectiveValue(x);\n         double[] x1 = x.clone();\n+        int iter = 0;\n         while (true) {\n-            incrementIterationCount();\n+            ++iter;\n \n             double fX = fVal;\n             double fX2 = 0;\n@@ -223,7 +224,7 @@ public class PowellOptimizer\n             final PointValuePair current = new PointValuePair(x, fVal);\n             if (!stop) { // User-defined stopping criteria.\n                 if (checker != null) {\n-                    stop = checker.converged(getIterations(), previous, current);\n+                    stop = checker.converged(iter, previous, current);\n                 }\n             }\n             if (stop) {\n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java",
                "modified_lines": [
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java\nindex 0dd644e..9ea2324 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java\n@@ -155,7 +155,7 @@ public class SimplexOptimizer extends MultivariateOptimizer {\n         int iteration = 0;\n         final ConvergenceChecker<PointValuePair> checker = getConvergenceChecker();\n         while (true) {\n-            if (getIterations() > 0) {\n+            if (iteration > 0) {\n                 boolean converged = true;\n                 for (int i = 0; i < simplex.getSize(); i++) {\n                     PointValuePair prev = previous[i];\n@@ -172,7 +172,7 @@ public class SimplexOptimizer extends MultivariateOptimizer {\n             previous = simplex.getPoints();\n             simplex.iterate(evalFunc, comparator);\n \n-            incrementIterationCount();\n+\t\t\t++iteration;\n         }\n     }\n \n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java",
                "modified_lines": [
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\nindex 844ed22..a2834f2 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java\n@@ -103,8 +103,9 @@ public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {\n \n         // iterate until convergence is reached\n         PointVectorValuePair current = null;\n+        int iter = 0;\n         for (boolean converged = false; !converged;) {\n-            incrementIterationCount();\n+            ++iter;\n \n             // evaluate the objective function and its jacobian\n             PointVectorValuePair previous = current;\n@@ -156,7 +157,7 @@ public class GaussNewtonOptimizer extends AbstractLeastSquaresOptimizer {\n \n             // Check convergence.\n             if (previous != null) {\n-                converged = checker.converged(getIterations(), previous, current);\n+                converged = checker.converged(iter, previous, current);\n                 if (converged) {\n                     setCost(computeCost(currentResiduals));\n                     return current;\n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
                "modified_lines": [
                    319,
                    320,
                    321,
                    322,
                    323,
                    324,
                    325,
                    326,
                    327,
                    328,
                    486,
                    487,
                    488,
                    489,
                    490,
                    491,
                    492
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\nindex 4016131..ca2d138 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n@@ -319,10 +319,10 @@ public class LevenbergMarquardtOptimizer\n         // Outer loop.\n         lmPar = 0;\n         boolean firstIteration = true;\n+        int iter = 0;\n         final ConvergenceChecker<PointVectorValuePair> checker = getConvergenceChecker();\n         while (true) {\n-            incrementIterationCount();\n-\n+            ++iter;\n             final PointVectorValuePair previous = current;\n \n             // QR decomposition of the jacobian matrix\n@@ -486,7 +486,7 @@ public class LevenbergMarquardtOptimizer\n                     // tests for convergence.\n                     if (checker != null) {\n                         // we use the vectorial convergence checker\n-                        if (checker.converged(getIterations(), previous, current)) {\n+                        if (checker.converged(iter, previous, current)) {\n                             setCost(currentCost);\n                             return current;\n                         }\n"
            }
        ],
        "57": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
                "modified_lines": [
                    172,
                    173,
                    174,
                    175,
                    176,
                    177,
                    178
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex e09bbc3..b73ac9d 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -172,7 +172,7 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n         while (resultSet.size() < k) {\n             // For each data point x, compute D(x), the distance between x and\n             // the nearest center that has already been chosen.\n-            double sum = 0;\n+            int sum = 0;\n             for (int i = 0; i < pointSet.size(); i++) {\n                 final T p = pointSet.get(i);\n                 final Cluster<T> nearest = getNearestCluster(resultSet, p);\n"
            }
        ],
        "3": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
                "modified_lines": [
                    818,
                    819,
                    820,
                    821,
                    822,
                    823,
                    824,
                    825,
                    826,
                    827
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/util/MathArrays.java b/src/main/java/org/apache/commons/math3/util/MathArrays.java\nindex 8f83d96..325fd94 100644\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n@@ -818,10 +818,7 @@ public class MathArrays {\n             throw new DimensionMismatchException(len, b.length);\n         }\n \n-        if (len == 1) {\n             // Revert to scalar multiplication.\n-            return a[0] * b[0];\n-        }\n \n         final double[] prodHigh = new double[len];\n         double prodLowSum = 0;\n"
            }
        ],
        "7": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
                "modified_lines": [
                    343,
                    344,
                    345,
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    362,
                    363,
                    364,
                    365,
                    366,
                    367,
                    368,
                    369,
                    370,
                    371,
                    372,
                    373,
                    374
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex 6e0237f..f24f87c 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -343,10 +343,8 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n                 final double[] eventY = interpolator.getInterpolatedState().clone();\n \n                 // advance all event states to current time\n-                for (final EventState state : eventsStates) {\n-                    state.stepAccepted(eventT, eventY);\n-                    isLastStep = isLastStep || state.stop();\n-                }\n+                currentEvent.stepAccepted(eventT, eventY);\n+                isLastStep = currentEvent.stop();\n \n                 // handle the first part of the step, up to the event\n                 for (final StepHandler handler : stepHandlers) {\n@@ -356,19 +354,22 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n                 if (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n+                    for (final EventState remaining : occuringEvents) {\n+                        remaining.stepAccepted(eventT, eventY);\n+                    }\n                     return eventT;\n                 }\n \n-                boolean needReset = false;\n-                for (final EventState state : eventsStates) {\n-                    needReset =  needReset || state.reset(eventT, eventY);\n-                }\n+                boolean needReset = currentEvent.reset(eventT, eventY);\n                 if (needReset) {\n                     // some event handler has triggered changes that\n                     // invalidate the derivatives, we need to recompute them\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n+                    for (final EventState remaining : occuringEvents) {\n+                        remaining.stepAccepted(eventT, eventY);\n+                    }\n                     return eventT;\n                 }\n \n"
            }
        ],
        "19": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
                "modified_lines": [
                    537,
                    538,
                    539,
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    551,
                    552,
                    553,
                    554,
                    555
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex f6a4f28..51d1c64 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,19 +537,6 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n-                for (int i = 0; i < lB.length; i++) {\n-                    if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {\n-                        final double max = Double.MAX_VALUE + boundaries[0][i];\n-                        final NumberIsTooLargeException e\n-                            = new NumberIsTooLargeException(boundaries[1][i],\n-                                                            max,\n-                                                            true);\n-                        e.getContext().addMessage(LocalizedFormats.OVERFLOW);\n-                        e.getContext().addMessage(LocalizedFormats.INDEX, i);\n-\n-                        throw e;\n-                    }\n-                }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.\n"
            }
        ],
        "16": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/util/FastMath.java",
                "modified_lines": [
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    392,
                    393,
                    394,
                    395,
                    396,
                    397,
                    398,
                    399,
                    400,
                    401,
                    402,
                    403,
                    404,
                    405,
                    406,
                    407,
                    408,
                    409,
                    410,
                    411,
                    412,
                    462,
                    463,
                    464,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    471,
                    472,
                    473,
                    474,
                    475,
                    476,
                    477,
                    478,
                    479,
                    480,
                    481,
                    482
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java\nindex fd1ce2d..3778120 100644\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n@@ -79,7 +79,6 @@ import java.io.PrintStream;\n  */\n public class FastMath {\n     /** StrictMath.log(Double.MAX_VALUE): {@value} */\n-    private static final double LOG_MAX_VALUE = StrictMath.log(Double.MAX_VALUE);\n \n     /** Archimede's constant PI, ratio of circle circumference to diameter. */\n     public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;\n@@ -392,21 +391,12 @@ public class FastMath {\n       // exp(-z) can be ignored in comparison with exp(z)\n \n       if (x > 20) {\n-          if (x >= LOG_MAX_VALUE) {\n               // Avoid overflow (MATH-905).\n-              final double t = exp(0.5 * x);\n-              return (0.5 * t) * t;\n-          } else {\n               return 0.5 * exp(x);\n           }\n-      } else if (x < -20) {\n-          if (x <= -LOG_MAX_VALUE) {\n+      if (x < -20) {\n               // Avoid overflow (MATH-905).\n-              final double t = exp(-0.5 * x);\n-              return (0.5 * t) * t;\n-          } else {\n               return 0.5 * exp(-x);\n-          }\n       }\n \n       final double hiPrec[] = new double[2];\n@@ -462,21 +452,12 @@ public class FastMath {\n       // exp(-z) can be ignored in comparison with exp(z)\n \n       if (x > 20) {\n-          if (x >= LOG_MAX_VALUE) {\n               // Avoid overflow (MATH-905).\n-              final double t = exp(0.5 * x);\n-              return (0.5 * t) * t;\n-          } else {\n               return 0.5 * exp(x);\n           }\n-      } else if (x < -20) {\n-          if (x <= -LOG_MAX_VALUE) {\n+      if (x < -20) {\n               // Avoid overflow (MATH-905).\n-              final double t = exp(-0.5 * x);\n-              return (-0.5 * t) * t;\n-          } else {\n               return -0.5 * exp(-x);\n-          }\n       }\n \n       if (x == 0) {\n"
            }
        ],
        "31": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
                "modified_lines": [
                    131,
                    132,
                    133,
                    134,
                    135,
                    136,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex 253f3c5..b881bb2 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -131,6 +131,8 @@ public abstract class ContinuedFraction {\n \n         int n = 1;\n         double dPrev = 0.0;\n+        double p0 = 1.0;\n+        double q1 = 1.0;\n         double cPrev = hPrev;\n         double hN = hPrev;\n \n@@ -138,18 +140,34 @@ public abstract class ContinuedFraction {\n             final double a = getA(n, x);\n             final double b = getB(n, x);\n \n-            double dN = a + b * dPrev;\n-            if (Precision.equals(dN, 0.0, small)) {\n-                dN = small;\n-            }\n-            double cN = a + b / cPrev;\n-            if (Precision.equals(cN, 0.0, small)) {\n-                cN = small;\n+            double cN = a * hPrev + b * p0;\n+            double q2 = a * q1 + b * dPrev;\n+            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+                double scaleFactor = 1d;\n+                double lastScaleFactor = 1d;\n+                final int maxPower = 5;\n+                final double scale = FastMath.max(a,b);\n+                if (scale <= 0) {  // Can't scale\n+                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+                }\n+                for (int i = 0; i < maxPower; i++) {\n+                    lastScaleFactor = scaleFactor;\n+                    scaleFactor *= scale;\n+                    if (a != 0.0 && a > b) {\n+                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n+                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n+                    } else if (b != 0) {\n+                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n+                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n+                    }\n+                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n+                        break;\n+                    }\n+                }\n             }\n \n-            dN = 1 / dN;\n-            final double deltaN = cN * dN;\n-            hN = hPrev * deltaN;\n+            final double deltaN = cN / q2 / cPrev;\n+            hN = cPrev * deltaN;\n \n             if (Double.isInfinite(hN)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n@@ -164,9 +182,11 @@ public abstract class ContinuedFraction {\n                 break;\n             }\n \n-            dPrev = dN;\n-            cPrev = cN;\n-            hPrev = hN;\n+            dPrev = q1;\n+            cPrev = cN / q2;\n+            p0 = hPrev;\n+            hPrev = cN;\n+            q1 = q2;\n             n++;\n         }\n \n"
            }
        ],
        "71": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
                "modified_lines": [
                    297,
                    298,
                    299,
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex e03be9e..0840ac1 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -297,10 +297,6 @@ public abstract class EmbeddedRungeKuttaIntegrator\n                   // it is so small (much probably exactly 0 due to limited accuracy)\n                   // that the code above would fail handling it.\n                   // So we set up an artificial 0 size step by copying states\n-                  interpolator.storeTime(stepStart);\n-                  System.arraycopy(y, 0, yTmp, 0, y0.length);\n-                  hNew     = 0;\n-                  stepSize = 0;\n                   loop     = false;\n               } else {\n                   // reject the step to match exactly the next switch time\n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java",
                "modified_lines": [
                    177,
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\nindex b61b0b1..255b1f4 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/RungeKuttaIntegrator.java\n@@ -177,9 +177,6 @@ public abstract class RungeKuttaIntegrator extends AbstractIntegrator {\n                 // it is so small (much probably exactly 0 due to limited accuracy)\n                 // that the code above would fail handling it.\n                 // So we set up an artificial 0 size step by copying states\n-                interpolator.storeTime(stepStart);\n-                System.arraycopy(y, 0, yTmp, 0, y0.length);\n-                stepSize = 0;\n                 loop     = false;\n             } else {\n                 // reject the step to match exactly the next switch time\n"
            }
        ],
        "79": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/util/MathUtils.java",
                "modified_lines": [
                    1621,
                    1622,
                    1623,
                    1624,
                    1625,
                    1626,
                    1627,
                    1628,
                    1629
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex ad77a56..46368dc 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -1621,9 +1621,9 @@ public final class MathUtils {\n      * @return the L<sub>2</sub> distance between the two points\n      */\n     public static double distance(int[] p1, int[] p2) {\n-      double sum = 0;\n+      int sum = 0;\n       for (int i = 0; i < p1.length; i++) {\n-          final double dp = p1[i] - p2[i];\n+          final int dp = p1[i] - p2[i];\n           sum += dp * dp;\n       }\n       return Math.sqrt(sum);\n"
            }
        ],
        "15": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/util/FastMath.java",
                "modified_lines": [
                    310,
                    311,
                    312,
                    313,
                    314,
                    315,
                    316,
                    1539,
                    1540,
                    1541,
                    1542,
                    1543,
                    1544,
                    1545
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/util/FastMath.java b/src/main/java/org/apache/commons/math3/util/FastMath.java\nindex 9dc84c6..d571325 100644\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n@@ -310,7 +310,6 @@ public class FastMath {\n     /** 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite */\n     private static final double TWO_POWER_52 = 4503599627370496.0;\n     /** 2^53 - double numbers this large must be even. */\n-    private static final double TWO_POWER_53 = 2 * TWO_POWER_52;\n \n     /** Constant: {@value}. */\n     private static final double F_1_3 = 1d / 3d;\n@@ -1539,7 +1538,7 @@ public class FastMath {\n         /* Handle special case x<0 */\n         if (x < 0) {\n             // y is an even integer in this case\n-            if (y >= TWO_POWER_53 || y <= -TWO_POWER_53) {\n+            if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {\n                 return pow(-x, y);\n             }\n \n"
            }
        ],
        "64": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
                "modified_lines": [
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    262,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    318,
                    319,
                    320,
                    321,
                    322,
                    323,
                    324,
                    326,
                    327,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    348,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    355,
                    356,
                    357,
                    358,
                    359,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    427,
                    428,
                    429,
                    430,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    439,
                    440,
                    441,
                    446,
                    447,
                    448,
                    449,
                    450,
                    451,
                    452,
                    453,
                    454,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\nindex b41456e..5091493 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\n@@ -255,8 +255,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n         double[] diag    = new double[cols];\n         double[] oldX    = new double[cols];\n         double[] oldRes  = new double[rows];\n-        double[] oldObj  = new double[rows];\n-        double[] qtf     = new double[rows];\n         double[] work1   = new double[cols];\n         double[] work2   = new double[cols];\n         double[] work3   = new double[cols];\n@@ -269,9 +267,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n         boolean firstIteration = true;\n         VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n         while (true) {\n-            for (int i=0;i<rows;i++) {\n-                qtf[i]=residuals[i];\n-            }\n             incrementIterationsCounter();\n \n             // compute the Q.R. decomposition of the jacobian matrix\n@@ -280,7 +275,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n             qrDecomposition();\n \n             // compute Qt.res\n-            qTy(qtf);\n+            qTy(residuals);\n             // now we don't need Q anymore,\n             // so let jacobian contain the R matrix with its diagonal elements\n             for (int k = 0; k < solvedCols; ++k) {\n@@ -318,7 +313,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                     if (s != 0) {\n                         double sum = 0;\n                         for (int i = 0; i <= j; ++i) {\n-                            sum += jacobian[i][pj] * qtf[i];\n+                            sum += jacobian[i][pj] * residuals[i];\n                         }\n                         maxCosine = Math.max(maxCosine, Math.abs(sum) / (s * cost));\n                     }\n@@ -326,8 +321,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n             }\n             if (maxCosine <= orthoTolerance) {\n                 // convergence has been reached\n-            \tupdateResidualsAndCost();\n-            \tcurrent = new VectorialPointValuePair(point, objective);\n                 return current;\n             }\n \n@@ -348,12 +341,9 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                 double[] tmpVec = residuals;\n                 residuals = oldRes;\n                 oldRes    = tmpVec;\n-                tmpVec    = objective;\n-                objective = oldObj;\n-                oldObj    = tmpVec;\n \n                 // determine the Levenberg-Marquardt parameter\n-                determineLMParameter(qtf, delta, diag, work1, work2, work3);\n+                determineLMParameter(oldRes, delta, diag, work1, work2, work3);\n \n                 // compute the new point and the norm of the evolution direction\n                 double lmNorm = 0;\n@@ -372,6 +362,7 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n \n                 // evaluate the function at x + p and calculate its norm\n                 updateResidualsAndCost();\n+                current = new VectorialPointValuePair(point, objective);\n \n                 // compute the scaled actual reduction\n                 double actRed = -1.0;\n@@ -427,15 +418,9 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                         xNorm    += xK * xK;\n                     }\n                     xNorm = Math.sqrt(xNorm);\n-                    current = new VectorialPointValuePair(point, objective);\n \n                     // tests for convergence.\n-                    if (checker != null) {\n                     // we use the vectorial convergence checker\n-                    \tif (checker.converged(getIterations(), previous, current)) {\n-                    \t\treturn current;\n-                    \t}\n-                    }\n                 } else {\n                     // failed iteration, reset the previous values\n                     cost = previousCost;\n@@ -446,9 +431,6 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                     tmpVec    = residuals;\n                     residuals = oldRes;\n                     oldRes    = tmpVec;\n-                    tmpVec    = objective;\n-                    objective = oldObj;\n-                    oldObj    = tmpVec;\n                 }\n                 if (checker==null) {\n                 \tif (((Math.abs(actRed) <= costRelativeTolerance) &&\n@@ -457,6 +439,10 @@ public class LevenbergMarquardtOptimizer extends AbstractLeastSquaresOptimizer {\n                        (delta <= parRelativeTolerance * xNorm)) {\n                        return current;\n                    }\n+                } else {\n+                    if (checker.converged(getIterations(), previous, current)) {\n+                        return current;\n+                    }\n                 }\n                 // tests for termination and stringent tolerances\n                 // (2.2204e-16 is the machine epsilon for IEEE754)\n"
            }
        ],
        "75": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/stat/Frequency.java",
                "modified_lines": [
                    300,
                    301,
                    302,
                    303,
                    304,
                    305,
                    306
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex 68c8bf2..c45d728 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,7 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getPct((Comparable<?>) v);\n+        return getCumPct((Comparable<?>) v);\n     }\n \n     /**\n"
            }
        ],
        "45": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java",
                "modified_lines": [
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    57
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\nindex f05c878..174eda6 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n@@ -47,11 +47,6 @@ public class OpenMapRealMatrix extends AbstractRealMatrix\n      */\n     public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n         super(rowDimension, columnDimension);\n-        long lRow = (long) rowDimension;\n-        long lCol = (long) columnDimension;\n-        if (lRow * lCol >= (long) Integer.MAX_VALUE) {\n-            throw new NumberIsTooLargeException(lRow * lCol, Integer.MAX_VALUE, false);\n-        }\n         this.rows = rowDimension;\n         this.columns = columnDimension;\n         this.entries = new OpenIntToDoubleHashMap(0.0);\n"
            }
        ],
        "24": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
                "modified_lines": [
                    227,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\nindex cff5bfd..b6ce68e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\n@@ -227,7 +227,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {\n \n                 if (checker != null) {\n                     if (checker.converged(iter, previous, current)) {\n-                        return best(current, previous, isMinim);\n+                        return current;\n                     }\n                 }\n \n@@ -264,7 +264,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {\n                     }\n                 }\n             } else { // Default termination (Brent's criterion).\n-                return best(current, previous, isMinim);\n+                return current;\n             }\n             ++iter;\n         }\n"
            }
        ],
        "13": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java",
                "modified_lines": [
                    559,
                    560,
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    572,
                    573,
                    574
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 982e559..99d86e9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,16 +559,7 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-        if (m instanceof DiagonalMatrix) {\n-            final int dim = m.getRowDimension();\n-            final RealMatrix sqrtM = new DiagonalMatrix(dim);\n-            for (int i = 0; i < dim; i++) {\n-               sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n-            }\n-            return sqrtM;\n-        } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-        }\n     }\n }\n"
            }
        ],
        "63": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/util/MathUtils.java",
                "modified_lines": [
                    414,
                    415,
                    416,
                    417,
                    418,
                    419,
                    420
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex ab0fe33..1361849 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -414,7 +414,7 @@ public final class MathUtils {\n      * @return {@code true} if the values are equal.\n      */\n     public static boolean equals(double x, double y) {\n-        return equals(x, y, 1);\n+        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n     }\n \n     /**\n"
            }
        ],
        "66": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java",
                "modified_lines": [
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233,
                    234
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\nindex 46c4afa..9265415 100644\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/BrentOptimizer.java\n@@ -41,10 +41,10 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n      * Construct a solver.\n      */\n     public BrentOptimizer() {\n-        setMaxEvaluations(1000);\n+        setMaxEvaluations(Integer.MAX_VALUE);\n         setMaximalIterationCount(100);\n-        setAbsoluteAccuracy(1e-11);\n-        setRelativeAccuracy(1e-9);\n+        setAbsoluteAccuracy(1E-10);\n+        setRelativeAccuracy(1.0e-14);\n     }\n \n     /**\n@@ -54,10 +54,17 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n      */\n     protected double doOptimize()\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n+        throw new UnsupportedOperationException();\n+    }\n+    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max, final double startValue) throws MaxIterationsExceededException, FunctionEvaluationException {\n+        clearResult();\n         return localMin(getGoalType() == GoalType.MINIMIZE,\n-                        getMin(), getStartValue(), getMax(),\n+                        f, goalType, min, startValue, max,\n                         getRelativeAccuracy(), getAbsoluteAccuracy());\n     }\n+    public double optimize(final UnivariateRealFunction f, final GoalType goalType, final double min, final double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n+        return optimize(f, goalType, min, max, min + GOLDEN_SECTION * (max - min));\n+    }\n \n     /**\n      * Find the minimum of the function within the interval {@code (lo, hi)}.\n@@ -84,6 +91,8 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n      * the function.\n      */\n     private double localMin(boolean isMinim,\n+                            UnivariateRealFunction f,\n+                            GoalType goalType,\n                             double lo, double mid, double hi,\n                             double eps, double t)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n@@ -107,14 +116,15 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n         double w = x;\n         double d = 0;\n         double e = 0;\n-        double fx = computeObjectiveValue(x);\n-        if (!isMinim) {\n+        double fx = computeObjectiveValue(f, x);\n+        if (goalType == GoalType.MAXIMIZE) {\n             fx = -fx;\n         }\n         double fv = fx;\n         double fw = fx;\n \n-        while (true) {\n+        int count = 0;\n+        while (count < maximalIterationCount) {\n             double m = 0.5 * (a + b);\n             final double tol1 = eps * Math.abs(x) + t;\n             final double tol2 = 2 * tol1;\n@@ -187,8 +197,8 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n                     u = x + d;\n                 }\n \n-                double fu = computeObjectiveValue(u);\n-                if (!isMinim) {\n+                double fu = computeObjectiveValue(f, u);\n+                if (goalType == GoalType.MAXIMIZE) {\n                     fu = -fu;\n                 }\n \n@@ -225,10 +235,11 @@ public class BrentOptimizer extends AbstractUnivariateRealOptimizer {\n                     }\n                 }\n             } else { // termination\n-                setFunctionValue(isMinim ? fx : -fx);\n+                setResult(x, (goalType == GoalType.MAXIMIZE) ? -fx : fx, count);\n                 return x;\n             }\n-            incrementIterationsCounter();\n+            ++count;\n         }\n+        throw new MaxIterationsExceededException(maximalIterationCount);\n     }\n }\n"
            }
        ],
        "62": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
                "modified_lines": [
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\nindex 952e565..1200544 100644\n--- a/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java\n@@ -143,7 +143,7 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti\n                                                  final GoalType goal,\n                                                  final double min, final double max)\n         throws FunctionEvaluationException {\n-        return optimize(f, goal, min, max, min + 0.5 * (max - min));\n+        return optimize(f, goal, min, max, 0);\n     }\n \n     /** {@inheritDoc} */\n@@ -157,8 +157,9 @@ public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFuncti\n         // Multi-start loop.\n         for (int i = 0; i < starts; ++i) {\n             try {\n-                final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);\n-                optima[i] = optimizer.optimize(f, goal, min, max, s);\n+                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n+                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n+                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n             } catch (FunctionEvaluationException fee) {\n                 optima[i] = null;\n             } catch (ConvergenceException ce) {\n"
            }
        ],
        "17": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/dfp/Dfp.java",
                "modified_lines": [
                    1600,
                    1601,
                    1602,
                    1603,
                    1604,
                    1605,
                    1606,
                    1607,
                    1608,
                    1609,
                    1610
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 3a91982..0f78330 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,11 +1600,7 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-        if (x >= 0 && x < RADIX) {\n             return multiplyFast(x);\n-        } else {\n-            return multiply(newInstance(x));\n-        }\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n"
            }
        ],
        "85": [
            {
                "modified_file": "src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java",
                "modified_lines": [
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex e6398f6..bf3e4bf 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,7 +195,7 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb > 0.0 ) {\n+        if (fa * fb >= 0.0 ) {\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n"
            }
        ],
        "51": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
                "modified_lines": [
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex b3a23a1..e258c68 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -182,19 +182,10 @@ public abstract class BaseSecantSolver\n                 case PEGASUS:\n                     f0 *= f1 / (f1 + fx);\n                     break;\n-                case REGULA_FALSI:\n-                    if (x == x1) {\n-                        final double delta = FastMath.max(rtol * FastMath.abs(x1),\n-                                                          atol);\n                         // Update formula cannot make any progress: Update the\n                         // search interval.\n-                        x0 = 0.5 * (x0 + x1 - delta);\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n-                    break;\n                 default:\n                     // Should never happen.\n-                    throw new MathInternalError();\n                 }\n             }\n             // Update from [x0, x1] to [x0, x].\n"
            }
        ],
        "2": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
                "modified_lines": [
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 81e180c..2769127 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,7 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());\n+        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n     }\n \n     /**\n"
            }
        ],
        "44": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java",
                "modified_lines": [
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    338,
                    342,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348,
                    349,
                    350
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\nindex 8f315e3..544124f 100644\n--- a/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/AbstractIntegrator.java\n@@ -277,6 +277,7 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n \n             double previousT = interpolator.getGlobalPreviousTime();\n             final double currentT = interpolator.getGlobalCurrentTime();\n+            resetOccurred = false;\n \n             // initialize the events states if needed\n             if (! statesInitialized) {\n@@ -330,9 +331,6 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n                 if (isLastStep) {\n                     // the event asked to stop integration\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n-                    for (final EventState remaining : occuringEvents) {\n-                        remaining.stepAccepted(eventT, eventY);\n-                    }\n                     return eventT;\n                 }\n \n@@ -342,9 +340,6 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n                     System.arraycopy(eventY, 0, y, 0, y.length);\n                     computeDerivatives(eventT, y, yDot);\n                     resetOccurred = true;\n-                    for (final EventState remaining : occuringEvents) {\n-                        remaining.stepAccepted(eventT, eventY);\n-                    }\n                     return eventT;\n                 }\n \n"
            }
        ],
        "83": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
                "modified_lines": [
                    289,
                    290,
                    291,
                    292,
                    293,
                    294,
                    295,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex b387767..0cf01af 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -289,7 +289,7 @@ class SimplexTableau implements Serializable {\n      */\n     private Integer getBasicRow(final int col, boolean ignoreObjectiveRows) {\n         Integer row = null;\n-        int start = ignoreObjectiveRows ? getNumObjectiveFunctions() : 0;\n+        int start = getNumObjectiveFunctions();\n         for (int i = start; i < getHeight(); i++) {\n             if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n                 row = i;\n@@ -338,11 +338,11 @@ class SimplexTableau implements Serializable {\n      */\n     protected RealPointValuePair getSolution() {\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());\n+      Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n       Set<Integer> basicRows = new HashSet<Integer>();\n       for (int i = 0; i < coefficients.length; i++) {\n-          Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);\n+          Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n           if (basicRows.contains(basicRow)) {\n               // if multiple variables can take a given value \n               // then we choose the first and set the rest equal to 0\n"
            }
        ],
        "80": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
                "modified_lines": [
                    1132,
                    1133,
                    1134,
                    1135,
                    1136,
                    1137,
                    1138
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 9d1b797..3fc328d 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1132,7 +1132,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n-            int j = 4 * (n - 1);\n+            int j = 4 * n - 1;\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];\n"
            }
        ],
        "89": [
            {
                "modified_file": "src/java/org/apache/commons/math/stat/Frequency.java",
                "modified_lines": [
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/stat/Frequency.java b/src/java/org/apache/commons/math/stat/Frequency.java\nindex 70d622d..c8deca3 100644\n--- a/src/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/java/org/apache/commons/math/stat/Frequency.java\n@@ -107,11 +107,7 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public void addValue(Object v) {\n-        if (v instanceof Comparable<?>){\n             addValue((Comparable<?>) v);            \n-        } else {\n-            throw new IllegalArgumentException(\"Object must implement Comparable\");\n-        }\n     }\n     \n     /**\n"
            }
        ],
        "9": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java",
                "modified_lines": [
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 7c9a28f..674c4aa 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -84,8 +84,7 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n      * @return a new instance, with reversed direction\n      */\n     public Line revert() {\n-        final Line reverted = new Line(this);\n-        reverted.direction = reverted.direction.negate();\n+        final Line reverted = new Line(zero, zero.subtract(direction));\n         return reverted;\n     }\n \n"
            }
        ],
        "5": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/complex/Complex.java",
                "modified_lines": [
                    302,
                    303,
                    304,
                    305,
                    306,
                    307,
                    308
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex ac8185b..22b23f2 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -302,7 +302,7 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return INF;\n+            return NaN;\n         }\n \n         if (isInfinite) {\n"
            }
        ],
        "101": [
            {
                "modified_file": "src/java/org/apache/commons/math/complex/ComplexFormat.java",
                "modified_lines": [
                    374,
                    375,
                    376,
                    377,
                    378,
                    379,
                    380,
                    381
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/complex/ComplexFormat.java b/src/java/org/apache/commons/math/complex/ComplexFormat.java\nindex 0757d9b..b404bc4 100644\n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n@@ -374,8 +374,7 @@ public class ComplexFormat extends Format implements Serializable {\n         int n = getImaginaryCharacter().length();\n         startIndex = pos.getIndex();\n         int endIndex = startIndex + n;\n-        if ((startIndex >= source.length()) ||\n-            (endIndex > source.length()) ||\n+        if (\n             source.substring(startIndex, endIndex).compareTo(\n             getImaginaryCharacter()) != 0) {\n             // set index back to initial, error index should be the start index\n"
            }
        ],
        "78": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
                "modified_lines": [
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex ff09646..5006065 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -188,7 +188,6 @@ public class EventState {\n                 if (g0Positive ^ (gb >= 0)) {\n                     // there is a sign change: an event is expected during this step\n \n-                    if (ga * gb > 0) {\n                         // this is a corner case:\n                         // - there was an event near ta,\n                         // - there is another event between ta and tb\n@@ -196,17 +195,7 @@ public class EventState {\n                         // this implies that the real sign of ga is the same as gb, so we need to slightly\n                         // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n                         // about bracketing\n-                        final double epsilon = (forward ? 0.25 : -0.25) * convergence;\n-                        for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {\n-                            ta += epsilon;\n-                            interpolator.setInterpolatedTime(ta);\n-                            ga = handler.g(ta, interpolator.getInterpolatedState());\n-                        }\n-                        if (ga * gb > 0) {\n                             // this should never happen\n-                            throw MathRuntimeException.createInternalError(null);\n-                        }\n-                    }\n                          \n                     // variation direction, with respect to the integration direction\n                     increasing = gb >= ga;\n"
            }
        ],
        "95": [
            {
                "modified_file": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
                "modified_lines": [
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex 59aeb07..e19e97a 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -141,12 +141,10 @@ public class FDistributionImpl\n      * @return initial domain value\n      */\n     protected double getInitialDomain(double p) {\n-        double ret = 1.0;\n+        double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-        if (d > 2.0) {\n             // use mean\n             ret = d / (d - 2.0);\n-        }\n         return ret;\n     }\n     \n"
            }
        ],
        "28": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java",
                "modified_lines": [
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex dec310b..a84438d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -116,7 +116,6 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n             // there's a degeneracy as indicated by a tie in the minimum ratio test\n \n             // 1. check if there's an artificial variable that can be forced out of the basis\n-            if (tableau.getNumArtificialVariables() > 0) {\n                 for (Integer row : minRatioPositions) {\n                     for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                         int column = i + tableau.getArtificialVariableOffset();\n@@ -126,7 +125,6 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n                         }\n                     }\n                 }\n-            }\n \n             // 2. apply Bland's rule to prevent cycling:\n             //    take the row for which the corresponding basic variable has the smallest index\n@@ -137,7 +135,6 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n             // Additional heuristic: if we did not get a solution after half of maxIterations\n             //                       revert to the simple case of just returning the top-most row\n             // This heuristic is based on empirical data gathered while investigating MATH-828.\n-            if (getIterations() < getMaxIterations() / 2) {\n                 Integer minRow = null;\n                 int minIndex = tableau.getWidth();\n                 for (Integer row : minRatioPositions) {\n@@ -152,7 +149,6 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n                     }\n                 }\n                 return minRow;\n-            }\n         }\n         return minRatioPositions.get(0);\n     }\n"
            }
        ],
        "82": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
                "modified_lines": [
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 60a1b3a..8309d7b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,7 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) > 0) {\n+            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;\n"
            }
        ],
        "103": [
            {
                "modified_file": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
                "modified_lines": [
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex a08eac5..02810e1 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,18 +106,8 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-        try {\n             return 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0.0d;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1.0d;\n-            } else {\n-                throw ex;\n-            }\n-        }\n     }\n     \n     /**\n"
            }
        ],
        "61": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java",
                "modified_lines": [
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\nindex 0a81233..148daad 100644\n--- a/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/PoissonDistributionImpl.java\n@@ -19,7 +19,7 @@ package org.apache.commons.math.distribution;\n import java.io.Serializable;\n \n import org.apache.commons.math.MathException;\n-import org.apache.commons.math.exception.NotStrictlyPositiveException;\n+import org.apache.commons.math.MathRuntimeException;\n import org.apache.commons.math.exception.util.LocalizedFormats;\n import org.apache.commons.math.special.Gamma;\n import org.apache.commons.math.util.MathUtils;\n@@ -91,7 +91,7 @@ public class PoissonDistributionImpl extends AbstractIntegerDistribution\n      */\n     public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {\n         if (p <= 0) {\n-            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, p);\n+            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);\n         }\n         mean = p;\n         normal = new NormalDistributionImpl(p, FastMath.sqrt(p));\n"
            }
        ],
        "21": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
                "modified_lines": [
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    123,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    131,
                    132,
                    133,
                    134
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\nindex aba7b98..04488e5 100644\n--- a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n@@ -66,6 +66,7 @@ public class RectangularCholeskyDecomposition {\n         final double[][] c = matrix.getData();\n         final double[][] b = new double[order][order];\n \n+        int[] swap  = new int[order];\n         int[] index = new int[order];\n         for (int i = 0; i < order; ++i) {\n             index[i] = i;\n@@ -75,24 +76,21 @@ public class RectangularCholeskyDecomposition {\n         for (boolean loop = true; loop;) {\n \n             // find maximal diagonal element\n-            int swapR = r;\n+            swap[r] = r;\n             for (int i = r + 1; i < order; ++i) {\n                 int ii  = index[i];\n-                int isr = index[swapR];\n-                if (c[ii][ii] > c[isr][isr]) {\n-                    swapR = i;\n+                int isi = index[swap[i]];\n+                if (c[ii][ii] > c[isi][isi]) {\n+                    swap[r] = i;\n                 }\n             }\n \n \n             // swap elements\n-            if (swapR != r) {\n-                final int tmpIndex    = index[r];\n-                index[r]              = index[swapR];\n-                index[swapR]          = tmpIndex;\n-                final double[] tmpRow = b[r];\n-                b[r]                  = b[swapR];\n-                b[swapR]              = tmpRow;\n+            if (swap[r] != r) {\n+                int tmp = index[r];\n+                index[r] = index[swap[r]];\n+                index[swap[r]] = tmp;\n             }\n \n             // check diagonal element\n@@ -123,12 +121,11 @@ public class RectangularCholeskyDecomposition {\n                 final double sqrt = FastMath.sqrt(c[ir][ir]);\n                 b[r][r] = sqrt;\n                 final double inverse  = 1 / sqrt;\n-                final double inverse2 = 1 / c[ir][ir];\n                 for (int i = r + 1; i < order; ++i) {\n                     final int ii = index[i];\n                     final double e = inverse * c[ii][ir];\n                     b[i][r] = e;\n-                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;\n+                    c[ii][ii] -= e * e;\n                     for (int j = r + 1; j < i; ++j) {\n                         final int ij = index[j];\n                         final double f = c[ii][ij] - e * b[j][r];\n"
            }
        ],
        "48": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
                "modified_lines": [
                    186,
                    187,
                    188,
                    189,
                    190,
                    191,
                    192,
                    193,
                    194
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 0347525..8a667da 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,9 +186,6 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n-                    if (x == x1) {\n-                        throw new ConvergenceException();\n-                    }\n                     break;\n                 default:\n                     // Should never happen.\n"
            }
        ],
        "87": [
            {
                "modified_file": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
                "modified_lines": [
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279,
                    280,
                    281
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex b0d114e..0ab790c 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -272,10 +272,12 @@ class SimplexTableau implements Serializable {\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) {\n+            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n+                if (row == null) {\n                 row = i;\n-            } else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n+                } else {\n                 return null;\n+                }\n             }\n         }\n         return row;\n"
            }
        ],
        "49": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
                "modified_lines": [
                    342,
                    343,
                    344,
                    345,
                    346,
                    347,
                    348,
                    355,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    367,
                    368,
                    369,
                    370,
                    371,
                    372,
                    373,
                    380,
                    381,
                    382,
                    383,
                    384,
                    385,
                    386
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\nindex 13ebfd2..5db4884 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java\n@@ -342,7 +342,7 @@ public class OpenMapRealVector extends AbstractRealVector\n     public OpenMapRealVector ebeDivide(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n-        Iterator iter = entries.iterator();\n+        Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n@@ -355,7 +355,7 @@ public class OpenMapRealVector extends AbstractRealVector\n     public OpenMapRealVector ebeDivide(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n-        Iterator iter = entries.iterator();\n+        Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() / v[iter.key()]);\n@@ -367,7 +367,7 @@ public class OpenMapRealVector extends AbstractRealVector\n     public OpenMapRealVector ebeMultiply(RealVector v) {\n         checkVectorDimensions(v.getDimension());\n         OpenMapRealVector res = new OpenMapRealVector(this);\n-        Iterator iter = entries.iterator();\n+        Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));\n@@ -380,7 +380,7 @@ public class OpenMapRealVector extends AbstractRealVector\n     public OpenMapRealVector ebeMultiply(double[] v) {\n         checkVectorDimensions(v.length);\n         OpenMapRealVector res = new OpenMapRealVector(this);\n-        Iterator iter = entries.iterator();\n+        Iterator iter = res.entries.iterator();\n         while (iter.hasNext()) {\n             iter.advance();\n             res.setEntry(iter.key(), iter.value() * v[iter.key()]);\n"
            }
        ],
        "97": [
            {
                "modified_file": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
                "modified_lines": [
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143,
                    144,
                    145,
                    146,
                    147,
                    148,
                    149,
                    150,
                    151,
                    152,
                    153,
                    154,
                    155,
                    156,
                    157,
                    158,
                    159,
                    160,
                    161,
                    162,
                    163,
                    164,
                    165
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 57f64a9..766d87e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -135,31 +135,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n         \n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign > 0) {\n+        if (sign >= 0) {\n             // check if either value is close to a zero\n-            if (Math.abs(yMin) <= functionValueAccuracy) {\n-                setResult(min, 0);\n-                ret = min;\n-            } else if (Math.abs(yMax) <= functionValueAccuracy) {\n-                setResult(max, 0);\n-                ret = max;\n-            } else {\n                 // neither value is close to zero and min and max do not bracket root.\n                 throw new IllegalArgumentException\n                 (\"Function values at endpoints do not have different signs.\" +\n                         \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                         \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-            }\n-        } else if (sign < 0){\n+        } else {\n             // solve using only the first endpoint as initial guess\n             ret = solve(min, yMin, max, yMax, min, yMin);\n-        } else {\n             // either min or max is a root\n-            if (yMin == 0.0) {\n-                ret = min;\n-            } else {\n-                ret = max;\n-            }\n         }\n \n         return ret;\n"
            }
        ],
        "100": [
            {
                "modified_file": "src/java/org/apache/commons/math/estimation/AbstractEstimator.java",
                "modified_lines": [
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/estimation/AbstractEstimator.java b/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\nindex 8e5fe1a..ea5083d 100644\n--- a/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n+++ b/src/java/org/apache/commons/math/estimation/AbstractEstimator.java\n@@ -163,7 +163,7 @@ public abstract class AbstractEstimator implements Estimator {\n \n         // compute transpose(J).J, avoiding building big intermediate matrices\n         final int rows = problem.getMeasurements().length;\n-        final int cols = problem.getUnboundParameters().length;\n+        final int cols = problem.getAllParameters().length;\n         final int max  = cols * rows;\n         double[][] jTj = new double[cols][cols];\n         for (int i = 0; i < cols; ++i) {\n@@ -199,12 +199,12 @@ public abstract class AbstractEstimator implements Estimator {\n     public double[] guessParametersErrors(EstimationProblem problem)\n       throws EstimationException {\n         int m = problem.getMeasurements().length;\n-        int p = problem.getUnboundParameters().length;\n+        int p = problem.getAllParameters().length;\n         if (m <= p) {\n             throw new EstimationException(\"no degrees of freedom ({0} measurements, {1} parameters)\",\n                                           new Object[] { new Integer(m), new Integer(p)});\n         }\n-        double[] errors = new double[problem.getUnboundParameters().length];\n+        double[] errors = new double[problem.getAllParameters().length];\n         final double c = Math.sqrt(getChiSquare(problem) / (m - p));\n         double[][] covar = getCovariances(problem);\n         for (int i = 0; i < errors.length; ++i) {\n"
            }
        ],
        "70": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java",
                "modified_lines": [
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 180caef..3f66927 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,7 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(f, min, max);\n+        return solve(min, max);\n     }\n \n     /** {@inheritDoc} */\n"
            }
        ],
        "58": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
                "modified_lines": [
                    118,
                    119,
                    120,
                    121,
                    122,
                    123,
                    124
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex e1b54f4..ae7ac39 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,7 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(guess);\n+        return fit(new Gaussian.Parametric(), guess);\n     }\n \n     /**\n"
            }
        ],
        "30": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java",
                "modified_lines": [
                    170,
                    171,
                    172,
                    173,
                    174,
                    175,
                    176
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex a161737..ce694ce 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -170,7 +170,7 @@ public class MannWhitneyUTest {\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final double n1n2prod = n1 * n2;\n+        final int n1n2prod = n1 * n2;\n \n         // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n         final double EU = n1n2prod / 2.0;\n"
            }
        ],
        "94": [
            {
                "modified_file": "src/java/org/apache/commons/math/util/MathUtils.java",
                "modified_lines": [
                    409,
                    410,
                    411,
                    412,
                    413,
                    414,
                    415
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex df71405..c5342ae 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -409,7 +409,7 @@ public final class MathUtils {\n      * @since 1.1\n      */\n     public static int gcd(int u, int v) {\n-        if ((u == 0) || (v == 0)) {\n+        if (u * v == 0) {\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n"
            }
        ],
        "99": [
            {
                "modified_file": "src/java/org/apache/commons/math/util/MathUtils.java",
                "modified_lines": [
                    540,
                    541,
                    542,
                    543,
                    544,
                    545,
                    546,
                    547,
                    548,
                    549,
                    550,
                    716,
                    717,
                    718,
                    719,
                    720,
                    721,
                    722,
                    723,
                    724
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex 806c888..d51ec7a 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -540,11 +540,6 @@ public final class MathUtils {\n         int u = p;\n         int v = q;\n         if ((u == 0) || (v == 0)) {\n-            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n-                throw MathRuntimeException.createArithmeticException(\n-                        \"overflow: gcd({0}, {1}) is 2^31\",\n-                        new Object[] { p, q });\n-            }\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to\n@@ -716,9 +711,6 @@ public final class MathUtils {\n             return 0;\n         }\n         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));\n-        if (lcm == Integer.MIN_VALUE){\n-            throw new ArithmeticException(\"overflow: lcm is 2^31\");\n-        }\n         return lcm;\n     }\n \n"
            }
        ],
        "88": [
            {
                "modified_file": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
                "modified_lines": [
                    326,
                    327,
                    328,
                    329,
                    330,
                    331,
                    332,
                    333,
                    334,
                    335,
                    336,
                    337,
                    338,
                    339,
                    340,
                    341,
                    342,
                    343
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex a6d7419..3bcb17f 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -326,18 +326,19 @@ class SimplexTableau implements Serializable {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        Set<Integer> basicRows = new HashSet<Integer>();\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-            if (basicRows.contains(basicRow)) {\n                 // if multiple variables can take a given value \n                 // then we choose the first and set the rest equal to 0\n-                coefficients[i] = 0;\n-            } else {\n-                basicRows.add(basicRow);\n                 coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                     (restrictToNonNegative ? 0 : mostNegative);\n+            if (basicRow != null) {\n+                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n+                    if (tableau.getEntry(basicRow, j) == 1) {\n+                         coefficients[i] = 0;\n+                    }\n+                }\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n"
            }
        ],
        "34": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/genetics/ListPopulation.java",
                "modified_lines": [
                    206,
                    207,
                    208,
                    209,
                    210,
                    211
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\nindex 3f3919c..1eb0053 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n@@ -206,6 +206,6 @@ public abstract class ListPopulation implements Population {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return getChromosomes().iterator();\n+        return chromosomes.iterator();\n     }\n }\n"
            }
        ],
        "106": [
            {
                "modified_file": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
                "modified_lines": [
                    162,
                    163,
                    164,
                    165,
                    166,
                    167,
                    168,
                    169,
                    170,
                    171,
                    172,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\nindex a98b665..df2713d 100644\n--- a/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n+++ b/src/java/org/apache/commons/math/fraction/ProperFractionFormat.java\n@@ -162,11 +162,7 @@ public class ProperFractionFormat extends FractionFormat {\n             return null;\n         }\n         \n-        if (num.intValue() < 0) {\n             // minus signs should be leading, invalid expression\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n \n         // parse '/'\n         int startIndex = pos.getIndex();\n@@ -201,11 +197,7 @@ public class ProperFractionFormat extends FractionFormat {\n             return null;\n         }\n         \n-        if (den.intValue() < 0) {\n             // minus signs must be leading, invalid\n-            pos.setIndex(initialIndex);\n-            return null;\n-        }\n \n         int w = whole.intValue();\n         int n = num.intValue();\n"
            }
        ],
        "73": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java",
                "modified_lines": [
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb427..8142b5e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,10 +133,6 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n-        }\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n"
            }
        ],
        "102": [
            {
                "modified_file": "src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java",
                "modified_lines": [
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex 984d56d..c87b010 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -71,28 +71,11 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n             throw new IllegalArgumentException(\n                 \"observed counts must be non-negative and expected counts must be postive\");\n         }\n-        double sumExpected = 0d;\n-        double sumObserved = 0d;\n-        for (int i = 0; i < observed.length; i++) {\n-            sumExpected += expected[i];\n-            sumObserved += observed[i];\n-        }\n-        double ratio = 1.0d;\n-        boolean rescale = false;\n-        if (Math.abs(sumExpected - sumObserved) > 10E-6) {\n-            ratio = sumObserved / sumExpected;\n-            rescale = true;\n-        }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n-            if (rescale) {\n-                dev = ((double) observed[i] - ratio * expected[i]);\n-                sumSq += dev * dev / (ratio * expected[i]);\n-            } else {\n                 dev = ((double) observed[i] - expected[i]);\n                 sumSq += dev * dev / expected[i];\n-            }\n         }\n         return sumSq;\n     }\n"
            }
        ],
        "39": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
                "modified_lines": [
                    247,
                    248,
                    249,
                    250,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex d2bbf67..13ced27 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,15 +247,6 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n-        if (forward) {\n-            if (stepStart + stepSize >= t) {\n-                stepSize = t - stepStart;\n-            }\n-        } else {\n-            if (stepStart + stepSize <= t) {\n-                stepSize = t - stepStart;\n-            }\n-        }\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {\n"
            }
        ],
        "54": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
                "modified_lines": [
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    2319,
                    2320,
                    2321,
                    2322,
                    2323,
                    2324,
                    2325,
                    2326,
                    2327,
                    2328
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/dfp/Dfp.java b/src/main/java/org/apache/commons/math/dfp/Dfp.java\nindex 54aabc4..73f1ea3 100644\n--- a/src/main/java/org/apache/commons/math/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math/dfp/Dfp.java\n@@ -270,9 +270,6 @@ public class Dfp implements FieldElement<Dfp> {\n             // Zero or sub-normal\n             if (x == 0) {\n                 // make sure 0 has the right sign\n-                if ((bits & 0x8000000000000000L) != 0) {\n-                    sign = -1;\n-                }\n                 return;\n             }\n \n@@ -2319,10 +2316,7 @@ public class Dfp implements FieldElement<Dfp> {\n \n         Dfp y = this;\n         boolean negate = false;\n-        int cmp0 = compare(this, getZero());\n-        if (cmp0 == 0) {\n-            return sign < 0 ? -0.0 : +0.0;\n-        } else if (cmp0 < 0) {\n+        if (lessThan(getZero())) {\n             y = negate();\n             negate = true;\n         }\n"
            }
        ],
        "81": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java",
                "modified_lines": [
                    600,
                    601,
                    602,
                    603,
                    604,
                    605,
                    606,
                    903,
                    904,
                    905,
                    906,
                    907,
                    908,
                    909,
                    910,
                    1541,
                    1542,
                    1543,
                    1544,
                    1545,
                    1546,
                    1547
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d..2d0d72f 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -600,7 +600,6 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n         lowerSpectra = Math.min(lowerSpectra, lower);\n         final double upper = dCurrent + eCurrent;\n         work[upperStart + m - 1] = upper;\n-        upperSpectra = Math.max(upperSpectra, upper);\n         minPivot = MathUtils.SAFE_MIN * Math.max(1.0, eMax * eMax);\n \n     }\n@@ -903,8 +902,8 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                     diagMax    = work[4 * i0];\n                     offDiagMin = work[4 * i0 + 2];\n                     double previousEMin = work[4 * i0 + 3];\n-                    for (int i = 4 * i0; i < 4 * n0 - 16; i += 4) {\n-                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) ||\n+                    for (int i = 4 * i0; i < 4 * n0 - 11; i += 4) {\n+                        if ((work[i + 3] <= TOLERANCE_2 * work[i]) &&\n                             (work[i + 2] <= TOLERANCE_2 * sigma)) {\n                             // insert a split\n                             work[i + 2]  = -sigma;\n@@ -1541,7 +1540,7 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n                 double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);\n \n                 // approximate contribution to norm squared from i < nn-2.\n-                if (end - start > 3) {\n+                if (end - start > 2) {\n                     b2 = work[nn - 13] / work[nn - 15];\n                     a2 = a2 + b2;\n                     for (int i4 = nn - 17; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {\n"
            }
        ],
        "8": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
                "modified_lines": [
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186,
                    187,
                    188,
                    189,
                    190
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\nindex 879eb2a..5cb0e43 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n@@ -178,13 +178,13 @@ public class DiscreteDistribution<T> {\n      * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n      * positive.\n      */\n-    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {\n+    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n         if (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                     sampleSize);\n         }\n \n-        final Object[] out = new Object[sampleSize];\n+        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n \n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();\n"
            }
        ],
        "18": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java",
                "modified_lines": [
                    929,
                    930,
                    931,
                    932,
                    933,
                    934,
                    935,
                    955,
                    956,
                    957,
                    958,
                    959,
                    960,
                    961,
                    987,
                    988,
                    989,
                    990,
                    991,
                    992,
                    993,
                    994,
                    995,
                    996,
                    997,
                    998,
                    999,
                    1000
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 866c8fd..bc754a5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -929,7 +929,7 @@ public class CMAESOptimizer\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = x[i] / diff;\n+                res[i] = (x[i] - boundaries[0][i]) / diff;\n             }\n             return res;\n         }\n@@ -955,7 +955,7 @@ public class CMAESOptimizer\n             double[] res = new double[x.length];\n             for (int i = 0; i < x.length; i++) {\n                 double diff = boundaries[1][i] - boundaries[0][i];\n-                res[i] = diff * x[i];\n+                res[i] = diff * x[i] + boundaries[0][i];\n             }\n             return res;\n         }\n@@ -987,14 +987,12 @@ public class CMAESOptimizer\n                 return true;\n             }\n \n-            final double[] bLoEnc = encode(boundaries[0]);\n-            final double[] bHiEnc = encode(boundaries[1]);\n \n             for (int i = 0; i < x.length; i++) {\n-                if (x[i] < bLoEnc[i]) {\n+                if (x[i] < 0) {\n                     return false;\n                 }\n-                if (x[i] > bHiEnc[i]) {\n+                if (x[i] > 1.0) {\n                     return false;\n                 }\n             }\n"
            }
        ],
        "96": [
            {
                "modified_file": "src/java/org/apache/commons/math/complex/Complex.java",
                "modified_lines": [
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 8b622cb..3571567 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,7 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (real == rhs.real) && (imaginary == rhs.imaginary); \n+                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception\n"
            }
        ],
        "50": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
                "modified_lines": [
                    184,
                    185,
                    186,
                    187,
                    188,
                    189
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex c781a90..e47d982 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,6 +184,10 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n+                    if (x == x1) {\n+                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n+                        f0 = computeObjectiveValue(x0);\n+                    }\n                     break;\n                 default:\n                     // Should never happen.\n"
            }
        ],
        "4": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
                "modified_lines": [
                    111,
                    112,
                    113,
                    114,
                    115,
                    116,
                    117,
                    118,
                    119
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\nindex aad7b65..a146cb6 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java\n@@ -111,9 +111,6 @@ public class SubLine {\n \n         // compute the intersection on infinite line\n         Vector3D v1D = line.intersection(subLine.line);\n-        if (v1D == null) {\n-            return null;\n-        }\n \n         // check location of point with respect to first sub-line\n         Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));\n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
                "modified_lines": [
                    115,
                    116,
                    117,
                    118,
                    119,
                    120,
                    121,
                    122,
                    123
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\nindex ea9e96a..a9d621a 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java\n@@ -115,9 +115,6 @@ public class SubLine extends AbstractSubHyperplane<Euclidean2D, Euclidean1D> {\n \n         // compute the intersection on infinite line\n         Vector2D v2D = line1.intersection(line2);\n-        if (v2D == null) {\n-            return null;\n-        }\n \n         // check location of point with respect to first sub-line\n         Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));\n"
            }
        ],
        "11": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java",
                "modified_lines": [
                    180,
                    181,
                    182,
                    183,
                    184,
                    185,
                    186
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex fd18c28..1570681 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -180,7 +180,7 @@ public class MultivariateNormalDistribution\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n-        return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *\n+        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n             getExponentTerm(vals);\n     }\n"
            }
        ],
        "26": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
                "modified_lines": [
                    178,
                    179,
                    180,
                    181,
                    182,
                    183,
                    184,
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex 08d3b95..f81ff0a 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -178,7 +178,7 @@ public class Fraction\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n-        if (FastMath.abs(a0) > overflow) {\n+        if (a0 > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n@@ -206,7 +206,7 @@ public class Fraction\n             long a1 = (long)FastMath.floor(r1);\n             p2 = (a1 * p1) + p0;\n             q2 = (a1 * q1) + q0;\n-            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n+            if ((p2 > overflow) || (q2 > overflow)) {\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n"
            }
        ],
        "29": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java",
                "modified_lines": [
                    346,
                    347,
                    348,
                    349,
                    350,
                    351,
                    352,
                    353,
                    354,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    378,
                    379,
                    380,
                    381,
                    382,
                    383,
                    384,
                    385,
                    386,
                    387
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java b/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\nindex 294ac57..8214827 100644\n--- a/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java\n@@ -346,9 +346,10 @@ public class OpenMapRealVector extends SparseRealVector\n          * this only. Indeed, if this[i] = 0d and v[i] = 0d, then\n          * this[i] / v[i] = NaN, and not 0d.\n          */\n-        final int n = getDimension();\n-        for (int i = 0; i < n; i++) {\n-            res.setEntry(i, this.getEntry(i) / v.getEntry(i));\n+        Iterator iter = entries.iterator();\n+        while (iter.hasNext()) {\n+            iter.advance();\n+            res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));\n         }\n         return res;\n     }\n@@ -370,18 +371,6 @@ public class OpenMapRealVector extends SparseRealVector\n          *\n          * These special cases are handled below.\n          */\n-        if (v.isNaN() || v.isInfinite()) {\n-            final int n = getDimension();\n-            for (int i = 0; i < n; i++) {\n-                final double y = v.getEntry(i);\n-                if (Double.isNaN(y)) {\n-                    res.setEntry(i, Double.NaN);\n-                } else if (Double.isInfinite(y)) {\n-                    final double x = this.getEntry(i);\n-                    res.setEntry(i, x * y);\n-                }\n-            }\n-        }\n         return res;\n     }\n \n"
            }
        ],
        "36": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
                "modified_lines": [
                    683,
                    684,
                    685,
                    686,
                    687,
                    688,
                    689,
                    690,
                    691,
                    692,
                    693,
                    694,
                    695,
                    696,
                    736,
                    737,
                    738,
                    739,
                    740,
                    741,
                    742,
                    743,
                    744,
                    745,
                    746,
                    747,
                    748,
                    749
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/fraction/BigFraction.java b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\nindex a6672e4..6181ec3 100644\n--- a/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math/fraction/BigFraction.java\n@@ -683,14 +683,8 @@ public class BigFraction\n     @Override\n     public double doubleValue() {\n         double result = numerator.doubleValue() / denominator.doubleValue();\n-        if (Double.isNaN(result)) {\n             // Numerator and/or denominator must be out of range:\n             // Calculate how far to shift them to put them in range.\n-            int shift = Math.max(numerator.bitLength(),\n-                                 denominator.bitLength()) - Double.MAX_EXPONENT;\n-            result = numerator.shiftRight(shift).doubleValue() /\n-                denominator.shiftRight(shift).doubleValue();\n-        }\n         return result;\n     }\n \n@@ -736,14 +730,8 @@ public class BigFraction\n     @Override\n     public float floatValue() {\n         float result = numerator.floatValue() / denominator.floatValue();\n-        if (Double.isNaN(result)) {\n             // Numerator and/or denominator must be out of range:\n             // Calculate how far to shift them to put them in range.\n-            int shift = Math.max(numerator.bitLength(),\n-                                 denominator.bitLength()) - Float.MAX_EXPONENT;\n-            result = numerator.shiftRight(shift).floatValue() /\n-                denominator.shiftRight(shift).floatValue();\n-        }\n         return result;\n     }\n \n"
            }
        ],
        "67": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java",
                "modified_lines": [
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\nindex 26fd5e0..d0dada3 100644\n--- a/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java\n@@ -89,12 +89,12 @@ public class MultiStartUnivariateRealOptimizer implements UnivariateRealOptimize\n \n     /** {@inheritDoc} */\n     public double getFunctionValue() {\n-        return optimaValues[0];\n+        return optimizer.getFunctionValue();\n     }\n \n     /** {@inheritDoc} */\n     public double getResult() {\n-        return optima[0];\n+        return optimizer.getResult();\n     }\n \n     /** {@inheritDoc} */\n"
            }
        ],
        "12": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
                "modified_lines": [
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java b/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java\nindex fab295b..4d166c2 100644\n--- a/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java\n+++ b/src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java\n@@ -16,7 +16,6 @@\n  */\n package org.apache.commons.math3.random;\n \n-import java.io.Serializable;\n \n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.util.FastMath;\n@@ -27,10 +26,8 @@ import org.apache.commons.math3.util.FastMath;\n  * @since 2.0\n  */\n public abstract class BitsStreamGenerator\n-    implements RandomGenerator,\n-               Serializable {\n+    implements RandomGenerator {\n     /** Serializable version identifier */\n-    private static final long serialVersionUID = 20130104L;\n     /** Next gaussian. */\n     private double nextGaussian;\n \n"
            }
        ],
        "65": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
                "modified_lines": [
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    250,
                    251,
                    252,
                    253,
                    254,
                    255,
                    256
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 5a60da8..30ebfff 100644\n--- a/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -237,7 +237,12 @@ public abstract class AbstractLeastSquaresOptimizer implements DifferentiableMul\n      * @return RMS value\n      */\n     public double getRMS() {\n-        return Math.sqrt(getChiSquare() / rows);\n+        double criterion = 0;\n+        for (int i = 0; i < rows; ++i) {\n+            final double residual = residuals[i];\n+            criterion += residual * residual * residualsWeights[i];\n+        }\n+        return Math.sqrt(criterion / rows);\n     }\n \n     /**\n@@ -250,7 +255,7 @@ public abstract class AbstractLeastSquaresOptimizer implements DifferentiableMul\n         double chiSquare = 0;\n         for (int i = 0; i < rows; ++i) {\n             final double residual = residuals[i];\n-            chiSquare += residual * residual * residualsWeights[i];\n+            chiSquare += residual * residual / residualsWeights[i];\n         }\n         return chiSquare;\n     }\n"
            }
        ],
        "10": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java",
                "modified_lines": [
                    1416,
                    1417,
                    1418,
                    1419,
                    1420,
                    1421,
                    1422
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex d5a3c18..bf6dd65 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,7 +1416,6 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n-        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n \n     }\n \n"
            }
        ],
        "40": [
            {
                "modified_file": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
                "modified_lines": [
                    232,
                    233,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\nindex 59dc461..93dd3bb 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n@@ -232,16 +232,10 @@ public class BracketingNthOrderBrentSolver\n             double targetY;\n             if (agingA >= MAXIMAL_AGING) {\n                 // we keep updating the high bracket, try to compensate this\n-                final int p = agingA - MAXIMAL_AGING;\n-                final double weightA = (1 << p) - 1;\n-                final double weightB = p + 1;\n-                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);\n+                targetY = -REDUCTION_FACTOR * yB;\n             } else if (agingB >= MAXIMAL_AGING) {\n                 // we keep updating the low bracket, try to compensate this\n-                final int p = agingB - MAXIMAL_AGING;\n-                final double weightA = p + 1;\n-                final double weightB = (1 << p) - 1;\n-                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);\n+                targetY = -REDUCTION_FACTOR * yA;\n             } else {\n                 // bracketing is balanced, try to find the root itself\n                 targetY = 0;\n"
            }
        ],
        "32": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java",
                "modified_lines": [
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\nindex add24ac..c6e7cf1 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/twod/PolygonsSet.java\n@@ -133,7 +133,7 @@ public class PolygonsSet extends AbstractRegion<Euclidean2D, Euclidean1D> {\n \n         if (v.length == 0) {\n             final BSPTree<Euclidean2D> tree = getTree(false);\n-            if (tree.getCut() == null && (Boolean) tree.getAttribute()) {\n+            if ((Boolean) tree.getAttribute()) {\n                 // the instance covers the whole space\n                 setSize(Double.POSITIVE_INFINITY);\n                 setBarycenter(Vector2D.NaN);\n"
            }
        ],
        "14": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java",
                "modified_lines": [
                    40,
                    41,
                    42,
                    43,
                    44,
                    45,
                    46
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\nindex aa3299a..b8225ad 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java\n@@ -40,7 +40,10 @@ public class Weight implements OptimizationData {\n      */\n     public Weight(double[] weight) {\n         final int dim = weight.length;\n-        weightMatrix = new DiagonalMatrix(weight);\n+        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);\n+        for (int i = 0; i < dim; i++) {\n+            weightMatrix.setEntry(i, i, weight[i]);\n+        }\n     }\n \n     /**\n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java",
                "modified_lines": [
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    274,
                    275,
                    276,
                    277,
                    278,
                    279
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\nindex ef52943..d12ebea 100644\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java\n@@ -264,16 +264,7 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-        if (m instanceof DiagonalMatrix) {\n-            final int dim = m.getRowDimension();\n-            final RealMatrix sqrtM = new DiagonalMatrix(dim);\n-            for (int i = 0; i < dim; i++) {\n-                sqrtM.setEntry(i, i, FastMath.sqrt(m.getEntry(i, i)));\n-            }\n-            return sqrtM;\n-        } else {\n             final EigenDecomposition dec = new EigenDecomposition(m);\n             return dec.getSquareRoot();\n-        }\n     }\n }\n"
            }
        ],
        "104": [
            {
                "modified_file": "src/java/org/apache/commons/math/special/Gamma.java",
                "modified_lines": [
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40
                ],
                "text": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex ba2c4db..8c565cb 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -34,7 +34,7 @@ public class Gamma implements Serializable {\n     private static final long serialVersionUID = -6587513359895466954L;\n \n     /** Maximum allowed numerical error. */\n-    private static final double DEFAULT_EPSILON = 10e-15;\n+    private static final double DEFAULT_EPSILON = 10e-9;\n \n     /** Lanczos coefficients */\n     private static double[] lanczos =\n"
            }
        ],
        "1": [
            {
                "modified_file": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
                "modified_lines": [
                    303,
                    304,
                    305,
                    306,
                    307,
                    308,
                    309,
                    310,
                    311
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/fraction/BigFraction.java b/src/main/java/org/apache/commons/math3/fraction/BigFraction.java\nindex 4ca33eb..ed4108d 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/BigFraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/BigFraction.java\n@@ -303,9 +303,6 @@ public class BigFraction\n             if ((p2 > overflow) || (q2 > overflow)) {\n                 // in maxDenominator mode, if the last fraction was very close to the actual value\n                 // q2 may overflow in the next iteration; in this case return the last one.\n-                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n-                    break;\n-                }\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n"
            },
            {
                "modified_file": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
                "modified_lines": [
                    212,
                    213,
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220
                ],
                "text": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex 002dae9..8065885 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -212,9 +212,6 @@ public class Fraction\n             if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n                 // in maxDenominator mode, if the last fraction was very close to the actual value\n                 // q2 may overflow in the next iteration; in this case return the last one.\n-                if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) {\n-                    break;\n-                }\n                 throw new FractionConversionException(value, p2, q2);\n             }\n \n"
            }
        ]
    },
    "Time": {
        "20": [
            {
                "modified_file": "src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java",
                "modified_lines": [
                    2539,
                    2540,
                    2541,
                    2542,
                    2543,
                    2544,
                    2545,
                    2546,
                    2547,
                    2548,
                    2549,
                    2550,
                    2551,
                    2552,
                    2553,
                    2554,
                    2555,
                    2556
                ],
                "text": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex ebb4b08..558a586 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2539,18 +2539,12 @@ public class DateTimeFormatterBuilder {\n \n         public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n             String str = text.substring(position);\n-            String best = null;\n             for (String id : ALL_IDS) {\n                 if (str.startsWith(id)) {\n-                \tif (best == null || id.length() > best.length()) {\n-                \t\tbest = id;\n-                \t}\n+                    bucket.setZone(DateTimeZone.forID(id));\n+                    return position + id.length();\n                 }\n             }\n-            if (best != null) {\n-                bucket.setZone(DateTimeZone.forID(best));\n-                return position + best.length();\n-            }\n             return ~position;\n         }\n     }\n"
            }
        ],
        "6": [
            {
                "modified_file": "src/main/java/org/joda/time/chrono/GJChronology.java",
                "modified_lines": [
                    193,
                    194,
                    195,
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    980,
                    981,
                    982,
                    983,
                    984,
                    985,
                    986,
                    987,
                    988,
                    989,
                    990,
                    991,
                    992,
                    993,
                    994,
                    995,
                    996,
                    1013,
                    1014,
                    1015,
                    1016,
                    1017,
                    1018,
                    1019,
                    1020,
                    1021,
                    1022,
                    1023,
                    1024,
                    1025,
                    1026,
                    1027,
                    1028,
                    1029
                ],
                "text": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex d1556f5..b970403 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -193,10 +193,6 @@ public final class GJChronology extends AssembledChronology {\n             cutoverInstant = DEFAULT_CUTOVER;\n         } else {\n             cutoverInstant = gregorianCutover.toInstant();\n-            LocalDate cutoverDate = new LocalDate(cutoverInstant.getMillis(), GregorianChronology.getInstance(zone));\n-            if (cutoverDate.getYear() <= 0) {\n-                throw new IllegalArgumentException(\"Cutover too early. Must be on or after 0001-01-01.\");\n-            }\n         }\n \n         GJChronology chrono;\n@@ -980,17 +976,6 @@ public final class GJChronology extends AssembledChronology {\n                 if (instant < iCutover) {\n                     // Only adjust if gap fully crossed.\n                     if (instant + iGapDuration < iCutover) {\n-                        if (iConvertByWeekyear) {\n-                            int wyear = iGregorianChronology.weekyear().get(instant);\n-                            if (wyear <= 0) {\n-                                instant = iGregorianChronology.weekyear().add(instant, -1);\n-                            }\n-                        } else {\n-                            int year = iGregorianChronology.year().get(instant);\n-                            if (year <= 0) {\n-                                instant = iGregorianChronology.year().add(instant, -1);\n-                            }\n-                        }\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n@@ -1013,17 +998,6 @@ public final class GJChronology extends AssembledChronology {\n                 if (instant < iCutover) {\n                     // Only adjust if gap fully crossed.\n                     if (instant + iGapDuration < iCutover) {\n-                        if (iConvertByWeekyear) {\n-                            int wyear = iGregorianChronology.weekyear().get(instant);\n-                            if (wyear <= 0) {\n-                                instant = iGregorianChronology.weekyear().add(instant, -1);\n-                            }\n-                        } else {\n-                            int year = iGregorianChronology.year().get(instant);\n-                            if (year <= 0) {\n-                                instant = iGregorianChronology.year().add(instant, -1);\n-                            }\n-                        }\n                         instant = gregorianToJulian(instant);\n                     }\n                 }\n"
            }
        ],
        "3": [
            {
                "modified_file": "src/main/java/org/joda/time/MutableDateTime.java",
                "modified_lines": [
                    636,
                    637,
                    638,
                    639,
                    640,
                    641,
                    642,
                    643,
                    644,
                    659,
                    660,
                    661,
                    662,
                    663,
                    664,
                    665,
                    666,
                    667,
                    682,
                    683,
                    684,
                    685,
                    686,
                    687,
                    688,
                    689,
                    690,
                    705,
                    706,
                    707,
                    708,
                    709,
                    710,
                    711,
                    712,
                    713,
                    728,
                    729,
                    730,
                    731,
                    732,
                    733,
                    734,
                    735,
                    736,
                    771,
                    772,
                    773,
                    774,
                    775,
                    776,
                    777,
                    778,
                    779,
                    794,
                    795,
                    796,
                    797,
                    798,
                    799,
                    800,
                    801,
                    802,
                    827,
                    828,
                    829,
                    830,
                    831,
                    832,
                    833,
                    834,
                    835,
                    860,
                    861,
                    862,
                    863,
                    864,
                    865,
                    866,
                    867,
                    868,
                    895,
                    896,
                    897,
                    898,
                    899,
                    900,
                    901,
                    902,
                    903
                ],
                "text": "diff --git a/src/main/java/org/joda/time/MutableDateTime.java b/src/main/java/org/joda/time/MutableDateTime.java\nindex 9aa8602..310f55d 100644\n--- a/src/main/java/org/joda/time/MutableDateTime.java\n+++ b/src/main/java/org/joda/time/MutableDateTime.java\n@@ -636,9 +636,7 @@ public class MutableDateTime\n         if (type == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n         }\n-        if (amount != 0) {\n             setMillis(type.getField(getChronology()).add(getMillis(), amount));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -659,9 +657,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addYears(final int years) {\n-        if (years != 0) {\n             setMillis(getChronology().years().add(getMillis(), years));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -682,9 +678,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeekyears(final int weekyears) {\n-        if (weekyears != 0) {\n             setMillis(getChronology().weekyears().add(getMillis(), weekyears));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -705,9 +699,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMonths(final int months) {\n-        if (months != 0) {\n             setMillis(getChronology().months().add(getMillis(), months));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -728,9 +720,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addWeeks(final int weeks) {\n-        if (weeks != 0) {\n             setMillis(getChronology().weeks().add(getMillis(), weeks));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -771,9 +761,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addDays(final int days) {\n-        if (days != 0) {\n             setMillis(getChronology().days().add(getMillis(), days));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -794,9 +782,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addHours(final int hours) {\n-        if (hours != 0) {\n             setMillis(getChronology().hours().add(getMillis(), hours));\n-        }\n     }\n     \n     //-----------------------------------------------------------------------\n@@ -827,9 +813,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMinutes(final int minutes) {\n-        if (minutes != 0) {\n             setMillis(getChronology().minutes().add(getMillis(), minutes));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -860,9 +844,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addSeconds(final int seconds) {\n-        if (seconds != 0) {\n             setMillis(getChronology().seconds().add(getMillis(), seconds));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n@@ -895,9 +877,7 @@ public class MutableDateTime\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public void addMillis(final int millis) {\n-        if (millis != 0) {\n             setMillis(getChronology().millis().add(getMillis(), millis));\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n"
            }
        ],
        "7": [
            {
                "modified_file": "src/main/java/org/joda/time/format/DateTimeFormatter.java",
                "modified_lines": [
                    705,
                    706,
                    707,
                    708,
                    709,
                    710,
                    711,
                    712,
                    713
                ],
                "text": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 913d036..447674a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -705,9 +705,9 @@ public class DateTimeFormatter {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        int defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n+        int defaultYear = chrono.year().get(instantLocal);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n"
            }
        ],
        "19": [
            {
                "modified_file": "src/main/java/org/joda/time/DateTimeZone.java",
                "modified_lines": [
                    897,
                    898,
                    899,
                    900,
                    901,
                    902,
                    903
                ],
                "text": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex ec05941..855cad0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,7 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal >= 0) {\n+        } else if (offsetLocal > 0) {\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);\n"
            }
        ],
        "16": [
            {
                "modified_file": "src/main/java/org/joda/time/format/DateTimeFormatter.java",
                "modified_lines": [
                    706,
                    707,
                    708,
                    709,
                    710,
                    711,
                    712
                ],
                "text": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex baa276a..a4b1612 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,7 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n+            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n"
            }
        ],
        "15": [
            {
                "modified_file": "src/main/java/org/joda/time/field/FieldUtils.java",
                "modified_lines": [
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141,
                    142,
                    143
                ],
                "text": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex 1e045b2..a0fe7e2 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,9 +135,6 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n-                if (val1 == Long.MIN_VALUE) {\n-                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n-                }\n                 return -val1;\n             case 0:\n                 return 0L;\n"
            }
        ],
        "27": [
            {
                "modified_file": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
                "modified_lines": [
                    798,
                    799,
                    800,
                    801,
                    802,
                    803,
                    804,
                    805,
                    806,
                    807,
                    808
                ],
                "text": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex f7c7738..1533228 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -798,11 +798,9 @@ public class PeriodFormatterBuilder {\n         int size = elementPairs.size();\n         if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n             Separator sep = (Separator) elementPairs.get(0);\n-            if (sep.iAfterParser == null && sep.iAfterPrinter == null) {\n                 PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n                 return new PeriodFormatter(sep, sep);\n-            }\n         }\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n"
            }
        ],
        "24": [
            {
                "modified_file": "src/main/java/org/joda/time/format/DateTimeParserBucket.java",
                "modified_lines": [
                    352,
                    353,
                    354,
                    355,
                    356,
                    357,
                    358,
                    359,
                    360,
                    361,
                    362
                ],
                "text": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex 7c37fc1..b985cef 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,11 +352,6 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n-            if (resetFields) {\n-                for (int i = 0; i < count; i++) {\n-                    millis = savedFields[i].set(millis, i == (count - 1));\n-                }\n-            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n"
            }
        ],
        "13": [
            {
                "modified_file": "src/main/java/org/joda/time/format/PeriodFormatterBuilder.java",
                "modified_lines": [
                    1095,
                    1096,
                    1097,
                    1098,
                    1099,
                    1100,
                    1101,
                    1130,
                    1131,
                    1132,
                    1133,
                    1134,
                    1135,
                    1136,
                    1140,
                    1141,
                    1142,
                    1143,
                    1144,
                    1145,
                    1146,
                    1147,
                    1148
                ],
                "text": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 29b0872..6c8e9c6 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -1095,7 +1095,7 @@ public class PeriodFormatterBuilder {\n             if (iFieldType >= SECONDS_MILLIS) {\n                 // valueLong contains the seconds and millis fields\n                 // the minimum output is 0.000, which is 4 or 5 digits with a negative\n-                sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));\n+                sum = Math.max(sum, 4);\n                 // plus one for the decimal point\n                 sum++;\n                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n@@ -1130,7 +1130,6 @@ public class PeriodFormatterBuilder {\n             if (iPrefix != null) {\n                 iPrefix.printTo(buf, value);\n             }\n-            int bufLen = buf.length();\n             int minDigits = iMinPrintedDigits;\n             if (minDigits <= 1) {\n                 FormatUtils.appendUnpaddedInteger(buf, value);\n@@ -1140,9 +1139,6 @@ public class PeriodFormatterBuilder {\n             if (iFieldType >= SECONDS_MILLIS) {\n                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                 if (iFieldType == SECONDS_MILLIS || dp > 0) {\n-                    if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {\n-                        buf.insert(bufLen, '-');\n-                    }\n                     buf.append('.');\n                     FormatUtils.appendPaddedInteger(buf, dp, 3);\n                 }\n"
            }
        ],
        "17": [
            {
                "modified_file": "src/main/java/org/joda/time/DateTimeZone.java",
                "modified_lines": [
                    1164,
                    1165,
                    1166,
                    1167,
                    1168,
                    1169,
                    1170,
                    1171,
                    1172,
                    1173,
                    1174,
                    1175,
                    1176,
                    1177,
                    1178,
                    1179,
                    1180,
                    1181,
                    1182,
                    1183,
                    1184,
                    1185,
                    1186,
                    1187,
                    1188,
                    1189,
                    1190,
                    1191,
                    1192,
                    1193,
                    1194,
                    1195
                ],
                "text": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 7219899..74a3802 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1164,32 +1164,19 @@ public abstract class DateTimeZone implements Serializable {\n         // a bit messy, but will work in all non-pathological cases\n         \n         // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;\n-        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;\n-        long offsetBefore = getOffset(instantBefore);\n-        long offsetAfter = getOffset(instantAfter);\n-        if (offsetBefore <= offsetAfter) {\n+        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        if (instantBefore == instantAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }\n         \n         // work out range of instants that have duplicate local times\n-        long diff = offsetBefore - offsetAfter;\n-        long transition = nextTransition(instantBefore);\n-        long overlapStart = transition - diff;\n-        long overlapEnd = transition + diff;\n-        if (instant < overlapStart || instant >= overlapEnd) {\n-          return instant;  // not an overlap\n-        }\n+        long local = convertUTCToLocal(instant);\n+        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n         \n         // calculate result\n-        long afterStart = instant - overlapStart;\n-        if (afterStart >= diff) {\n           // currently in later offset\n-          return earlierOrLater ? instant : instant - diff;\n-        } else {\n           // currently in earlier offset\n-          return earlierOrLater ? instant + diff : instant;\n-        }\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n"
            }
        ],
        "2": [
            {
                "modified_file": "src/main/java/org/joda/time/Partial.java",
                "modified_lines": [
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    446,
                    447,
                    448,
                    449,
                    450,
                    451,
                    452,
                    453,
                    454
                ],
                "text": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 3b84fdc..b9ec964 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -215,7 +215,7 @@ public final class Partial\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n-                if (compare < 0) {\n+                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                 } else if (compare == 0) {\n@@ -446,9 +446,6 @@ public final class Partial\n                         if (compare > 0) {\n                             break;\n                         } else if (compare == 0) {\n-                            if (fieldType.getRangeDurationType() == null) {\n-                                break;\n-                            }\n                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                             if (rangeField.compareTo(loopRangeField) > 0) {\n"
            },
            {
                "modified_file": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
                "modified_lines": [
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232
                ],
                "text": "diff --git a/src/main/java/org/joda/time/field/UnsupportedDurationField.java b/src/main/java/org/joda/time/field/UnsupportedDurationField.java\nindex 7e0ce57..bf44e01 100644\n--- a/src/main/java/org/joda/time/field/UnsupportedDurationField.java\n+++ b/src/main/java/org/joda/time/field/UnsupportedDurationField.java\n@@ -224,9 +224,6 @@ public final class UnsupportedDurationField extends DurationField implements Ser\n      * @return zero always\n      */\n     public int compareTo(DurationField durationField) {\n-        if (durationField.isSupported()) {\n-            return 1;\n-        }\n         return 0;\n     }\n \n"
            }
        ],
        "9": [
            {
                "modified_file": "src/main/java/org/joda/time/DateTimeZone.java",
                "modified_lines": [
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    255,
                    256,
                    257,
                    258,
                    259,
                    260,
                    261,
                    262,
                    263,
                    264,
                    265,
                    266,
                    267,
                    268,
                    269,
                    270,
                    271,
                    272,
                    273,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291
                ],
                "text": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex afa75d79..3ad5cfeb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -93,7 +93,6 @@ public abstract class DateTimeZone implements Serializable {\n     /** The time zone for Universal Coordinated Time */\n     public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n     /** Maximum offset. */\n-    private static final int MAX_MILLIS = (86400 * 1000) - 1;\n \n     /** The instance that is providing time zones. */\n     private static Provider cProvider;\n@@ -255,19 +254,16 @@ public abstract class DateTimeZone implements Serializable {\n         if (hoursOffset == 0 && minutesOffset == 0) {\n             return DateTimeZone.UTC;\n         }\n-        if (hoursOffset < -23 || hoursOffset > 23) {\n-            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n-        }\n         if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n-            int hoursInMinutes = hoursOffset * 60;\n+            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n             if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - minutesOffset;\n+                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n             } else {\n-                minutesOffset = hoursInMinutes + minutesOffset;\n+                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n             }\n             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n@@ -283,9 +279,6 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the DateTimeZone object for the offset\n      */\n     public static DateTimeZone forOffsetMillis(int millisOffset) {\n-        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\n-            throw new IllegalArgumentException(\"Millis out of range: \" + millisOffset);\n-        }\n         String id = printOffset(millisOffset);\n         return fixedOffsetZone(id, millisOffset);\n     }\n"
            }
        ],
        "22": [
            {
                "modified_file": "src/main/java/org/joda/time/base/BasePeriod.java",
                "modified_lines": [
                    219,
                    220,
                    221,
                    222,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231
                ],
                "text": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex a5dcb74..679b734 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,13 +219,8 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        super();\n+        this(duration, null, null);\n         // bug [3264409]\n-        iType = PeriodType.time();\n-        int[] values = ISOChronology.getInstanceUTC().get(this, duration);\n-        iType = PeriodType.standard();\n-        iValues = new int[8];\n-        System.arraycopy(values, 0, iValues, 4, 4);\n     }\n \n     /**\n"
            }
        ],
        "23": [
            {
                "modified_file": "src/main/java/org/joda/time/DateTimeZone.java",
                "modified_lines": [
                    561,
                    562,
                    563,
                    564,
                    565,
                    566,
                    567,
                    568,
                    569,
                    570,
                    571,
                    574,
                    575,
                    576,
                    577,
                    578,
                    579,
                    580,
                    581,
                    582,
                    583,
                    584,
                    585,
                    586,
                    587,
                    588,
                    589,
                    590,
                    591,
                    592
                ],
                "text": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad0..5d89e34 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -561,11 +561,6 @@ public abstract class DateTimeZone implements Serializable {\n             // Backwards compatibility with TimeZone.\n             map = new HashMap<String, String>();\n             map.put(\"GMT\", \"UTC\");\n-            map.put(\"WET\", \"WET\");\n-            map.put(\"CET\", \"CET\");\n-            map.put(\"MET\", \"CET\");\n-            map.put(\"ECT\", \"CET\");\n-            map.put(\"EET\", \"EET\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n             map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n             map.put(\"AST\", \"America/Anchorage\");\n@@ -574,19 +569,23 @@ public abstract class DateTimeZone implements Serializable {\n             map.put(\"PNT\", \"America/Phoenix\");\n             map.put(\"CST\", \"America/Chicago\");\n             map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n-            map.put(\"IET\", \"America/Indiana/Indianapolis\");\n+            map.put(\"IET\", \"America/Indianapolis\");\n             map.put(\"PRT\", \"America/Puerto_Rico\");\n             map.put(\"CNT\", \"America/St_Johns\");\n-            map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n+            map.put(\"AGT\", \"America/Buenos_Aires\");\n             map.put(\"BET\", \"America/Sao_Paulo\");\n+            map.put(\"WET\", \"Europe/London\");\n+            map.put(\"ECT\", \"Europe/Paris\");\n             map.put(\"ART\", \"Africa/Cairo\");\n             map.put(\"CAT\", \"Africa/Harare\");\n+            map.put(\"EET\", \"Europe/Bucharest\");\n             map.put(\"EAT\", \"Africa/Addis_Ababa\");\n+            map.put(\"MET\", \"Asia/Tehran\");\n             map.put(\"NET\", \"Asia/Yerevan\");\n             map.put(\"PLT\", \"Asia/Karachi\");\n-            map.put(\"IST\", \"Asia/Kolkata\");\n+            map.put(\"IST\", \"Asia/Calcutta\");\n             map.put(\"BST\", \"Asia/Dhaka\");\n-            map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n+            map.put(\"VST\", \"Asia/Saigon\");\n             map.put(\"CTT\", \"Asia/Shanghai\");\n             map.put(\"JST\", \"Asia/Tokyo\");\n             map.put(\"ACT\", \"Australia/Darwin\");\n"
            }
        ],
        "8": [
            {
                "modified_file": "src/main/java/org/joda/time/DateTimeZone.java",
                "modified_lines": [
                    276,
                    277,
                    278,
                    279,
                    280,
                    281,
                    282,
                    283,
                    284,
                    285,
                    286,
                    287,
                    288,
                    289,
                    290,
                    291,
                    292
                ],
                "text": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a127604..7d1719b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -276,17 +276,14 @@ public abstract class DateTimeZone implements Serializable {\n         if (hoursOffset < -23 || hoursOffset > 23) {\n             throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n         }\n-        if (minutesOffset < -59 || minutesOffset > 59) {\n+        if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n-        if (hoursOffset > 0 && minutesOffset < 0) {\n-            throw new IllegalArgumentException(\"Positive hours must not have negative minutes: \" + minutesOffset);\n-        }\n         int offset = 0;\n         try {\n             int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n-                minutesOffset = hoursInMinutes - Math.abs(minutesOffset);\n+                minutesOffset = hoursInMinutes - minutesOffset;\n             } else {\n                 minutesOffset = hoursInMinutes + minutesOffset;\n             }\n"
            }
        ],
        "18": [
            {
                "modified_file": "src/main/java/org/joda/time/chrono/GJChronology.java",
                "modified_lines": [
                    361,
                    362,
                    363,
                    364,
                    365,
                    366,
                    367,
                    368,
                    369,
                    370,
                    371,
                    372,
                    373,
                    374,
                    375,
                    376,
                    377,
                    378,
                    379,
                    380,
                    381
                ],
                "text": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 0a19aa6..29e559d 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -361,21 +361,9 @@ public final class GJChronology extends AssembledChronology {\n \n         // Assume date is Gregorian.\n         long instant;\n-        try {\n             instant = iGregorianChronology.getDateTimeMillis\n                 (year, monthOfYear, dayOfMonth,\n                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        } catch (IllegalFieldValueException ex) {\n-            if (monthOfYear != 2 || dayOfMonth != 29) {\n-                throw ex;\n-            }\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, 28,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                throw ex;\n-            }\n-        }\n         if (instant < iCutoverMillis) {\n             // Maybe it's Julian.\n             instant = iJulianChronology.getDateTimeMillis\n"
            }
        ],
        "25": [
            {
                "modified_file": "src/main/java/org/joda/time/DateTimeZone.java",
                "modified_lines": [
                    896,
                    897,
                    898,
                    899,
                    900,
                    901,
                    902,
                    903,
                    904,
                    905,
                    906,
                    907,
                    908,
                    909,
                    910
                ],
                "text": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 81f5872..a320022 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,15 +896,6 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n         }\n         return offsetAdjusted;\n     }\n"
            }
        ],
        "4": [
            {
                "modified_file": "src/main/java/org/joda/time/Partial.java",
                "modified_lines": [
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    467
                ],
                "text": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 8e8e603..0d4edf4 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,7 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(newTypes, newValues, iChronology);\n+            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n"
            }
        ],
        "11": [
            {
                "modified_file": "src/main/java/org/joda/time/tz/ZoneInfoCompiler.java",
                "modified_lines": [
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75
                ],
                "text": "diff --git a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\nindex 64da5ea..6efe071 100644\n--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n@@ -65,11 +65,10 @@ public class ZoneInfoCompiler {\n \n     static Chronology cLenientISO;\n \n-    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {\n-        protected Boolean initialValue() {\n-            return Boolean.FALSE;\n-        }\n-    };\n+    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();\n+    static {\n+        cVerbose.set(Boolean.FALSE);\n+    }\n \n     /**\n      * Gets a flag indicating that verbose logging is required.\n"
            }
        ],
        "26": [
            {
                "modified_file": "src/main/java/org/joda/time/DateTimeZone.java",
                "modified_lines": [
                    933,
                    934,
                    935,
                    936,
                    937,
                    938,
                    939,
                    940,
                    941,
                    942,
                    943,
                    944,
                    945,
                    946,
                    947
                ],
                "text": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 23f70a5c..9edb1888 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -933,15 +933,6 @@ public abstract class DateTimeZone implements Serializable {\n      * @throws IllegalArgumentException if the zone has no equivalent local time\n      * @since 2.0\n      */\n-    public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {\n-        int offsetOriginal = getOffset(originalInstantUTC);\n-        long instantUTC = instantLocal - offsetOriginal;\n-        int offsetLocalFromOriginal = getOffset(instantUTC);\n-        if (offsetLocalFromOriginal == offsetOriginal) {\n-            return instantUTC;\n-        }\n-        return convertLocalToUTC(instantLocal, strict);\n-    }\n \n     /**\n      * Converts a local instant to a standard UTC instant with the same\n"
            },
            {
                "modified_file": "src/main/java/org/joda/time/chrono/ZonedChronology.java",
                "modified_lines": [
                    433,
                    434,
                    435,
                    436,
                    437,
                    438,
                    439,
                    445,
                    446,
                    447,
                    448,
                    449,
                    450,
                    451,
                    457,
                    458,
                    459,
                    460,
                    461,
                    462,
                    463,
                    464,
                    465,
                    466,
                    467,
                    468,
                    469,
                    470,
                    478,
                    479,
                    480,
                    481,
                    482,
                    483,
                    484,
                    525,
                    526,
                    527,
                    528,
                    529,
                    530,
                    531,
                    537,
                    538,
                    539,
                    540,
                    541,
                    542,
                    543
                ],
                "text": "diff --git a/src/main/java/org/joda/time/chrono/ZonedChronology.java b/src/main/java/org/joda/time/chrono/ZonedChronology.java\nindex 819f64e..f165f3d 100644\n--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java\n@@ -433,7 +433,7 @@ public final class ZonedChronology extends AssembledChronology {\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n-               return iZone.convertLocalToUTC(localInstant, false, instant);\n+               return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -445,7 +445,7 @@ public final class ZonedChronology extends AssembledChronology {\n             } else {\n                long localInstant = iZone.convertUTCToLocal(instant);\n                localInstant = iField.add(localInstant, value);\n-               return iZone.convertLocalToUTC(localInstant, false, instant);\n+               return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -457,14 +457,14 @@ public final class ZonedChronology extends AssembledChronology {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.addWrapField(localInstant, value);\n-                return iZone.convertLocalToUTC(localInstant, false, instant);\n+                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n         public long set(long instant, int value) {\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, value);\n-            long result = iZone.convertLocalToUTC(localInstant, false, instant);\n+            long result = iZone.convertLocalToUTC(localInstant, false);\n             if (get(result) != value) {\n                 throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n                     \"Illegal instant due to time zone offset transition: \" +\n@@ -478,7 +478,7 @@ public final class ZonedChronology extends AssembledChronology {\n             // cannot verify that new value stuck because set may be lenient\n             long localInstant = iZone.convertUTCToLocal(instant);\n             localInstant = iField.set(localInstant, text, locale);\n-            return iZone.convertLocalToUTC(localInstant, false, instant);\n+            return iZone.convertLocalToUTC(localInstant, false);\n         }\n \n         public int getDifference(long minuendInstant, long subtrahendInstant) {\n@@ -525,7 +525,7 @@ public final class ZonedChronology extends AssembledChronology {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundFloor(localInstant);\n-                return iZone.convertLocalToUTC(localInstant, false, instant);\n+                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n@@ -537,7 +537,7 @@ public final class ZonedChronology extends AssembledChronology {\n             } else {\n                 long localInstant = iZone.convertUTCToLocal(instant);\n                 localInstant = iField.roundCeiling(localInstant);\n-                return iZone.convertLocalToUTC(localInstant, false, instant);\n+                return iZone.convertLocalToUTC(localInstant, false);\n             }\n         }\n \n"
            },
            {
                "modified_file": "src/main/java/org/joda/time/field/LenientDateTimeField.java",
                "modified_lines": [
                    72,
                    73,
                    74,
                    75,
                    76,
                    77
                ],
                "text": "diff --git a/src/main/java/org/joda/time/field/LenientDateTimeField.java b/src/main/java/org/joda/time/field/LenientDateTimeField.java\nindex 6cf4c718..450a4eff 100644\n--- a/src/main/java/org/joda/time/field/LenientDateTimeField.java\n+++ b/src/main/java/org/joda/time/field/LenientDateTimeField.java\n@@ -72,6 +72,6 @@ public class LenientDateTimeField extends DelegatedDateTimeField {\n         long localInstant = iBase.getZone().convertUTCToLocal(instant);\n         long difference = FieldUtils.safeSubtract(value, get(instant));\n         localInstant = getType().getField(iBase.withUTC()).add(localInstant, difference);\n-        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);\n+        return iBase.getZone().convertLocalToUTC(localInstant, false);\n     }\n }\n"
            }
        ],
        "12": [
            {
                "modified_file": "src/main/java/org/joda/time/LocalDate.java",
                "modified_lines": [
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    241,
                    242,
                    243,
                    244,
                    245,
                    246,
                    247,
                    248,
                    249,
                    250,
                    251,
                    252
                ],
                "text": "diff --git a/src/main/java/org/joda/time/LocalDate.java b/src/main/java/org/joda/time/LocalDate.java\nindex c86b9d7..3868531 100644\n--- a/src/main/java/org/joda/time/LocalDate.java\n+++ b/src/main/java/org/joda/time/LocalDate.java\n@@ -207,10 +207,9 @@ public final class LocalDate\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n-        int era = calendar.get(Calendar.ERA);\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDate(\n-            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n+            yearOfEra,\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH)\n         );\n@@ -241,12 +240,7 @@ public final class LocalDate\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n-        if (date.getTime() < 0) {\n             // handle years in era BC\n-            GregorianCalendar cal = new GregorianCalendar();\n-            cal.setTime(date);\n-            return fromCalendarFields(cal);\n-        }\n         return new LocalDate(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n"
            },
            {
                "modified_file": "src/main/java/org/joda/time/LocalDateTime.java",
                "modified_lines": [
                    196,
                    197,
                    198,
                    199,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    234,
                    235,
                    236,
                    237,
                    238,
                    239,
                    240,
                    241,
                    242,
                    243,
                    244,
                    245
                ],
                "text": "diff --git a/src/main/java/org/joda/time/LocalDateTime.java b/src/main/java/org/joda/time/LocalDateTime.java\nindex e75deca..f37db3e 100644\n--- a/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/src/main/java/org/joda/time/LocalDateTime.java\n@@ -196,10 +196,9 @@ public final class LocalDateTime\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n-        int era = calendar.get(Calendar.ERA);\n         int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDateTime(\n-            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n+            yearOfEra,\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH),\n             calendar.get(Calendar.HOUR_OF_DAY),\n@@ -234,12 +233,7 @@ public final class LocalDateTime\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n-        if (date.getTime() < 0) {\n             // handle years in era BC\n-            GregorianCalendar cal = new GregorianCalendar();\n-            cal.setTime(date);\n-            return fromCalendarFields(cal);\n-        }\n         return new LocalDateTime(\n             date.getYear() + 1900,\n             date.getMonth() + 1,\n"
            }
        ],
        "10": [
            {
                "modified_file": "src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
                "modified_lines": [
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108
                ],
                "text": "diff --git a/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java b/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java\nindex 839d3b8..91b2c5c 100644\n--- a/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java\n+++ b/src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java\n@@ -49,7 +49,6 @@ public abstract class BaseSingleFieldPeriod\n     /** Serialization version. */\n     private static final long serialVersionUID = 9386874258972L;\n     /** The start of 1972. */\n-    private static final long START_1972 = 2L * 365L * 86400L * 1000L;\n \n     /** The period in the units of this period. */\n     private volatile int iPeriod;\n@@ -102,7 +101,7 @@ public abstract class BaseSingleFieldPeriod\n             throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");\n         }\n         Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n-        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));\n+        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\n         return values[0];\n     }\n \n"
            }
        ],
        "14": [
            {
                "modified_file": "src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java",
                "modified_lines": [
                    206,
                    207,
                    208,
                    209,
                    210,
                    211,
                    212,
                    213,
                    214,
                    215,
                    216,
                    217
                ],
                "text": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex 2892a2d..afca44e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,12 +206,7 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-        if (partial.size() > 0 && partial.getFieldType(0).equals(DateTimeFieldType.monthOfYear()) && fieldIndex == 0) {\n             // month is largest field and being added to, such as month-day\n-            int curMonth0 = partial.getValue(0) - 1;\n-            int newMonth = ((curMonth0 + (valueToAdd % 12) + 12) % 12) + 1;\n-            return set(partial, 0, values, newMonth);\n-        }\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n"
            }
        ],
        "1": [
            {
                "modified_file": "src/main/java/org/joda/time/Partial.java",
                "modified_lines": [
                    214,
                    215,
                    216,
                    217,
                    218,
                    219,
                    220,
                    221,
                    222,
                    223,
                    224,
                    225,
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    232,
                    233
                ],
                "text": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 6ff2771..3b84fdc 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -214,20 +214,11 @@ public final class Partial\n             DateTimeFieldType loopType = types[i];\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n-                if (loopUnitField.isSupported() == false) {\n-                    if (lastUnitField.isSupported()) {\n-                        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n-                                        types[i - 1].getName() + \" < \" + loopType.getName());\n-                    } else {\n-                        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" +\n-                                        types[i - 1].getName() + \" and \" + loopType.getName());\n-                    }\n-                }\n                 int compare = lastUnitField.compareTo(loopUnitField);\n                 if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n-                } else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n+                } else if (compare == 0) {\n                     if (types[i - 1].getRangeDurationType() == null) {\n                         if (loopType.getRangeDurationType() == null) {\n                             throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n"
            },
            {
                "modified_file": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
                "modified_lines": [
                    224,
                    225,
                    226,
                    227,
                    228,
                    229
                ],
                "text": "diff --git a/src/main/java/org/joda/time/field/UnsupportedDurationField.java b/src/main/java/org/joda/time/field/UnsupportedDurationField.java\nindex bf44e01..7e0ce57 100644\n--- a/src/main/java/org/joda/time/field/UnsupportedDurationField.java\n+++ b/src/main/java/org/joda/time/field/UnsupportedDurationField.java\n@@ -224,6 +224,9 @@ public final class UnsupportedDurationField extends DurationField implements Ser\n      * @return zero always\n      */\n     public int compareTo(DurationField durationField) {\n+        if (durationField.isSupported()) {\n+            return 1;\n+        }\n         return 0;\n     }\n \n"
            }
        ]
    },
    "Mockito": {
        "7": [
            {
                "modified_file": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
                "modified_lines": [
                    376,
                    377,
                    378,
                    379,
                    380,
                    381,
                    382
                ],
                "text": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 80bd908..2d6c07b 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,7 +376,6 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n-            registerTypeParametersOn(new TypeVariable[] { typeVariable });\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n \n"
            }
        ],
        "31": [
            {
                "modified_file": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
                "modified_lines": [
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65
                ],
                "text": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\nindex 4942d7c..10d3b0f 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n@@ -6,7 +6,6 @@ package org.mockito.internal.stubbing.defaultanswers;\n \n import java.io.Serializable;\n import java.lang.reflect.Method;\n-import java.util.Arrays;\n \n import org.mockito.Mockito;\n import org.mockito.cglib.proxy.MethodInterceptor;\n@@ -58,8 +57,7 @@ public class ReturnsSmartNulls implements Answer<Object>, Serializable {\n         }\n \n \t\tprivate String formatMethodCall() {\n-\t\t\tString args = Arrays.toString(invocation.getArguments());\n-\t\t\treturn invocation.getMethod().getName() + \"(\" + args.substring(1, args.length() - 1) +\t\")\";\n+\t\t\treturn invocation.getMethod().getName() + \"()\";\n \t\t}\n     }\n \n"
            }
        ],
        "15": [
            {
                "modified_file": "src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java",
                "modified_lines": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31
                ],
                "text": "diff --git a/src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java b/src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java\nindex 673de91..637c450 100644\n--- a/src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java\n+++ b/src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java\n@@ -1,7 +1,6 @@\n package org.mockito.internal.configuration.injection;\n \n import org.mockito.exceptions.base.MockitoException;\n-import org.mockito.internal.util.reflection.BeanPropertySetter;\n import org.mockito.internal.util.reflection.FieldSetter;\n \n import java.lang.reflect.Field;\n@@ -23,9 +22,7 @@ public class FinalMockCandidateFilter implements MockCandidateFilter {\n             return new OngoingInjecter() {\n                 public boolean thenInject() {\n                     try {\n-                        if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {\n                             new FieldSetter(fieldInstance, field).set(matchingMock);\n-                        }\n                     } catch (Exception e) {\n                         throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e);\n                     }\n"
            }
        ],
        "27": [
            {
                "modified_file": "src/org/mockito/internal/util/MockUtil.java",
                "modified_lines": [
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67
                ],
                "text": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex d7c530c..3c20596 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -61,7 +61,8 @@ public class MockUtil {\n \n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());\n+        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n \n"
            }
        ],
        "24": [
            {
                "modified_file": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
                "modified_lines": [
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79
                ],
                "text": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex d19fcda..4c00f50 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -73,7 +73,7 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n             //see issue 184.\n             //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).\n             //Only for compareTo() method by the Comparable interface\n-            return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;\n+            return 1;\n         }\n         \n         Class<?> returnType = invocation.getMethod().getReturnType();\n"
            }
        ],
        "13": [
            {
                "modified_file": "src/org/mockito/internal/MockHandler.java",
                "modified_lines": [
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84,
                    85,
                    86,
                    87
                ],
                "text": "diff --git a/src/org/mockito/internal/MockHandler.java b/src/org/mockito/internal/MockHandler.java\nindex 8962ceb..6f2e4bc 100644\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n@@ -74,14 +74,12 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte\n         if (verificationMode != null) {\n             //We need to check if verification was started on the correct mock \n             // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n-            if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n+            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {                \n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n-            } else {\n                 // this means there is an invocation on a different mock. Re-adding verification mode \n                 // - see VerifyingWithAnExtraCallToADifferentMockTest (bug 138)\n-                mockingProgress.verificationStarted(verificationMode);\n             }\n         }\n         \n"
            }
        ],
        "17": [
            {
                "modified_file": "src/org/mockito/internal/creation/MockSettingsImpl.java",
                "modified_lines": [
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    73,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79
                ],
                "text": "diff --git a/src/org/mockito/internal/creation/MockSettingsImpl.java b/src/org/mockito/internal/creation/MockSettingsImpl.java\nindex 5285d90..bf2cf3b 100644\n--- a/src/org/mockito/internal/creation/MockSettingsImpl.java\n+++ b/src/org/mockito/internal/creation/MockSettingsImpl.java\n@@ -17,11 +17,9 @@ public class MockSettingsImpl implements MockSettings {\n     private Object spiedInstance;\n     private Answer<Object> defaultAnswer;\n     private MockName mockName;\n-    private boolean serializable;\n \n     public MockSettings serializable() {\n-        this.serializable = true;\n-        return this;\n+        return this.extraInterfaces(java.io.Serializable.class);\n     }\n \n     public MockSettings extraInterfaces(Class<?>... extraInterfaces) {\n@@ -73,7 +71,7 @@ public class MockSettingsImpl implements MockSettings {\n     }\n \n     public boolean isSerializable() {\n-        return serializable;\n+        return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);\n     }\n \n     public void initiateMockName(Class classToMock) {\n"
            },
            {
                "modified_file": "src/org/mockito/internal/util/MockUtil.java",
                "modified_lines": [
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53
                ],
                "text": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex b8ed8b4..d2d042f 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -16,7 +16,6 @@ import org.mockito.internal.creation.MockSettingsImpl;\n import org.mockito.internal.creation.jmock.ClassImposterizer;\n import org.mockito.internal.util.reflection.LenientCopyTool;\n \n-import java.io.Serializable;\n \n @SuppressWarnings(\"unchecked\")\n public class MockUtil {\n@@ -43,11 +42,7 @@ public class MockUtil {\n         Class<?>[] interfaces = settings.getExtraInterfaces();\n \n         Class<?>[] ancillaryTypes;\n-        if (settings.isSerializable()) {\n-            ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class);\n-        } else {\n             ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;\n-        }\n \n         Object spiedInstance = settings.getSpiedInstance();\n         \n"
            }
        ],
        "2": [
            {
                "modified_file": "src/org/mockito/internal/util/Timer.java",
                "modified_lines": [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35
                ],
                "text": "diff --git a/src/org/mockito/internal/util/Timer.java b/src/org/mockito/internal/util/Timer.java\nindex 907e545..4a51e5c 100644\n--- a/src/org/mockito/internal/util/Timer.java\n+++ b/src/org/mockito/internal/util/Timer.java\n@@ -1,6 +1,5 @@\n package org.mockito.internal.util;\n \n-import org.mockito.exceptions.Reporter;\n \n public class Timer {\n \n@@ -8,7 +7,6 @@ public class Timer {\n     private long startTime = -1;\n \n     public Timer(long durationMillis) {\n-        validateInput(durationMillis);\n         this.durationMillis = durationMillis;\n     }\n \n@@ -27,9 +25,4 @@ public class Timer {\n         startTime = System.currentTimeMillis();\n     }\n \n-    private void validateInput(long durationMillis) {\n-        if (durationMillis < 0) {\n-            new Reporter().cannotCreateTimerWithNegativeDurationTime(durationMillis);\n-        }\n-    }\n }\n"
            }
        ],
        "38": [
            {
                "modified_file": "src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java",
                "modified_lines": [
                    45,
                    46,
                    47,
                    48,
                    49,
                    50
                ],
                "text": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 9d4f834..671fbc5 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -45,6 +45,6 @@ public class ArgumentMatchingTool {\n     }\n \n     private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());\n+        return StringDescription.toString(m).equals(arg.toString());\n     }\n }\n"
            }
        ],
        "28": [
            {
                "modified_file": "src/org/mockito/internal/configuration/DefaultInjectionEngine.java",
                "modified_lines": [
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97
                ],
                "text": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 846fbf7..213ebf3 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,8 +90,7 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-            mocks.remove(injected);\n+            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n         }\n     }\n \n"
            }
        ],
        "37": [
            {
                "modified_file": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java",
                "modified_lines": [
                    25,
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32,
                    33,
                    34,
                    35,
                    36,
                    37,
                    38,
                    39,
                    40
                ],
                "text": "diff --git a/src/org/mockito/internal/stubbing/answers/AnswersValidator.java b/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\nindex afaf14a..5d80578 100644\n--- a/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n+++ b/src/org/mockito/internal/stubbing/answers/AnswersValidator.java\n@@ -25,16 +25,8 @@ public class AnswersValidator {\n             validateDoNothing((DoesNothing) answer, invocation);\n         }\n         \n-        if (answer instanceof CallsRealMethods) {\n-            validateMockingConcreteClass((CallsRealMethods) answer, invocation);\n-        }\n     }\n \n-    private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) {\n-        if (invocation.getMethod().getDeclaringClass().isInterface()) {\n-            reporter.cannotCallRealMethodOnInterface();\n-        }\n-    }\n \n     private void validateDoNothing(DoesNothing answer, Invocation invocation) {\n         if (!invocation.isVoid()) {\n"
            }
        ],
        "33": [
            {
                "modified_file": "src/org/mockito/internal/invocation/InvocationMatcher.java",
                "modified_lines": [
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110,
                    111,
                    112,
                    113
                ],
                "text": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex ffad2b1..203413f 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -95,19 +95,8 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         Method m1 = invocation.getMethod();\n         Method m2 = candidate.getMethod();\n         \n-        if (m1.getName() != null && m1.getName().equals(m2.getName())) {\n         \t/* Avoid unnecessary cloning */\n-        \tClass[] params1 = m1.getParameterTypes();\n-        \tClass[] params2 = m2.getParameterTypes();\n-        \tif (params1.length == params2.length) {\n-        \t    for (int i = 0; i < params1.length; i++) {\n-        \t\tif (params1[i] != params2[i])\n-        \t\t    return false;\n-        \t    }\n-        \t    return true;\n-        \t}\n-        }\n-        return false;\n+        return m1.equals(m2);\n     }\n     \n     public Location getLocation() {\n"
            }
        ],
        "30": [
            {
                "modified_file": "src/org/mockito/exceptions/Reporter.java",
                "modified_lines": [
                    435,
                    436,
                    437,
                    438,
                    439,
                    440,
                    441,
                    442,
                    443,
                    444,
                    445
                ],
                "text": "diff --git a/src/org/mockito/exceptions/Reporter.java b/src/org/mockito/exceptions/Reporter.java\nindex 5900574..5e46a2b 100644\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n@@ -435,11 +435,10 @@ public class Reporter {\n                 ));\n     }\n \n-    public void smartNullPointerException(Object obj, Location location) {\n+    public void smartNullPointerException(Location location) {\n         throw new SmartNullPointerException(join(\n                 \"You have a NullPointerException here:\",\n                 new Location(),\n-                obj,\n                 \"Because this method was *not* stubbed correctly:\",\n                 location,\n                 \"\"\n"
            },
            {
                "modified_file": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
                "modified_lines": [
                    53,
                    54,
                    55,
                    56,
                    57,
                    58,
                    59
                ],
                "text": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\nindex 928f314..4942d7c 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java\n@@ -53,7 +53,7 @@ public class ReturnsSmartNulls implements Answer<Object>, Serializable {\n                 return \"SmartNull returned by unstubbed \" + formatMethodCall()  + \" method on mock\";\n             }\n \n-            new Reporter().smartNullPointerException(obj, location);\n+            new Reporter().smartNullPointerException(location);\n             return null;\n         }\n \n"
            }
        ],
        "34": [
            {
                "modified_file": "src/org/mockito/internal/invocation/InvocationMatcher.java",
                "modified_lines": [
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109
                ],
                "text": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex f15b9d4..c72b119 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -103,7 +103,7 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n-            if (m instanceof CapturesArguments && i.getArguments().length > k) {\n+            if (m instanceof CapturesArguments) {\n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n"
            }
        ],
        "22": [
            {
                "modified_file": "src/org/mockito/internal/matchers/Equality.java",
                "modified_lines": [
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18
                ],
                "text": "diff --git a/src/org/mockito/internal/matchers/Equality.java b/src/org/mockito/internal/matchers/Equality.java\nindex 0791441..43e11fc 100644\n--- a/src/org/mockito/internal/matchers/Equality.java\n+++ b/src/org/mockito/internal/matchers/Equality.java\n@@ -10,9 +10,7 @@ import java.lang.reflect.Array;\n public class Equality {\n \n     public static boolean areEqual(Object o1, Object o2) {\n-        if (o1 == o2 ) {\n-            return true;\n-\t} else if (o1 == null || o2 == null) {\n+        if (o1 == null || o2 == null) {\n             return o1 == null && o2 == null;\n         } else if (isArray(o1)) {\n             return isArray(o2) && areArraysEqual(o1, o2);\n"
            }
        ],
        "23": [
            {
                "modified_file": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
                "modified_lines": [
                    41,
                    42,
                    43,
                    44,
                    45,
                    46,
                    47,
                    48,
                    49,
                    50,
                    51,
                    52,
                    53,
                    54,
                    55,
                    56,
                    58,
                    59,
                    60,
                    61,
                    62,
                    63,
                    64,
                    65,
                    66,
                    67,
                    68,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    109,
                    110,
                    111,
                    112,
                    113,
                    114,
                    115,
                    124,
                    125,
                    126,
                    127,
                    128,
                    129,
                    130,
                    133,
                    134,
                    135,
                    136,
                    137,
                    138,
                    139,
                    140,
                    141
                ],
                "text": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\nindex b18dd3b..c4384f7 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n@@ -41,16 +41,14 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n     \n     private static final long serialVersionUID = -7105341425736035847L;\n \n-    private transient MockitoCore mockitoCore;\n-    private transient ReturnsEmptyValues delegate;\n+    private MockitoCore mockitoCore = new MockitoCore();\n+    private ReturnsEmptyValues delegate = new ReturnsEmptyValues();\n \n     public Object answer(InvocationOnMock invocation) throws Throwable {\n         GenericMetadataSupport returnTypeGenericMetadata =\n                 actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());\n \n         Class<?> rawType = returnTypeGenericMetadata.rawType();\n-        instantiateMockitoCoreIfNeeded();\n-        instantiateDelegateIfNeeded();\n         if (!mockitoCore.isTypeMockable(rawType)) {\n             return delegate.returnValueFor(rawType);\n         }\n@@ -58,17 +56,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n         return getMock(invocation, returnTypeGenericMetadata);\n     }\n \n-    private synchronized void instantiateMockitoCoreIfNeeded() {\n-        if (mockitoCore == null) {\n-            mockitoCore = new MockitoCore();\n-        }\n-    }\n \n-    private synchronized void instantiateDelegateIfNeeded() {\n-        if (delegate == null) {\n-            delegate = new ReturnsEmptyValues();\n-        }\n-    }\n \n     private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {\n     \tInternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());\n@@ -109,7 +97,6 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n                 : withSettings();\n \n         return mockSettings\n-\t\t        .serializable()\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n@@ -124,7 +111,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n \n     private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {\n \n-        container.addAnswer(new SerializableAnswer() {\n+        container.addAnswer(new Answer<Object>() {\n             public Object answer(InvocationOnMock invocation) throws Throwable {\n                 return mock;\n             }\n@@ -133,9 +120,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n         return mock;\n     }\n \t\n-\tabstract class SerializableAnswer implements Answer<Object>, Serializable {\n \t\t\n-\t}\n \t\n \n     protected GenericMetadataSupport actualParameterizedType(Object mock) {\n"
            }
        ],
        "8": [
            {
                "modified_file": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
                "modified_lines": [
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82
                ],
                "text": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 8046052..152e942 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,7 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else if (typeParameter != actualTypeArgument) {\n+            } else {\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n"
            }
        ],
        "4": [
            {
                "modified_file": "src/org/mockito/exceptions/Reporter.java",
                "modified_lines": [
                    421,
                    422,
                    423,
                    424,
                    425,
                    426,
                    427,
                    431,
                    432,
                    433,
                    434,
                    435,
                    436,
                    437,
                    674,
                    675,
                    676,
                    677,
                    678,
                    679,
                    680,
                    681,
                    682
                ],
                "text": "diff --git a/src/org/mockito/exceptions/Reporter.java b/src/org/mockito/exceptions/Reporter.java\nindex d57e33d..9581a54 100644\n--- a/src/org/mockito/exceptions/Reporter.java\n+++ b/src/org/mockito/exceptions/Reporter.java\n@@ -421,7 +421,7 @@ public class Reporter {\n         throw new NoInteractionsWanted(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n-                \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n+                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                 undesired.getLocation(),\n                 scenario\n         ));\n@@ -431,7 +431,7 @@ public class Reporter {\n         throw new VerificationInOrderFailure(join(\n                 \"No interactions wanted here:\",\n                 new LocationImpl(),\n-                \"But found this interaction on mock '\" + safelyGetMockName(undesired.getMock()) + \"':\",\n+                \"But found this interaction on mock '\" + undesired.getMock() + \"':\",\n                 undesired.getLocation()\n         ));\n     }\n@@ -674,9 +674,6 @@ public class Reporter {\n     }\n \n     private String exceptionCauseMessageIfAvailable(Exception details) {\n-        if (details.getCause() == null) {\n-            return details.getMessage();\n-        }\n         return details.getCause().getMessage();\n     }\n \n"
            }
        ],
        "26": [
            {
                "modified_file": "src/org/mockito/internal/util/Primitives.java",
                "modified_lines": [
                    63,
                    64,
                    65,
                    66,
                    67,
                    68
                ],
                "text": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex 5a91f3a..b44b825 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -63,6 +63,6 @@ public class Primitives {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0D);\n+        primitiveValues.put(double.class, 0);\n     }\n }\n\\ No newline at end of file\n"
            }
        ],
        "29": [
            {
                "modified_file": "src/org/mockito/internal/matchers/Same.java",
                "modified_lines": [
                    26,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32
                ],
                "text": "diff --git a/src/org/mockito/internal/matchers/Same.java b/src/org/mockito/internal/matchers/Same.java\nindex b8267b9..6c172fe 100644\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n@@ -26,7 +26,7 @@ public class Same extends ArgumentMatcher<Object> implements Serializable {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n-        description.appendText(wanted == null ? \"null\" : wanted.toString());\n+        description.appendText(wanted.toString());\n         appendQuoting(description);\n         description.appendText(\")\");\n     }\n"
            }
        ],
        "36": [
            {
                "modified_file": "src/org/mockito/internal/invocation/Invocation.java",
                "modified_lines": [
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    200,
                    201,
                    202,
                    203,
                    204,
                    205,
                    206,
                    207,
                    208
                ],
                "text": "diff --git a/src/org/mockito/internal/invocation/Invocation.java b/src/org/mockito/internal/invocation/Invocation.java\nindex 5e9b795..94d4612 100644\n--- a/src/org/mockito/internal/invocation/Invocation.java\n+++ b/src/org/mockito/internal/invocation/Invocation.java\n@@ -8,7 +8,6 @@ import java.util.*;\n \n import org.hamcrest.Matcher;\n import org.mockito.exceptions.PrintableInvocation;\n-import org.mockito.exceptions.Reporter;\n import org.mockito.internal.debugging.Location;\n import org.mockito.internal.invocation.realmethod.RealMethod;\n import org.mockito.internal.matchers.*;\n@@ -200,9 +199,6 @@ public class Invocation implements PrintableInvocation, InvocationOnMock, Printi\n     }\n \n     public Object callRealMethod() throws Throwable {\n-        if (this.getMethod().getDeclaringClass().isInterface()) {\n-            new Reporter().cannotCallRealMethodOnInterface();\n-        }\n         return realMethod.invoke(mock, rawArguments);\n     }\n \n"
            }
        ],
        "12": [
            {
                "modified_file": "src/org/mockito/internal/util/reflection/GenericMaster.java",
                "modified_lines": [
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    27,
                    28
                ],
                "text": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 4df9f7a..64bf154 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -17,12 +17,8 @@ public class GenericMaster {\n         Type generic = field.getGenericType();\n         if (generic != null && generic instanceof ParameterizedType) {\n             Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-            if (actual instanceof Class) {\n                 return (Class) actual;\n-            } else if (actual instanceof ParameterizedType) {\n                 //in case of nested generics we don't go deep\n-                return (Class) ((ParameterizedType) actual).getRawType();\n-            }\n         }\n         \n         return Object.class;\n"
            }
        ],
        "10": [
            {
                "modified_file": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
                "modified_lines": [
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    69,
                    70,
                    71,
                    72,
                    73,
                    74,
                    75,
                    85,
                    86,
                    87,
                    88,
                    89,
                    90,
                    91,
                    92,
                    93,
                    94,
                    95,
                    96,
                    97,
                    98,
                    99,
                    100,
                    101,
                    102,
                    103,
                    104,
                    105,
                    106,
                    107,
                    108,
                    109,
                    110
                ],
                "text": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\nindex 3bb7636..e2ded55 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java\n@@ -14,7 +14,6 @@ import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.util.MockUtil;\n import org.mockito.internal.util.reflection.GenericMetadataSupport;\n import org.mockito.invocation.InvocationOnMock;\n-import org.mockito.mock.MockCreationSettings;\n import org.mockito.stubbing.Answer;\n \n import java.io.IOException;\n@@ -69,7 +68,7 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n \n         // record deep stub answer\n         return recordDeepStubAnswer(\n-                newDeepStubMock(returnTypeGenericMetadata, invocation.getMock()),\n+                newDeepStubMock(returnTypeGenericMetadata),\n                 container\n         );\n     }\n@@ -85,26 +84,22 @@ public class ReturnsDeepStubs implements Answer<Object>, Serializable {\n      * @param parentMock The parent of the current deep stub mock.\n      * @return The mock\n      */\n-    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata, Object parentMock) {\n-        MockCreationSettings parentMockSettings = new MockUtil().getMockSettings(parentMock);\n+    private Object newDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) {\n         return mockitoCore().mock(\n                 returnTypeGenericMetadata.rawType(),\n-                withSettingsUsing(returnTypeGenericMetadata, parentMockSettings)\n+                withSettingsUsing(returnTypeGenericMetadata)\n         );\n     }\n \n-    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {\n+    private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) {\n         MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\n                 withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n                 : withSettings();\n \n-        return propagateSerializationSettings(mockSettings, parentMockSettings)\n+        return mockSettings.serializable()\n                 .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));\n     }\n \n-    private MockSettings propagateSerializationSettings(MockSettings mockSettings, MockCreationSettings parentMockSettings) {\n-        return mockSettings.serializable(parentMockSettings.getSerializableMode());\n-    }\n \n     private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {\n         return new ReturnsDeepStubsSerializationFallback(returnTypeGenericMetadata);\n"
            }
        ],
        "14": [
            {
                "modified_file": "src/org/mockito/internal/MockHandler.java",
                "modified_lines": [
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    74,
                    75,
                    76,
                    77,
                    78,
                    79,
                    80,
                    81,
                    82,
                    83,
                    84
                ],
                "text": "diff --git a/src/org/mockito/internal/MockHandler.java b/src/org/mockito/internal/MockHandler.java\nindex b6c1b78..bc18218 100644\n--- a/src/org/mockito/internal/MockHandler.java\n+++ b/src/org/mockito/internal/MockHandler.java\n@@ -17,7 +17,6 @@ import org.mockito.internal.stubbing.InvocationContainerImpl;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubbedInvocationMatcher;\n import org.mockito.internal.stubbing.VoidMethodStubbableImpl;\n-import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.stubbing.Answer;\n import org.mockito.stubbing.VoidMethodStubbable;\n@@ -74,11 +73,9 @@ public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInte\n         if (verificationMode != null) {\n             //We need to check if verification was started on the correct mock \n             // - see VerifyingWithAnExtraCallToADifferentMockTest\n-            if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {\n                 VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);            \n                 verificationMode.verify(data);\n                 return null;\n-            }\n         }\n         \n         invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);\n"
            },
            {
                "modified_file": "src/org/mockito/internal/MockitoCore.java",
                "modified_lines": [
                    20,
                    21,
                    22,
                    23,
                    24,
                    25,
                    26,
                    71,
                    72,
                    73,
                    74,
                    75,
                    76,
                    77
                ],
                "text": "diff --git a/src/org/mockito/internal/MockitoCore.java b/src/org/mockito/internal/MockitoCore.java\nindex ae0d72b..fc99ea9 100755\n--- a/src/org/mockito/internal/MockitoCore.java\n+++ b/src/org/mockito/internal/MockitoCore.java\n@@ -20,7 +20,6 @@ import org.mockito.internal.progress.ThreadSafeMockingProgress;\n import org.mockito.internal.stubbing.OngoingStubbingImpl;\n import org.mockito.internal.stubbing.StubberImpl;\n import org.mockito.internal.util.MockUtil;\n-import org.mockito.internal.verification.MockAwareVerificationMode;\n import org.mockito.internal.verification.VerificationDataImpl;\n import org.mockito.internal.verification.VerificationModeFactory;\n import org.mockito.internal.verification.api.InOrderContext;\n@@ -71,7 +70,7 @@ public class MockitoCore {\n         } else if (!mockUtil.isMock(mock)) {\n             reporter.notAMockPassedToVerify();\n         }\n-        mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));\n+        mockingProgress.verificationStarted(mode);\n         return mock;\n     }\n     \n"
            }
        ]
    }
}